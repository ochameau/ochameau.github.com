"598582","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18841","2011-03-31 03:58:00","Europe/Paris","2011-03-31 01:58:47","2011-04-01 19:32:38","","post","xhtml","2011/03/31/Jetpack-runner","en","Jetpack runner","","","Here is the very first release of Jetpack runner. This firefox extension built on top of the Addon SDK is a personal project that aim to ease development of firefox extension using the SDK. It is a great exhibit of SDK capabilities as we can now develop such tool using the SDK itself!\r\n\r\nFor now, to create an addon you need to go thought a python application that only has a command line interface:\r\n<img src=\"/public/jetpack_runner/.cfx_m.jpg\" alt=\"cfx.jpg\" style=\"margin: 0 auto; display: block;\" title=\"cfx\" />\r\nThis is painfull to install and even more annoying to use on Windows as there is no really decent command line interface. Finally, if we compare to chrome extensions, we only need chrome to build an addon!\r\n\r\nThis leads me to build a Firefox extension, that can be really easy to install in Firefox and allow to build really cool interfaces to create, run and test your addons.\r\n<br/> <br/>\r\n\r\n<h2>Jetpack runner features:</h2>\r\n<img src=\"/public/jetpack_runner/.jr_s.jpg\" alt=\"jr.png\" style=\"float: right; margin: 0 0 1em 1em;\" title=\"jr.png, mar. 2011\" />\r\n<ul>\r\n <li>Download and install SDK automatically</li>\r\n <li>Create addon from templates</li>\r\n <li>Run an addon</li>\r\n <li>Execute unit-tests</li>\r\n <li>Generate firefox extension XPI file or xulrunner application package</li>\r\n <li>You can run these either in current firefox instance or run them in a new one</li>\r\n <li>We can execute a package as a firefox extension or as a xulrunner application</li>\r\n</ul>\r\n<br/> <br/>\r\n\r\n<h2>Jetpack runner first steps:</h2>\r\n\r\nOn extension installation, a tab opens automatically on \"jetpack:\" url, the main jetpack runner interface. That allow to download and install a precise SDK release:\r\n<img src=\"/public/jetpack_runner/jr-first-run.jpg\" alt=\"jr-first-run.jpg\" style=\"margin: 0 auto; display: block;\" title=\"jr-first-run.jpg, mar. 2011\" />\r\n\r\nThen it displays a list of packages provided by addon SDK. \"addon-sdk\" is the main package to play with.\r\n<img src=\"/public/jetpack_runner/jr-packages.jpg\" alt=\"jr-packages.jpg\" style=\"margin: 0 auto; display: block;\" title=\"jr-packages.jpg, mar. 2011\" />\r\n\r\nAfter clicking on \"Create addon\" button, you would easily create a new one by filling obvious form and selecting a template addon:\r\n<img src=\"/public/jetpack_runner/.jr-templates_m.jpg\" alt=\"jr-templates.jpg\" style=\"margin: 0 auto; display: block;\" title=\"jr-templates.jpg, mar. 2011\" />\r\n\r\nAnd then, you end up on your newly created addon package page, where you can run it, execute unit tests or download as a firefox extension XPI file:\r\n<img src=\"/public/jetpack_runner/.jr-addon_m.jpg\" alt=\"jr-addon.jpg\" style=\"margin: 0 auto; display: block;\" title=\"jr-addon.jpg, mar. 2011\" />\r\n<br /> <br/>\r\n\r\n\r\n<h2>Jetpack runner!!!</h2>\r\n\r\nLast but not least, here is a link to install it or to checkout the source.<br/>\r\n<br/>\r\n<b>Firefox Extension: </b><br/>\r\n<a href=\"/public/jetpack_runner/jetpack-runner-0.1.1.xpi\">jetpack-runner-0.1.1.xpi</a>\r\n<br/><br/>\r\n<b>Source code: </b><br/>\r\n<a href=\"https://github.com/ochameau/jetpack-runner\">Github project</a>","Here is the very first release of Jetpack runner. This firefox extension built\non top of the Addon SDK is a personal project that aim to ease development of\nfirefox extension using the SDK. It is a great exhibit of SDK capabilities as\nwe can now develop such tool using the SDK itself! For now, to create an addon\nyou need to go thought a python application that only has a command line\ninterface: <img src=\"/public/jetpack_runner/.cfx_m.jpg\" alt=\"cfx.jpg\" style=\"margin: 0 auto; display: block;\" title=\"cfx\" /> This is painfull to install\nand even more annoying to use on Windows as there is no really decent command\nline interface. Finally, if we compare to chrome extensions, we only need\nchrome to build an addon! This leads me to build a Firefox extension, that can\nbe really easy to install in Firefox and allow to build really cool interfaces\nto create, run and test your addons.<br />\n<br />\n<h2>Jetpack runner features:</h2>\n<img src=\"/public/jetpack_runner/.jr_s.jpg\" alt=\"jr.png\" style=\"float: right; margin: 0 0 1em 1em;\" title=\"jr.png, mar. 2011\" />\n<ul>\n<li>Download and install SDK automatically</li>\n<li>Create addon from templates</li>\n<li>Run an addon</li>\n<li>Execute unit-tests</li>\n<li>Generate firefox extension XPI file or xulrunner application package</li>\n<li>You can run these either in current firefox instance or run them in a new\none</li>\n<li>We can execute a package as a firefox extension or as a xulrunner\napplication</li>\n</ul>\n<br />\n<br />\n<h2>Jetpack runner first steps:</h2>\nOn extension installation, a tab opens automatically on &quot;jetpack:&quot; url, the\nmain jetpack runner interface. That allow to download and install a precise SDK\nrelease: <img src=\"/public/jetpack_runner/jr-first-run.jpg\" alt=\"jr-first-run.jpg\" style=\"margin: 0 auto; display: block;\" title=\"jr-first-run.jpg, mar. 2011\" /> Then it displays a list of packages provided\nby addon SDK. &quot;addon-sdk&quot; is the main package to play with. <img src=\"/public/jetpack_runner/jr-packages.jpg\" alt=\"jr-packages.jpg\" style=\"margin: 0 auto; display: block;\" title=\"jr-packages.jpg, mar. 2011\" /> After\nclicking on &quot;Create addon&quot; button, you would easily create a new one by filling\nobvious form and selecting a template addon: <img src=\"/public/jetpack_runner/.jr-templates_m.jpg\" alt=\"jr-templates.jpg\" style=\"margin: 0 auto; display: block;\" title=\"jr-templates.jpg, mar. 2011\" /> And\nthen, you end up on your newly created addon package page, where you can run\nit, execute unit tests or download as a firefox extension XPI file: <img src=\"/public/jetpack_runner/.jr-addon_m.jpg\" alt=\"jr-addon.jpg\" style=\"margin: 0 auto; display: block;\" title=\"jr-addon.jpg, mar. 2011\" /><br />\n<br />\n<h2>Jetpack runner!!!</h2>\nLast but not least, here is a link to install it or to checkout the\nsource.<br />\n<br />\n<b>Firefox Extension:</b><br />\n<a href=\"/public/jetpack_runner/jetpack-runner-0.1.1.xpi\">jetpack-runner-0.1.1.xpi</a><br />\n\n<br />\n<b>Source code:</b><br />\n<a href=\"https://github.com/ochameau/jetpack-runner\">Github project</a>","","jetpack runner here the very first release jetpack runner this firefox extension built top the addon sdk personal project that aim ease development firefox extension using the sdk great exhibit sdk capabilities can now develop such tool using the sdk itself for now create addon you need thought python application that only has command line interface this painfull install and even more annoying use windows there really decent command line interface finally compare chrome extensions only need chrome build addon this leads build firefox extension that can really easy install firefox and allow build really cool interfaces create run and test your addons jetpack runner features download and install sdk automatically create addon from templates run addon execute unit tests generate firefox extension xpi file xulrunner application package you can run these either current firefox instance run them new one can execute package firefox extension xulrunner application jetpack runner first steps extension installation tab opens automatically quot jetpack quot url the main jetpack runner interface that allow download and install precise sdk release then displays list packages provided addon sdk quot addon sdk quot the main package play with after clicking quot create addon quot button you would easily create new one filling obvious form and selecting template addon and then you end your newly created addon package page where you can run execute unit tests download firefox extension xpi file jetpack runner last but not least here link install checkout the source firefox extension jetpack runner xpi source code github project","a:1:{s:3:\"tag\";a:2:{i:0;s:7:\"mozilla\";i:1;s:7:\"jetpack\";}}","1","0","1","1","6","0","0"
"537821","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18841","2010-08-06 01:39:00","Europe/Paris","2010-08-05 23:39:55","2010-08-06 21:28:38","","post","xhtml","2010/08/06/JSctypes-reboot","fr","JSctypes round two","","","<p>\r\nJsctypes has been introduced in Firefox 3.6 with simple C function call and only simple types: int, char, string, ...\r\nBut the next iteration of jsctypes that is coming in Firefox 4 is going to allow full C binding, with support of C structures and the ability to define a javascript function and give it to C library as a function pointer.\r\n</p>\r\n\r\n<p>\r\nNo more compilation, no more mozilla sdk download, nor XPCOM stuff, \r\njust plain javascript and only a tiny part of function and datatype declaration before doing a native binding!\r\n</p>\r\n\r\n<p>\r\nBut let the code talk! Here is an example that display a tray icon on windows.\r\nYou can copy and paste this code in your Javascript Console in Firefox 4 beta, \r\njust do not forget to change the icon path defined in the loadimage function call.\r\n</p>\r\n\r\n<pre>\r\n  /* simply load \"ctypes\" object */\r\n  Components.utils.import(\"resource://gre/modules/ctypes.jsm\");\r\n  \r\n  /* Load libraries that we are going to use */\r\n  var libuser32 = ctypes.open(\"user32.dll\");\r\n  var libshell32 = ctypes.open(\"shell32.dll\");\r\n\r\n  /* Here is the tedious work of declaring functions arguments types and struct attributes types */\r\n  /* In fact it's quite easy, you just have to find which precise type are using your native functions/struct */\r\n  /* but it may be hard to known, for example in windows API, which precise type is behing their \"HANDLE\" type ... */\r\n  /* I recommend you to find and look at python ctype binding source code because they already had done this work */\r\n    \r\n  /*\r\n  HANDLE WINAPI LoadImage(\r\n    __in_opt  HINSTANCE hinst,\r\n    __in      LPCTSTR lpszName,\r\n    __in      UINT uType,\r\n    __in      int cxDesired,\r\n    __in      int cyDesired,\r\n    __in      UINT fuLoad\r\n  );\r\n  */\r\n  var loadimage = libuser32.declare(\"LoadImageA\",\r\n    ctypes.stdcall_abi,\r\n    ctypes.int,\r\n    ctypes.int,\r\n    ctypes.char.ptr,\r\n    ctypes.int,\r\n    ctypes.int,\r\n    ctypes.int,\r\n    ctypes.int);\r\n  const LR_LOADFROMFILE = 16;\r\n  const IMAGE_ICON = 1;\r\n  \r\n  var notificationdata = ctypes.StructType(\"NOTIFICATIONDATA\",\r\n                                [{ cbSize  : ctypes.int          },\r\n                                 { hWnd    : ctypes.int          },\r\n                                 { uID     : ctypes.int          },\r\n                                 { uFlags  : ctypes.int          },\r\n                                 { uCallbackMessage : ctypes.int },\r\n                                 { hIcon        : ctypes.int     },\r\n                                 { szTip        : ctypes.char.array(64) },\r\n                                 { dwState      : ctypes.int     },\r\n                                 { dwStateMask  : ctypes.int     },\r\n                                 { szInfo       : ctypes.char.array(256) },\r\n                                 { uTimeoutOrVersion : ctypes.int },\r\n                                 { szInfoTitle  : ctypes.char.array(64) },\r\n                                 { dwInfoFlags  : ctypes.int },\r\n                                 { guidItem     : ctypes.int },\r\n                                 { hBalloonIcon : ctypes.int }\r\n                                ]);\r\n  const NIF_ICON = 0x00000002;\r\n  \r\n  /*\r\n  BOOL Shell_NotifyIcon(\r\n    __in  DWORD dwMessage,\r\n    __in  PNOTIFYICONDATA lpdata\r\n  );\r\n  */\r\n  var notifyicon = libshell32.declare(\"Shell_NotifyIcon\",\r\n                                    ctypes.stdcall_abi,\r\n                                    ctypes.bool,\r\n                                    ctypes.int,\r\n                                    notificationdata.ptr);\r\n  const NIM_ADD = 0x00000000;\r\n  \r\n\r\n  /* And now, the \"real\" code that is calling C functions */\r\n\r\n  /* load our ico file */\r\n  var hIcon = loadimage(0, \"c:\\default.ico\", IMAGE_ICON, 16, 16, LR_LOADFROMFILE);\r\n  \r\n  /* create a C struct that is defining a notification in tray */\r\n  var icon = notificationdata();\r\n  icon.cbSize = notificationdata.size;\r\n  icon.uFlags = NIF_ICON;\r\n  icon.szTip = \"My Tray Icon\";\r\n  icon.hIcon = hIcon;\r\n  \r\n  /* Display this notification! */\r\n  notifyicon(NIM_ADD, icon.address());\r\n\r\n</pre>\r\n\r\n<p>\r\nWe will be able to go futher and define a function callback to handle click events on the trayicon,\r\nbut there is currently a bug which cause some crashes when using ctypes.FunctionType on windows. \r\n(ctypes.FunctionType allow to transform a custom Javascript function to a C function pointer)<br/>\r\nHere is related bugs, which are still in process:\r\n<ul>\r\n <li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=573066\" hreflang=\"en\">Bug 573066 - Fix ctypes stdcall closure tests</a></li>\r\n <li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=585175\" hreflang=\"en\">Bug 585175 - Don't automangle ctypes stdcall symbols for WINAPI</a></li>\r\n</ul>\r\nThe first leads to crashes with FunctionType, and the second may lead to lib.declare with unfindable symbols errors when using ctypes.stdcall_abi.\r\n</p>","<p>Jsctypes has been introduced in Firefox 3.6 with simple C function call and\nonly simple types: int, char, string, ... But the next iteration of jsctypes\nthat is coming in Firefox 4 is going to allow full C binding, with support of C\nstructures and the ability to define a javascript function and give it to C\nlibrary as a function pointer.</p>\n<p>No more compilation, no more mozilla sdk download, nor XPCOM stuff, just\nplain javascript and only a tiny part of function and datatype declaration\nbefore doing a native binding!</p>\n<p>But let the code talk! Here is an example that display a tray icon on\nwindows. You can copy and paste this code in your Javascript Console in Firefox\n4 beta, just do not forget to change the icon path defined in the loadimage\nfunction call.</p>\n<pre>\n  /* simply load &quot;ctypes&quot; object */\n  Components.utils.import(&quot;resource://gre/modules/ctypes.jsm&quot;);\n  \n  /* Load libraries that we are going to use */\n  var libuser32 = ctypes.open(&quot;user32.dll&quot;);\n  var libshell32 = ctypes.open(&quot;shell32.dll&quot;);\n\n  /* Here is the tedious work of declaring functions arguments types and struct attributes types */\n  /* In fact it's quite easy, you just have to find which precise type are using your native functions/struct */\n  /* but it may be hard to known, for example in windows API, which precise type is behing their &quot;HANDLE&quot; type ... */\n  /* I recommend you to find and look at python ctype binding source code because they already had done this work */\n    \n  /*\n  HANDLE WINAPI LoadImage(\n    __in_opt  HINSTANCE hinst,\n    __in      LPCTSTR lpszName,\n    __in      UINT uType,\n    __in      int cxDesired,\n    __in      int cyDesired,\n    __in      UINT fuLoad\n  );\n  */\n  var loadimage = libuser32.declare(&quot;LoadImageA&quot;,\n    ctypes.stdcall_abi,\n    ctypes.int,\n    ctypes.int,\n    ctypes.char.ptr,\n    ctypes.int,\n    ctypes.int,\n    ctypes.int,\n    ctypes.int);\n  const LR_LOADFROMFILE = 16;\n  const IMAGE_ICON = 1;\n  \n  var notificationdata = ctypes.StructType(&quot;NOTIFICATIONDATA&quot;,\n                                [{ cbSize  : ctypes.int          },\n                                 { hWnd    : ctypes.int          },\n                                 { uID     : ctypes.int          },\n                                 { uFlags  : ctypes.int          },\n                                 { uCallbackMessage : ctypes.int },\n                                 { hIcon        : ctypes.int     },\n                                 { szTip        : ctypes.char.array(64) },\n                                 { dwState      : ctypes.int     },\n                                 { dwStateMask  : ctypes.int     },\n                                 { szInfo       : ctypes.char.array(256) },\n                                 { uTimeoutOrVersion : ctypes.int },\n                                 { szInfoTitle  : ctypes.char.array(64) },\n                                 { dwInfoFlags  : ctypes.int },\n                                 { guidItem     : ctypes.int },\n                                 { hBalloonIcon : ctypes.int }\n                                ]);\n  const NIF_ICON = 0x00000002;\n  \n  /*\n  BOOL Shell_NotifyIcon(\n    __in  DWORD dwMessage,\n    __in  PNOTIFYICONDATA lpdata\n  );\n  */\n  var notifyicon = libshell32.declare(&quot;Shell_NotifyIcon&quot;,\n                                    ctypes.stdcall_abi,\n                                    ctypes.bool,\n                                    ctypes.int,\n                                    notificationdata.ptr);\n  const NIM_ADD = 0x00000000;\n  \n\n  /* And now, the &quot;real&quot; code that is calling C functions */\n\n  /* load our ico file */\n  var hIcon = loadimage(0, &quot;c:\\default.ico&quot;, IMAGE_ICON, 16, 16, LR_LOADFROMFILE);\n  \n  /* create a C struct that is defining a notification in tray */\n  var icon = notificationdata();\n  icon.cbSize = notificationdata.size;\n  icon.uFlags = NIF_ICON;\n  icon.szTip = &quot;My Tray Icon&quot;;\n  icon.hIcon = hIcon;\n  \n  /* Display this notification! */\n  notifyicon(NIM_ADD, icon.address());\n\n</pre>\n<p>We will be able to go futher and define a function callback to handle click\nevents on the trayicon, but there is currently a bug which cause some crashes\nwhen using ctypes.FunctionType on windows. (ctypes.FunctionType allow to\ntransform a custom Javascript function to a C function pointer)<br />\nHere is related bugs, which are still in process:</p>\n<ul>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=573066\" hreflang=\"en\">Bug 573066 - Fix ctypes stdcall closure tests</a></li>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=585175\" hreflang=\"en\">Bug 585175 - Don't automangle ctypes stdcall symbols for WINAPI</a></li>\n</ul>\nThe first leads to crashes with FunctionType, and the second may lead to\nlib.declare with unfindable symbols errors when using ctypes.stdcall_abi.","","jsctypes round two jsctypes has been introduced firefox with simple function call and only simple types int char string but the next iteration jsctypes that coming firefox going allow full binding with support structures and the ability define javascript function and give library function pointer more compilation more mozilla sdk download nor xpcom stuff just plain javascript and only tiny part function and datatype declaration before doing native binding but let the code talk here example that display tray icon windows you can copy and paste this code your javascript console firefox beta just not forget change the icon path defined the loadimage function call simply load quot ctypes quot object components utils import quot resource gre modules ctypes jsm quot load libraries that are going use var libuser32 ctypes open quot user32 dll quot var libshell32 ctypes open quot shell32 dll quot here the tedious work declaring functions arguments types and struct attributes types fact quite easy you just have find which precise type are using your native functions struct but may hard known for example windows api which precise type behing their quot handle quot type recommend you find and look python ctype binding source code because they already had done this work handle winapi loadimage opt hinstance hinst lpctstr lpszname uint utype int cxdesired int cydesired uint fuload var loadimage libuser32 declare quot loadimagea quot ctypes stdcall abi ctypes int ctypes int ctypes char ptr ctypes int ctypes int ctypes int ctypes int const loadfromfile const image icon var notificationdata ctypes structtype quot notificationdata quot cbsize ctypes int hwnd ctypes int uid ctypes int uflags ctypes int ucallbackmessage ctypes int hicon ctypes int sztip ctypes char array dwstate ctypes int dwstatemask ctypes int szinfo ctypes char array 256 utimeoutorversion ctypes int szinfotitle ctypes char array dwinfoflags ctypes int guiditem ctypes int hballoonicon ctypes int const nif icon 0x00000002 bool shell notifyicon dword dwmessage pnotifyicondata lpdata var notifyicon libshell32 declare quot shell notifyicon quot ctypes stdcall abi ctypes bool ctypes int notificationdata ptr const nim add 0x00000000 and now the quot real quot code that calling functions load our ico file var hicon loadimage quot default ico quot image icon loadfromfile create struct that defining notification tray var icon notificationdata icon cbsize notificationdata size icon uflags nif icon icon sztip quot tray icon quot icon hicon hicon display this notification notifyicon nim add icon address will able futher and define function callback handle click events the trayicon but there currently bug which cause some crashes when using ctypes functiontype windows ctypes functiontype allow transform custom javascript function function pointer here related bugs which are still process bug 573066 fix ctypes stdcall closure tests bug 585175 don automangle ctypes stdcall symbols for winapi the first leads crashes with functiontype and the second may lead lib declare with unfindable symbols errors when using ctypes stdcall abi","a:0:{}","1","0","1","1","3","0","0"
"542079","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18841","2010-08-26 23:36:00","Europe/Paris","2010-08-26 23:04:20","2010-08-27 00:12:05","","post","xhtml","2010/08/27/jsctypes-win32api-jetpack-jetintray","en","jsctypes + win32api + jetpack = jetintray","","","<a href=\"https://wiki.mozilla.org/Jsctypes/api\">JSCtypes</a>! What a powerfull tool, that allows to call native libraries with our simple Javascript.<br />\r\n<a href=\"https://jetpack.mozillalabs.com/\">Jetpack</a>! What a powerfull tool, that allows to build reliably javascript applications, with unittests, memory profiling, web IDE, ... <br/>\r\nAnd <a href=\"http://en.wikipedia.org/wiki/Windows_API\">WinAPI</a> ... a giant C library still in production in 2010 that allows to do very various things on Windows platform. <br/>\r\n<br />\r\nMix all that and you get:\r\n<p align=\"center\"><a href=\"http://github.com/ochameau/jetintray\" style=\"font-size: 2em;\">JetInTray</a></p>\r\nA jetpack API for adding Tray icons on windows via jsctypes and on linux with a binary xpcom component (I didn't had time to work on a jsctypes version).<br/>\r\nYou may checkout this jetpack package directly from <a href=\"http://github.com/ochameau/jetintray\">github</a>.<br/>\r\nOr if you want to learn jsctypes I suggest you to look at files in <em>lib</em> directory and to read my two previous posts on jsctypes.\r\n<ul>\r\n<li>\r\nI explained on the <a href=\"http://blog.techno-barje.fr/post/2010/08/06/JSctypes-reboot\">first one</a> how to start playing with jsctypes, how to create C-structures and call functions.\r\n</li>\r\n<li>\r\nThen I showed in the <a href=\"http://blog.techno-barje.fr/post/2010/08/24/jsctypes-unleashed\">second post</a>, how to create a JS callback passed to the native library as a function pointer.\r\n</li>\r\n</ul>             \r\n<br/> <br/>\r\nThat said, I wanted to highlight some underground hacks around win32api! \r\nIn WinAPI, there is no addEventListener/setEventCallback/addActionListener/... \r\nIn fact, there is the well known <a href=\"http://www.toymaker.info/Games/html/wndproc.html\">WndProc messages function</a>, \r\nthat receives absolutely all event of the application!! (Yes for real!) \r\nWe define this function as a static function named <em>WndProc</em>. \r\nBut in Jsctypes case, that's impossible to define a static function, we can only create function pointers.\r\nThat's where comes <strong>the</strong> not so known hack which allow to register dynamically such event listener.\r\n<br/>\r\n<ul>\r\n<li>\r\nFirst we have to define our listener function following the <a href=\"http://msdn.microsoft.com/en-us/library/ms633573.aspx\">WinAPI datatypes</a>\r\n<pre>\r\nComponents.utils.import(\"resource://gre/modules/ctypes.jsm\");\r\nvar libs = {};\r\nlibs.user32 = ctypes.open(\"user32.dll\");\r\n\r\n// Define the function pointer type\r\nvar WindowProcType = \r\n  ctypes.FunctionType(ctypes.stdcall_abi, ctypes.int,\r\n    [ctypes.voidptr_t, ctypes.int32_t, ctypes.int32_t, ctypes.int32_t]).ptr;\r\n\r\n// Bind a usefull API function\r\nvar DefWindowProc = libs.user32.declare(\"DefWindowProcA\", ctypes.winapi_abi, ctypes.int,\r\n    ctypes.voidptr_t, ctypes.int32_t, ctypes.int32_t, ctypes.int32_t);\r\n\r\n// Set our javascript callback\r\nfunction windowProcJSCallback(hWnd, uMsg, wParam, lParam) {\r\n  \r\n  // ... do something smart with this event!\r\n  \r\n  // You HAVE TO call this api function when you don't known how to handle an event\r\n  // or your apply is going to crash or do nothing\r\n  return DefWindowProc(hWnd, uMsg, wParam, lParam);\r\n}\r\n\r\n// Retrieve a C function pointer for our Javascript callback\r\nvar WindowProcPointer = WindowProcType(windowProcJSCallback);\r\n</pre>\r\n</li>\r\n<li>\r\nThen we may fill a WNDCLASS structure with our fresh function pointer.\r\nThis structure is used to create a new <em>window class</em> that use it own WndProc (not the default static function).\r\nSee <a href=\"http://msdn.microsoft.com/en-us/library/ms633586%28VS.85%29.aspx\">msdn doc</a> for more information.\r\n<pre>\r\nvar WNDCLASS = \r\n  ctypes.StructType(\"WNDCLASS\",\r\n    [\r\n      { style  : ctypes.uint32_t },\r\n      { lpfnWndProc  : WindowProcType }, // here is our function pointer!\r\n      { cbClsExtra  : ctypes.int32_t },\r\n      { cbWndExtra  : ctypes.int32_t },\r\n      { hInstance  : ctypes.voidptr_t },\r\n      { hIcon  : ctypes.voidptr_t },\r\n      { hCursor  : ctypes.voidptr_t },\r\n      { hbrBackground  : ctypes.voidptr_t },\r\n      { lpszMenuName  : ctypes.char.ptr },\r\n      { lpszClassName  : ctypes.char.ptr }\r\n    ]);\r\nvar wndclass = WNDCLASS();\r\nwndclass.lpszClassName = ctypes.char.array()(\"class-custom-wndproc\");\r\nwndclass.lpfnWndProc = WindowProcType(windowProcCallback);   // <---- here it is!\r\nRegisterClass(wndclass.address());\r\n</pre>\r\n</li>\r\n<li>\r\nAfter that we may create a hidden window that is created only to catch events.\r\n<pre>\r\nvar CreateWindowEx = \r\n  libs.user32.declare( \"CreateWindowExA\", ctypes.winapi_abi, ctypes.voidptr_t,\r\n      ctypes.long,\r\n      ctypes.char.ptr,\r\n      ctypes.char.ptr,\r\n      ctypes.int,\r\n      ctypes.int,\r\n      ctypes.int,\r\n      ctypes.int,\r\n      ctypes.int,\r\n      ctypes.voidptr_t,\r\n      ctypes.voidptr_t,\r\n      ctypes.voidptr_t,\r\n      ctypes.voidptr_t\r\n    );\r\nvar HWND_MESSAGE = -3; // This is the code for message-only window\r\n                      // http://msdn.microsoft.com/en-us/library/ms632599%28VS.85%29.aspx#message_only\r\nvar win = CreateWindowEx(\r\n    0, wndclass.lpszClassName,\r\n    ctypes.char.array()(\"messages-only-window\"),\r\n    0, 0, 0, 0, 0,\r\n    ctypes.voidptr_t(HWND_MESSAGE), null, null, null);\r\n</pre>\r\n</li>\r\n<li>\r\nFinally, we only have to bind this window to any component which dispatch messages/events in order to receive them in our <em>windowProcJSCallback</em> callback. That's it!\r\n</li>\r\n</ul>","<a href=\"https://wiki.mozilla.org/Jsctypes/api\">JSCtypes</a>! What a powerfull\ntool, that allows to call native libraries with our simple Javascript.<br />\n<a href=\"https://jetpack.mozillalabs.com/\">Jetpack</a>! What a powerfull tool,\nthat allows to build reliably javascript applications, with unittests, memory\nprofiling, web IDE, ...<br />\nAnd <a href=\"http://en.wikipedia.org/wiki/Windows_API\">WinAPI</a> ... a giant C\nlibrary still in production in 2010 that allows to do very various things on\nWindows platform.<br />\n<br />\nMix all that and you get:\n<p style=\"text-align: center\"><a href=\"http://github.com/ochameau/jetintray\" style=\"font-size: 2em;\">JetInTray</a></p>\nA jetpack API for adding Tray icons on windows via jsctypes and on linux with a\nbinary xpcom component (I didn't had time to work on a jsctypes version).<br />\nYou may checkout this jetpack package directly from <a href=\"http://github.com/ochameau/jetintray\">github</a>.<br />\nOr if you want to learn jsctypes I suggest you to look at files in <em>lib</em>\ndirectory and to read my two previous posts on jsctypes.\n<ul>\n<li>I explained on the <a href=\"http://blog.techno-barje.fr/post/2010/08/06/JSctypes-reboot\">first one</a> how\nto start playing with jsctypes, how to create C-structures and call\nfunctions.</li>\n<li>Then I showed in the <a href=\"http://blog.techno-barje.fr/post/2010/08/24/jsctypes-unleashed\">second\npost</a>, how to create a JS callback passed to the native library as a\nfunction pointer.</li>\n</ul>\n<br />\n<br />\nThat said, I wanted to highlight some underground hacks around win32api! In\nWinAPI, there is no addEventListener/setEventCallback/addActionListener/... In\nfact, there is the well known <a href=\"http://www.toymaker.info/Games/html/wndproc.html\">WndProc messages\nfunction</a>, that receives absolutely all event of the application!! (Yes for\nreal!) We define this function as a static function named <em>WndProc</em>. But\nin Jsctypes case, that's impossible to define a static function, we can only\ncreate function pointers. That's where comes <strong>the</strong> not so known\nhack which allow to register dynamically such event listener.<br />\n<ul>\n<li>First we have to define our listener function following the <a href=\"http://msdn.microsoft.com/en-us/library/ms633573.aspx\">WinAPI datatypes</a>\n<pre>\nComponents.utils.import(&quot;resource://gre/modules/ctypes.jsm&quot;);\nvar libs = {};\nlibs.user32 = ctypes.open(&quot;user32.dll&quot;);\n\n// Define the function pointer type\nvar WindowProcType = \n  ctypes.FunctionType(ctypes.stdcall_abi, ctypes.int,\n    [ctypes.voidptr_t, ctypes.int32_t, ctypes.int32_t, ctypes.int32_t]).ptr;\n\n// Bind a usefull API function\nvar DefWindowProc = libs.user32.declare(&quot;DefWindowProcA&quot;, ctypes.winapi_abi, ctypes.int,\n    ctypes.voidptr_t, ctypes.int32_t, ctypes.int32_t, ctypes.int32_t);\n\n// Set our javascript callback\nfunction windowProcJSCallback(hWnd, uMsg, wParam, lParam) {\n  \n  // ... do something smart with this event!\n  \n  // You HAVE TO call this api function when you don't known how to handle an event\n  // or your apply is going to crash or do nothing\n  return DefWindowProc(hWnd, uMsg, wParam, lParam);\n}\n\n// Retrieve a C function pointer for our Javascript callback\nvar WindowProcPointer = WindowProcType(windowProcJSCallback);\n</pre></li>\n<li>Then we may fill a WNDCLASS structure with our fresh function pointer. This\nstructure is used to create a new <em>window class</em> that use it own WndProc\n(not the default static function). See <a href=\"http://msdn.microsoft.com/en-us/library/ms633586%28VS.85%29.aspx\">msdn doc</a>\nfor more information.\n<pre>\nvar WNDCLASS = \n  ctypes.StructType(&quot;WNDCLASS&quot;,\n    [\n      { style  : ctypes.uint32_t },\n      { lpfnWndProc  : WindowProcType }, // here is our function pointer!\n      { cbClsExtra  : ctypes.int32_t },\n      { cbWndExtra  : ctypes.int32_t },\n      { hInstance  : ctypes.voidptr_t },\n      { hIcon  : ctypes.voidptr_t },\n      { hCursor  : ctypes.voidptr_t },\n      { hbrBackground  : ctypes.voidptr_t },\n      { lpszMenuName  : ctypes.char.ptr },\n      { lpszClassName  : ctypes.char.ptr }\n    ]);\nvar wndclass = WNDCLASS();\nwndclass.lpszClassName = ctypes.char.array()(&quot;class-custom-wndproc&quot;);\nwndclass.lpfnWndProc = WindowProcType(windowProcCallback);   // &lt;---- here it is!\nRegisterClass(wndclass.address());\n</pre></li>\n<li>After that we may create a hidden window that is created only to catch\nevents.\n<pre>\nvar CreateWindowEx = \n  libs.user32.declare( &quot;CreateWindowExA&quot;, ctypes.winapi_abi, ctypes.voidptr_t,\n      ctypes.long,\n      ctypes.char.ptr,\n      ctypes.char.ptr,\n      ctypes.int,\n      ctypes.int,\n      ctypes.int,\n      ctypes.int,\n      ctypes.int,\n      ctypes.voidptr_t,\n      ctypes.voidptr_t,\n      ctypes.voidptr_t,\n      ctypes.voidptr_t\n    );\nvar HWND_MESSAGE = -3; // This is the code for message-only window\n                      // http://msdn.microsoft.com/en-us/library/ms632599%28VS.85%29.aspx#message_only\nvar win = CreateWindowEx(\n    0, wndclass.lpszClassName,\n    ctypes.char.array()(&quot;messages-only-window&quot;),\n    0, 0, 0, 0, 0,\n    ctypes.voidptr_t(HWND_MESSAGE), null, null, null);\n</pre></li>\n<li>Finally, we only have to bind this window to any component which dispatch\nmessages/events in order to receive them in our <em>windowProcJSCallback</em>\ncallback. That's it!</li>\n</ul>","","jsctypes win32api jetpack jetintray jsctypes what powerfull tool that allows call native libraries with our simple javascript jetpack what powerfull tool that allows build reliably javascript applications with unittests memory profiling web ide and winapi giant library still production 2010 that allows very various things windows platform mix all that and you get jetintray jetpack api for adding tray icons windows via jsctypes and linux with binary xpcom component didn had time work jsctypes version you may checkout this jetpack package directly from github you want learn jsctypes suggest you look files lib directory and read two previous posts jsctypes explained the first one how start playing with jsctypes how create structures and call functions then showed the second post how create callback passed the native library function pointer that said wanted highlight some underground hacks around win32api winapi there addeventlistener seteventcallback addactionlistener fact there the well known wndproc messages function that receives absolutely all event the application yes for real define this function static function named wndproc but jsctypes case that impossible define static function can only create function pointers that where comes the not known hack which allow register dynamically such event listener first have define our listener function following the winapi datatypes components utils import quot resource gre modules ctypes jsm quot var libs libs user32 ctypes open quot user32 dll quot define the function pointer type var windowproctype ctypes functiontype ctypes stdcall abi ctypes int ctypes voidptr ctypes int32 ctypes int32 ctypes int32 ptr bind usefull api function var defwindowproc libs user32 declare quot defwindowproca quot ctypes winapi abi ctypes int ctypes voidptr ctypes int32 ctypes int32 ctypes int32 set our javascript callback function windowprocjscallback hwnd umsg wparam lparam something smart with this event you have call this api function when you don known how handle event your apply going crash nothing return defwindowproc hwnd umsg wparam lparam retrieve function pointer for our javascript callback var windowprocpointer windowproctype windowprocjscallback then may fill wndclass structure with our fresh function pointer this structure used create new window class that use own wndproc not the default static function see msdn doc for more information var wndclass ctypes structtype quot wndclass quot style ctypes uint32 lpfnwndproc windowproctype here our function pointer cbclsextra ctypes int32 cbwndextra ctypes int32 hinstance ctypes voidptr hicon ctypes voidptr hcursor ctypes voidptr hbrbackground ctypes voidptr lpszmenuname ctypes char ptr lpszclassname ctypes char ptr var wndclass wndclass wndclass lpszclassname ctypes char array quot class custom wndproc quot wndclass lpfnwndproc windowproctype windowproccallback here registerclass wndclass address after that may create hidden window that created only catch events var createwindowex libs user32 declare quot createwindowexa quot ctypes winapi abi ctypes voidptr ctypes long ctypes char ptr ctypes char ptr ctypes int ctypes int ctypes int ctypes int ctypes int ctypes voidptr ctypes voidptr ctypes voidptr ctypes voidptr var hwnd message this the code for message only window http msdn microsoft com library ms632599 28vs aspx message only var win createwindowex wndclass lpszclassname ctypes char array quot messages only window quot ctypes voidptr hwnd message null null null finally only have bind this window any component which dispatch messages events order receive them our windowprocjscallback callback that","a:1:{s:3:\"tag\";a:3:{i:0;s:7:\"wndproc\";i:1;s:6:\"winapi\";i:2;s:8:\"jsctypes\";}}","1","0","1","1","4","0","0"
"541498","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18841","2010-08-24 23:24:00","Europe/Paris","2010-08-24 15:53:21","2010-08-24 21:44:52","","post","xhtml","2010/08/24/jsctypes-unleashed","en","jsctypes unleashed","","","As bugs <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=573066\" hreflang=\"en\">573066</a> and <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=585175\" hreflang=\"en\">585175</a> are fixed and available in last Firefox <a href=\"http://nightly.mozilla.org/\" hreflang=\"en\">nightlies</a>, we can now use JSCtypes at full power!\r\n<br/>\r\n<p align=\"right\"><em>Thanks to <a href=\"http://blog.mozilla.com/dwitte/\" hreflang=\"en\">dwitte</a> for quick fixes!</em></p>\r\nThat means :\r\n<ul>\r\n<li> Complex C-struct usage,</li>\r\n<li> The possibility to define a JS callback seen by C library as a function pointer, and,</li>\r\n<li> Full Win32 API (also called MFC) supports!</li>\r\n</ul>\r\nLets see how to practice all that on our previous example: TrayIcon via Win32api.\r\nWe were able to <em>just</em> display an icon in the <a href=\"/post/2010/08/06/JSctypes-reboot\">previous blogpost</a>.\r\nNow we are able to intercept events from win32api thanks to ctypes.FunctionType.\r\nFirst we define a plain old javascript function like this one:\r\n<pre>\r\nfunction windowProcCallback(hWnd, uMsg, wParam, lParam) {\r\n  if (lParam == WM_LBUTTONDOWN) {\r\n    Components.utils.reportError(\"Left click!\");\r\n    /* 0 means that we handle this event */\r\n    return 0; \r\n  }\r\n  else if (lParam == WM_RBUTTONDOWN) {\r\n    Components.utils.reportError(\"Right click!\");\r\n    return 0;\r\n  }\r\n  /* Mandatory use default win32 procedure! */\r\n  return DefWindowProc(hWnd, uMsg, wParam, lParam);\r\n};\r\n</pre>\r\nThis <em>windowProcCallback</em> is a javascript implementation for a WNDPROC callback as <a href=\"http://msdn.microsoft.com/en-us/library/ms633573%28VS.85%29.aspx\" hreflang=\"en\">defined in MSDN</a>.\r\nWNDPROC is a key part of Win32Api. These functions receive all kind of events.\r\nThey are similar to differents listeners existing in Javascript/web world,\r\nbut here in win32api, we often have only one super big listener which receive all events :/\r\n<br />\r\nNext, we have to define this WNDPROC data type with jsctypes, like this:\r\n<pre>\r\nvar WindowProcType =\r\n  ctypes.FunctionType(ctypes.stdcall_abi, ctypes.int,\r\n    [ctypes.voidptr_t, ctypes.int32_t, ctypes.int32_t, ctypes.int32_t]).ptr;\r\n</pre>\r\nWe simply describe a function pointer type, for a function which return an int and accept 4 arguments: hWnd as pointer, uMsg as int, wParam as int and lParam as int.\r\n\r\nThen, in our case, we give this function pointer via a structure.\r\nSo we may first describe this C-structure, and simply use our previous data type as type of a structure attribute:\r\n<pre>\r\nvar WNDCLASS =\r\n  ctypes.StructType(\"WNDCLASS\",\r\n    [\r\n      { style : ctypes.uint32_t },\r\n      { lpfnWndProc : WindowProcType}, // <-- Here is the function pointer attribute\r\n      { cbClsExtra : ctypes.int32_t },\r\n      { cbWndExtra : ctypes.int32_t },\r\n      { hInstance : ctypes.voidptr_t },\r\n      { hIcon : ctypes.voidptr_t },\r\n      { hCursor : ctypes.voidptr_t },\r\n      { hbrBackground : ctypes.voidptr_t },\r\n      { lpszMenuName : ctypes.char.ptr },\r\n      { lpszClassName : ctypes.char.ptr }\r\n    ]);\r\n</pre>\r\n\r\nAnd finally, we convert our Javascript function to a C-Function pointer by using the datatype as a function and giving our callback as an argument.\r\n<pre>\r\nvar wndclass = WNDCLASS();\r\nwndclass.lpszClassName = ctypes.char.array()(\"class-trayicon\");\r\nwndclass.lpfnWndProc = WindowProcType(windowProcCallback);   // <---- here it is!\r\nRegisterClass(wndclass.address());\r\n</pre>\r\nAll this hard work to be able to detect clicks on our tray icon!\r\n\r\nI've built a full example file <a href=\"/public/demo/jsctypes/example-jsctypes-full-power.txt\">right here</a> (with a lot of comments). \r\nAnd here is one hack that allow you to test it remotly in your Javascript Console.\r\nYou just have to copy an icon in c:\default.ico. Here is a sample <a href=\"/public/demo/jsctypes/default.ico\">ico file</a>.\r\n\r\n<pre>\r\n  var x=new XMLHttpRequest(); x.open(\"GET\",\"http://blog.techno-barje.fr/public/demo/jsctypes/example-jsctypes-full-power.txt\",false); x.send(null); window.parent.eval(x.responseText);\r\n</pre>\r\n\r\nOr if you want to play with this script locally, here is another magic code:\r\n<pre>\r\n  var x=new XMLHttpRequest(); x.open(\"GET\",\"file://C:/Users/YourUsername/Downloads/example-jsctypes-full-power.txt\",false); x.send(null); window.parent.eval(x.responseText);\r\n</pre>","As bugs <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=573066\" hreflang=\"en\">573066</a> and <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=585175\" hreflang=\"en\">585175</a>\nare fixed and available in last Firefox <a href=\"http://nightly.mozilla.org/\" hreflang=\"en\">nightlies</a>, we can now use JSCtypes at full power!<br />\n<p style=\"text-align: right\"><em>Thanks to <a href=\"http://blog.mozilla.com/dwitte/\" hreflang=\"en\">dwitte</a> for quick\nfixes!</em></p>\nThat means :\n<ul>\n<li>Complex C-struct usage,</li>\n<li>The possibility to define a JS callback seen by C library as a function\npointer, and,</li>\n<li>Full Win32 API (also called MFC) supports!</li>\n</ul>\nLets see how to practice all that on our previous example: TrayIcon via\nWin32api. We were able to <em>just</em> display an icon in the <a href=\"/post/2010/08/06/JSctypes-reboot\">previous blogpost</a>. Now we are able to\nintercept events from win32api thanks to ctypes.FunctionType. First we define a\nplain old javascript function like this one:\n<pre>\nfunction windowProcCallback(hWnd, uMsg, wParam, lParam) {\n  if (lParam == WM_LBUTTONDOWN) {\n    Components.utils.reportError(&quot;Left click!&quot;);\n    /* 0 means that we handle this event */\n    return 0; \n  }\n  else if (lParam == WM_RBUTTONDOWN) {\n    Components.utils.reportError(&quot;Right click!&quot;);\n    return 0;\n  }\n  /* Mandatory use default win32 procedure! */\n  return DefWindowProc(hWnd, uMsg, wParam, lParam);\n};\n</pre>\nThis <em>windowProcCallback</em> is a javascript implementation for a WNDPROC\ncallback as <a href=\"http://msdn.microsoft.com/en-us/library/ms633573%28VS.85%29.aspx\" hreflang=\"en\">defined in MSDN</a>. WNDPROC is a key part of Win32Api. These functions\nreceive all kind of events. They are similar to differents listeners existing\nin Javascript/web world, but here in win32api, we often have only one super big\nlistener which receive all events :/<br />\nNext, we have to define this WNDPROC data type with jsctypes, like this:\n<pre>\nvar WindowProcType =\n  ctypes.FunctionType(ctypes.stdcall_abi, ctypes.int,\n    [ctypes.voidptr_t, ctypes.int32_t, ctypes.int32_t, ctypes.int32_t]).ptr;\n</pre>\nWe simply describe a function pointer type, for a function which return an int\nand accept 4 arguments: hWnd as pointer, uMsg as int, wParam as int and lParam\nas int. Then, in our case, we give this function pointer via a structure. So we\nmay first describe this C-structure, and simply use our previous data type as\ntype of a structure attribute:\n<pre>\nvar WNDCLASS =\n  ctypes.StructType(&quot;WNDCLASS&quot;,\n    [\n      { style : ctypes.uint32_t },\n      { lpfnWndProc : WindowProcType}, // &lt;-- Here is the function pointer attribute\n      { cbClsExtra : ctypes.int32_t },\n      { cbWndExtra : ctypes.int32_t },\n      { hInstance : ctypes.voidptr_t },\n      { hIcon : ctypes.voidptr_t },\n      { hCursor : ctypes.voidptr_t },\n      { hbrBackground : ctypes.voidptr_t },\n      { lpszMenuName : ctypes.char.ptr },\n      { lpszClassName : ctypes.char.ptr }\n    ]);\n</pre>\nAnd finally, we convert our Javascript function to a C-Function pointer by\nusing the datatype as a function and giving our callback as an argument.\n<pre>\nvar wndclass = WNDCLASS();\nwndclass.lpszClassName = ctypes.char.array()(&quot;class-trayicon&quot;);\nwndclass.lpfnWndProc = WindowProcType(windowProcCallback);   // &lt;---- here it is!\nRegisterClass(wndclass.address());\n</pre>\nAll this hard work to be able to detect clicks on our tray icon! I've built a\nfull example file <a href=\"/public/demo/jsctypes/example-jsctypes-full-power.txt\">right here</a> (with a\nlot of comments). And here is one hack that allow you to test it remotly in\nyour Javascript Console. You just have to copy an icon in c:\default.ico. Here\nis a sample <a href=\"/public/demo/jsctypes/default.ico\">ico file</a>.\n<pre>\n  var x=new XMLHttpRequest(); x.open(&quot;GET&quot;,&quot;http://blog.techno-barje.fr/public/demo/jsctypes/example-jsctypes-full-power.txt&quot;,false); x.send(null); window.parent.eval(x.responseText);\n</pre>\nOr if you want to play with this script locally, here is another magic code:\n<pre>\n  var x=new XMLHttpRequest(); x.open(&quot;GET&quot;,&quot;file://C:/Users/YourUsername/Downloads/example-jsctypes-full-power.txt&quot;,false); x.send(null); window.parent.eval(x.responseText);\n</pre>","","jsctypes unleashed bugs 573066 and 585175 are fixed and available last firefox nightlies can now use jsctypes full power thanks dwitte for quick fixes that means complex struct usage the possibility define callback seen library function pointer and full win32 api also called mfc supports lets see how practice all that our previous example trayicon via win32api were able just display icon the previous blogpost now are able intercept events from win32api thanks ctypes functiontype first define plain old javascript function like this one function windowproccallback hwnd umsg wparam lparam lparam lbuttondown components utils reporterror quot left click quot means that handle this event return else lparam rbuttondown components utils reporterror quot right click quot return mandatory use default win32 procedure return defwindowproc hwnd umsg wparam lparam this windowproccallback javascript implementation for wndproc callback defined msdn wndproc key part win32api these functions receive all kind events they are similar differents listeners existing javascript web world but here win32api often have only one super big listener which receive all events next have define this wndproc data type with jsctypes like this var windowproctype ctypes functiontype ctypes stdcall abi ctypes int ctypes voidptr ctypes int32 ctypes int32 ctypes int32 ptr simply describe function pointer type for function which return int and accept arguments hwnd pointer umsg int wparam int and lparam int then our case give this function pointer via structure may first describe this structure and simply use our previous data type type structure attribute var wndclass ctypes structtype quot wndclass quot style ctypes uint32 lpfnwndproc windowproctype here the function pointer attribute cbclsextra ctypes int32 cbwndextra ctypes int32 hinstance ctypes voidptr hicon ctypes voidptr hcursor ctypes voidptr hbrbackground ctypes voidptr lpszmenuname ctypes char ptr lpszclassname ctypes char ptr and finally convert our javascript function function pointer using the datatype function and giving our callback argument var wndclass wndclass wndclass lpszclassname ctypes char array quot class trayicon quot wndclass lpfnwndproc windowproctype windowproccallback here registerclass wndclass address all this hard work able detect clicks our tray icon built full example file right here with lot comments and here one hack that allow you test remotly your javascript console you just have copy icon default ico here sample ico file var new xmlhttprequest open quot get quot quot http blog techno barje public demo jsctypes example jsctypes full power txt quot false send null window parent eval responsetext you want play with this script locally here another magic code var new xmlhttprequest open quot get quot quot file users yourusername downloads example jsctypes full power txt quot false send null window parent eval responsetext","a:1:{s:3:\"tag\";a:2:{i:0;s:8:\"win32api\";i:1;s:8:\"jsctypes\";}}","1","0","1","1","5","0","0"
"559311","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","45328","2010-11-04 16:21:00","Europe/Paris","2010-11-04 15:21:46","2010-11-04 16:01:24","","post","xhtml","2010/11/04/Google-maps-hacks-part1-auto-suggest-location-in","fr","Google maps hacks part1 - auto-suggest location in <input>","","","As I'm hacking around Google Maps API, \r\nI tried to write some libraries around it in order to ease futher developments around this very cool API!\r\n\r\nThe first library brings auto-suggest in html inputs, so users can see a dynamic list of cities name when they start typing in a form :)\r\n<br/><br/>\r\nHere is the source code of it, licenced under LGPL:<br />\r\n<a href=\"https://github.com/ochameau/google-map-api-suggest\">https://github.com/ochameau/google-map-api-suggest</a>\r\n<br/>\r\nAnd what users may expect:\r\n<img src=\"/public/gmaps/gmapi-suggest-sc1.png\" alt=\"gmapi-suggest-sc1.png\" style=\"margin: 0 auto; display: block;\" title=\"gmapi-suggest-sc1.png, nov. 2010\" />\r\n<img src=\"/public/gmaps/gmapi-suggest-sc2.png\" alt=\"gmapi-suggest-sc2.png\" style=\"margin: 0 auto; display: block;\" title=\"gmapi-suggest-sc2.png, nov. 2010\" />","As I'm hacking around Google Maps API, I tried to write some libraries around\nit in order to ease futher developments around this very cool API! The first\nlibrary brings auto-suggest in html inputs, so users can see a dynamic list of\ncities name when they start typing in a form :)<br />\n<br />\nHere is the source code of it, licenced under LGPL:<br />\n<a href=\"https://github.com/ochameau/google-map-api-suggest\">https://github.com/ochameau/google-map-api-suggest</a><br />\n\nAnd what users may expect: <img src=\"/public/gmaps/gmapi-suggest-sc1.png\" alt=\"gmapi-suggest-sc1.png\" style=\"margin: 0 auto; display: block;\" title=\"gmapi-suggest-sc1.png, nov. 2010\" /> <img src=\"/public/gmaps/gmapi-suggest-sc2.png\" alt=\"gmapi-suggest-sc2.png\" style=\"margin: 0 auto; display: block;\" title=\"gmapi-suggest-sc2.png, nov. 2010\" />","","google maps hacks part1 auto suggest location hacking around google maps api tried write some libraries around order ease futher developments around this very cool api the first library brings auto suggest html inputs users can see dynamic list cities name when they start typing form here the source code licenced under lgpl https github com ochameau google map api suggest and what users may expect","a:1:{s:3:\"tag\";a:2:{i:0;s:15:\"google maps api\";i:1;s:12:\"auto-suggest\";}}","1","0","1","1","4","0","0"
"461701","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18841","2009-11-23 13:16:00","Europe/Paris","2009-11-22 22:37:47","2009-11-23 12:19:43","","post","xhtml","2009/11/23/Firefox-Everywhere","fr","Firefox Everywhere","","","After <a href=\"/post/2009/11/06/Yoono-Desktop-Portable\">Yoono Desktop Portable</a>, here is Firefox Everywhere : a customized Firefox package which can be executed on any OS : Windows, Linux, MacOS and with a shared profile directory allowing you to travel with all your Firefox data on a usb stick!\r\n<p style=\"text-align: center\">\r\nCheck out this surf session starting on Windows,\r\n<img src=\"/public/firefox-portable/.firefox-portable-win_m.jpg\" alt=\"firefox-portable-win.png\" style=\"margin: 0 auto; display: block; border: 1px solid black;\" title=\"firefox-portable-win.png, nov. 2009\" />\r\nThen on Linux,\r\n<img src=\"/public/firefox-portable/.firefox-portable-linux_m.jpg\" alt=\"firefox-portable-linux.png\" style=\"margin: 0 auto; display: block; border: 1px solid black;\" title=\"firefox-portable-linux.png, nov. 2009\" />\r\nAnd finally on a Mac!\r\n<img src=\"/public/firefox-portable/.firefox-portable-mac_m.jpg\" alt=\"firefox-portable-mac.png\" style=\"margin: 0 auto; display: block; border: 1px solid black\" title=\"firefox-portable-mac.png, nov. 2009\" />\r\n</p>\r\n<p style=\"text-align: center;font-size: 1.2em;\">FirefoxEverywhere</a></p>\r\n<strong>Download:</strong>\r\n<ul>\r\n<li>The <a href=\"http://bit.ly/firefox-portable-all\">Full edition</a> (69MB) which works with all OS</li>\r\n<li>or the <a href=\"http://bit.ly/firefox-portable-win\">Windows only version</a> (13MB)</li>\r\n<li>or the <a href=\"http://bit.ly/firefox-portable-mac\">MacOs only version</a> (26MB)</li>\r\n</ul>\r\n<strong>Tips:</strong>\r\n<ul>\r\n<li><ins>Don't forget to properly disconnect your usb stick, or your profile may explode!</ins></li>\r\n<li>This version is based on Firefox 3.6 branch in order to gain startup performance improvements of this incoming version! So don't be afraid to have a browser named Namoroka instead of Firefox.</li>\r\n<li>On Windows, execute: launch-windows.exe</li>\r\n<li>On MacOS, launch-macos.command</li>\r\n<li>On Linux, either launch-linux-64.sh or launch-linux.sh(for 32bits)</li>\r\n</ul>","After <a href=\"/post/2009/11/06/Yoono-Desktop-Portable\">Yoono Desktop\nPortable</a>, here is Firefox Everywhere : a customized Firefox package which\ncan be executed on any OS : Windows, Linux, MacOS and with a shared profile\ndirectory allowing you to travel with all your Firefox data on a usb stick!\n<p style=\"text-align: center\">Check out this surf session starting on Windows,\n<img src=\"/public/firefox-portable/.firefox-portable-win_m.jpg\" alt=\"firefox-portable-win.png\" style=\"margin: 0 auto; display: block; border: 1px solid black;\" title=\"firefox-portable-win.png, nov. 2009\" /> Then on Linux, <img src=\"/public/firefox-portable/.firefox-portable-linux_m.jpg\" alt=\"firefox-portable-linux.png\" style=\"margin: 0 auto; display: block; border: 1px solid black;\" title=\"firefox-portable-linux.png, nov. 2009\" /> And finally on a Mac! <img src=\"/public/firefox-portable/.firefox-portable-mac_m.jpg\" alt=\"firefox-portable-mac.png\" style=\"margin: 0 auto; display: block; border: 1px solid black\" title=\"firefox-portable-mac.png, nov. 2009\" /></p>\n<p style=\"text-align: center;font-size: 1.2em;\">FirefoxEverywhere</p>\n<strong>Download:</strong>\n<ul>\n<li>The <a href=\"http://bit.ly/firefox-portable-all\">Full edition</a> (69MB)\nwhich works with all OS</li>\n<li>or the <a href=\"http://bit.ly/firefox-portable-win\">Windows only\nversion</a> (13MB)</li>\n<li>or the <a href=\"http://bit.ly/firefox-portable-mac\">MacOs only version</a>\n(26MB)</li>\n</ul>\n<strong>Tips:</strong>\n<ul>\n<li><ins>Don't forget to properly disconnect your usb stick, or your profile\nmay explode!</ins></li>\n<li>This version is based on Firefox 3.6 branch in order to gain startup\nperformance improvements of this incoming version! So don't be afraid to have a\nbrowser named Namoroka instead of Firefox.</li>\n<li>On Windows, execute: launch-windows.exe</li>\n<li>On MacOS, launch-macos.command</li>\n<li>On Linux, either launch-linux-64.sh or launch-linux.sh(for 32bits)</li>\n</ul>","","firefox everywhere after yoono desktop portable here firefox everywhere customized firefox package which can executed any windows linux macos and with shared profile directory allowing you travel with all your firefox data usb stick check out this surf session starting windows then linux and finally mac firefoxeverywhere download the full edition 69mb which works with all the windows only version 13mb the macos only version 26mb tips don forget properly disconnect your usb stick your profile may explode this version based firefox branch order gain startup performance improvements this incoming version don afraid have browser named namoroka instead firefox windows execute launch windows exe macos launch macos command linux either launch linux launch linux for 32bits","a:1:{s:3:\"tag\";a:3:{i:0;s:7:\"usb key\";i:1;s:8:\"portable\";i:2;s:7:\"firefox\";}}","1","0","1","1","1","0","0"
"456513","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18841","2009-11-03 23:02:00","Europe/Paris","2009-10-30 23:27:56","2009-11-03 22:04:27","","post","xhtml","2009/11/03/sabnzbFox","fr","SabnzbFox","","","Now, a real world usage of my <a href=\"/post/2009/10/30/Catch-all-requests-to-a-specific-mime-type/file-extension-in-Firefox\">previous JS Module</a>.<br/><br />\r\n<p style=\"text-align:center\"><a href=\"https://addons.mozilla.org/en-US/firefox/addon/46873\" style=\"font-size: 2em;\">SabnzbdFox</a></p>\r\n<br />\r\n<strong>SabnzbdFox features </strong>\r\n<ul>\r\n <li>Catch absolutely all NZB file requests</li>\r\n <li>Automatically save all these files to a specific directory (not limited to sabnzbd usage!)</li>\r\n <li>Or Automatically upload to sabnzbd server via its <a href=\"http://sabnzbd.wikidot.com/automation-support\">web-API</a></li>\r\n<li>Display current downloads count</li>\r\n</ul>\r\n<strong>SabnzbdFox prerequisites </strong>\r\n<ul>\r\n <li>Firefox</li>\r\n <li><a href=\"http://www.sabnzbd.org/\">Sabnzbd</a> or any newsreader which automatically read nzb files in a directory.</li>\r\n</ul>\r\n<p style=\"text-align: center\">\r\ninstall <a href=\"https://addons.mozilla.org/en-US/firefox/addon/46873\">SabnzbdFox on addons.mozilla.org</a>\r\n</p>\r\n\r\n<img src=\"/public/sabnzbd-screenshot.png\" alt=\"sabnzbdfox\" style=\"margin: 0 auto; display: block; border: 2px solid black; margin-bottom: 5px;\" title=\"sabnzbdfox\" />","Now, a real world usage of my <a href=\"/post/2009/10/30/Catch-all-requests-to-a-specific-mime-type/file-extension-in-Firefox\">\nprevious JS Module</a>.<br />\n<br />\n<p style=\"text-align:center\"><a href=\"https://addons.mozilla.org/en-US/firefox/addon/46873\" style=\"font-size: 2em;\">SabnzbdFox</a></p>\n<br />\n<strong>SabnzbdFox features</strong>\n<ul>\n<li>Catch absolutely all NZB file requests</li>\n<li>Automatically save all these files to a specific directory (not limited to\nsabnzbd usage!)</li>\n<li>Or Automatically upload to sabnzbd server via its <a href=\"http://sabnzbd.wikidot.com/automation-support\">web-API</a></li>\n<li>Display current downloads count</li>\n</ul>\n<strong>SabnzbdFox prerequisites</strong>\n<ul>\n<li>Firefox</li>\n<li><a href=\"http://www.sabnzbd.org/\">Sabnzbd</a> or any newsreader which\nautomatically read nzb files in a directory.</li>\n</ul>\n<p style=\"text-align: center\">install <a href=\"https://addons.mozilla.org/en-US/firefox/addon/46873\">SabnzbdFox on\naddons.mozilla.org</a></p>\n<img src=\"/public/sabnzbd-screenshot.png\" alt=\"sabnzbdfox\" style=\"margin: 0 auto; display: block; border: 2px solid black; margin-bottom: 5px;\" title=\"sabnzbdfox\" />","","sabnzbfox now real world usage previous module sabnzbdfox sabnzbdfox features catch absolutely all nzb file requests automatically save all these files specific directory not limited sabnzbd usage automatically upload sabnzbd server via its web api display current downloads count sabnzbdfox prerequisites firefox sabnzbd any newsreader which automatically read nzb files directory install sabnzbdfox addons mozilla org","a:1:{s:3:\"tag\";a:3:{i:0;s:7:\"sabnzbd\";i:1;s:3:\"nzb\";i:2;s:7:\"firefox\";}}","1","0","1","1","12","0","0"
"252667","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18842","2008-06-22 17:00:00","Europe/Paris","2008-06-20 16:11:47","2008-11-09 17:55:52","","post","wiki","2008/06/20/ocaml-callgraph","fr","ocaml callgraph","","","[KCacheGrind|http://kcachegrind.sourceforge.net/|en] : un outil simple mais diablement efficace pour analyser les callgraph de programmes en C (ou python, php, perl, ...) afin de faire du débogage ou encore de l'analyse de performance.\r\n\r\n!!! Situation actuelle avec un programme caml simple \r\n__Exemple utilisé :__\r\n///\r\nlet bar i =\r\n        1+i\r\n;;\r\n\r\nlet foo i  =\r\n        2+(bar i )\r\n;;\r\n\r\nlet () = \r\n        print_int ( foo 3 )\r\n;;\r\n///\r\n* D'abord nous compilons en désactivant les optimisations qui pourraient éliminer ces fonctions triviales\r\n $ ocamlopt -inline 0 -o foo t.ml\r\n* Puis nous exécutons ce test via [valgrind|http://valgrind.org/|en] qui génère un fichier au format \"callgrind\", contenant l'ordre d'appel des fonctions ainsi que les estimations du temps passé dans chacune d'entre elles :\r\n $ valgrind --tool=callgrind ./foo\r\n* Enfin, on regarde le résultat sous kcachegrind\r\n $ kcachegrind callgrind.out.10624\r\n\r\n((/public/t-caml-without-patch-callgr.png|t-caml-without-patch-callgr.png|C))\r\n\r\nMais voilà, l'assembleur généré par le compilateur caml ne contient pas toutes les instructions utilisées par valgrind lors de l'analyse du programme. Ainsi, aucun label de fonction n'apparait et nous n'avons le droit qu'à des adresses mémoire en hexadécimal :(\r\n\r\n__/!\ Problème corrigé pour la version 3.11 : [détails|http://caml.inria.fr/mantis/bug_view_page.php?bug_id=4642|en]__\r\n\r\n!!! Exemple du fonctionnement normal en C\r\nVoyons comment valgrind fonctionne avec du C :\r\n///\r\nint bar(int a) {\r\n        return 1+a;\r\n}\r\n\r\nint foo(int a) {\r\n        return 2+bar(a);\r\n}\r\n\r\nint main() {\r\n        foo(3);\r\n}\r\n///\r\n $ gcc -O0 -o foo t.c\r\n $ valgrind --tool=callgrind ./foo\r\n $ kcachegrind callgrind.out.10719\r\n\r\n((/public/t-c-callgraph.png|t-c-callgraph.png|C))\r\n\r\nCette fois-ci, nous obtenons un graphe correct avec le nom des fonctions; \r\nRegardons maintenant l'assembleur généré par gcc\r\n  $gcc -O0 -S t.c\r\n__Assembleur de GCC :__\r\n///\r\n        .file   \"t.c\"\r\n        .text\r\n.globl bar\r\n        .type   bar, @function\r\nbar:\r\n        pushl   %ebp\r\n        movl    %esp, %ebp\r\n        movl    8(%ebp), %eax\r\n        incl    %eax\r\n        popl    %ebp\r\n        ret\r\n        .size   bar, .-bar\r\n.globl foo\r\n        .type   foo, @function\r\nfoo:\r\n        pushl   %ebp\r\n        movl    %esp, %ebp\r\n        subl    $4, %esp\r\n        movl    8(%ebp), %eax\r\n        movl    %eax, (%esp)\r\n        call    bar\r\n        addl    $2, %eax\r\n        leave\r\n        ret\r\n        .size   foo, .-foo\r\n///\r\n\r\nComparons maintenant celui-ci à l'assembleur généré par le compilateur ocaml :\r\n__ Assembleur OCaml __\r\n///\r\n        .text\r\n        .align  16\r\n     .globl     camlT__bar_58\r\n        .type   camlT__bar_58,@function\r\ncamlT__bar_58:\r\n.L100:\r\n        addl    $2, %eax\r\n        ret\r\n        .text\r\n        .align  16\r\n     .globl     camlT__foo_60\r\n        .type   camlT__foo_60,@function\r\ncamlT__foo_60:\r\n.L101:\r\n        call    camlT__bar_58\r\n.L102:\r\n        addl    $4, %eax\r\n        ret\r\n///\r\n\r\nDans les deux cas, nous retrouvons bien nos deux fonctions foo et bar avec les instructions : .globl, .type mais il manque .size à la fin des fonctions caml! \r\nCeci est la source du problème pour valgrind, car après analyse de son code source, il ignore les fonctions de taille nulle ...\r\n\r\n!!! Solution\r\nIl suffit d'appliquer ce minuscule patch sur le compilateur ocaml pour générer des exécutables ELF valides aux yeux de valgrind :\r\n[patch-alter_elf_for_valgrind-cvs-080620|/public/patch-alter_elf_for_valgrind-cvs-080620.patch] %%%\r\n(Patch réalisé sur la version CVS, qui correspond à la futur version 3.11)\r\n\r\nNous obtenons alors le callgraph suivant sur le premier exemple :\r\n((/public/t-caml-valid-callgraph.png|t-caml-valid-callgraph.png|C))\r\n\r\n!!! Exemple sur un vrai projet utilisant ocamlnet :\r\n[((/public/./.callgraph-with-patch2_m.jpg|callgraph-with-patch2.png|C))|/public/callgraph-with-patch2.png]","<p><a href=\"http://kcachegrind.sourceforge.net/\" hreflang=\"en\">KCacheGrind</a> : un outil simple mais diablement efficace pour\nanalyser les callgraph de programmes en C (ou python, php, perl, ...) afin de\nfaire du débogage ou encore de l'analyse de performance.</p>\n<h3>Situation actuelle avec un programme caml simple</h3>\n<p><strong>Exemple utilisé :</strong></p>\n<pre>\nlet bar i =\n        1+i\n;;\n\nlet foo i  =\n        2+(bar i )\n;;\n\nlet () = \n        print_int ( foo 3 )\n;;\n</pre>\n<ul>\n<li>D'abord nous compilons en désactivant les optimisations qui pourraient\néliminer ces fonctions triviales</li>\n</ul>\n<pre>\n$ ocamlopt -inline 0 -o foo t.ml\n</pre>\n<ul>\n<li>Puis nous exécutons ce test via <a href=\"http://valgrind.org/\" hreflang=\"en\">valgrind</a> qui génère un fichier au format &quot;callgrind&quot;, contenant\nl'ordre d'appel des fonctions ainsi que les estimations du temps passé dans\nchacune d'entre elles :</li>\n</ul>\n<pre>\n$ valgrind --tool=callgrind ./foo\n</pre>\n<ul>\n<li>Enfin, on regarde le résultat sous kcachegrind</li>\n</ul>\n<pre>\n$ kcachegrind callgrind.out.10624\n</pre>\n<p><img src=\"/public/t-caml-without-patch-callgr.png\" alt=\"t-caml-without-patch-callgr.png\" style=\"display:block; margin:0 auto;\" /></p>\n<p>Mais voilà, l'assembleur généré par le compilateur caml ne contient pas\ntoutes les instructions utilisées par valgrind lors de l'analyse du programme.\nAinsi, aucun label de fonction n'apparait et nous n'avons le droit qu'à des\nadresses mémoire en hexadécimal :(</p>\n<p><strong>/!\ Problème corrigé pour la version 3.11 : <a href=\"http://caml.inria.fr/mantis/bug_view_page.php?bug_id=4642\" hreflang=\"en\">détails</a></strong></p>\n<h3>Exemple du fonctionnement normal en C</h3>\n<p>Voyons comment valgrind fonctionne avec du C :</p>\n<pre>\nint bar(int a) {\n        return 1+a;\n}\n\nint foo(int a) {\n        return 2+bar(a);\n}\n\nint main() {\n        foo(3);\n}\n</pre>\n<pre>\n$ gcc -O0 -o foo t.c\n$ valgrind --tool=callgrind ./foo\n$ kcachegrind callgrind.out.10719\n</pre>\n<p><img src=\"/public/t-c-callgraph.png\" alt=\"t-c-callgraph.png\" style=\"display:block; margin:0 auto;\" /></p>\n<p>Cette fois-ci, nous obtenons un graphe correct avec le nom des fonctions;\nRegardons maintenant l'assembleur généré par gcc</p>\n<pre>\n $gcc -O0 -S t.c\n</pre>\n<p><strong>Assembleur de GCC :</strong></p>\n<pre>\n        .file   &quot;t.c&quot;\n        .text\n.globl bar\n        .type   bar, @function\nbar:\n        pushl   %ebp\n        movl    %esp, %ebp\n        movl    8(%ebp), %eax\n        incl    %eax\n        popl    %ebp\n        ret\n        .size   bar, .-bar\n.globl foo\n        .type   foo, @function\nfoo:\n        pushl   %ebp\n        movl    %esp, %ebp\n        subl    $4, %esp\n        movl    8(%ebp), %eax\n        movl    %eax, (%esp)\n        call    bar\n        addl    $2, %eax\n        leave\n        ret\n        .size   foo, .-foo\n</pre>\n<p>Comparons maintenant celui-ci à l'assembleur généré par le compilateur\nocaml : <strong>Assembleur OCaml</strong></p>\n<pre>\n        .text\n        .align  16\n     .globl     camlT__bar_58\n        .type   camlT__bar_58,@function\ncamlT__bar_58:\n.L100:\n        addl    $2, %eax\n        ret\n        .text\n        .align  16\n     .globl     camlT__foo_60\n        .type   camlT__foo_60,@function\ncamlT__foo_60:\n.L101:\n        call    camlT__bar_58\n.L102:\n        addl    $4, %eax\n        ret\n</pre>\n<p>Dans les deux cas, nous retrouvons bien nos deux fonctions foo et bar avec\nles instructions : .globl, .type mais il manque .size à la fin des\nfonctions caml! Ceci est la source du problème pour valgrind, car après analyse\nde son code source, il ignore les fonctions de taille nulle ...</p>\n<h3>Solution</h3>\n<p>Il suffit d'appliquer ce minuscule patch sur le compilateur ocaml pour\ngénérer des exécutables ELF valides aux yeux de valgrind : <a href=\"/public/patch-alter_elf_for_valgrind-cvs-080620.patch\">patch-alter_elf_for_valgrind-cvs-080620</a><br />\n\n(Patch réalisé sur la version CVS, qui correspond à la futur version 3.11)</p>\n<p>Nous obtenons alors le callgraph suivant sur le premier exemple :\n<img src=\"/public/t-caml-valid-callgraph.png\" alt=\"t-caml-valid-callgraph.png\" style=\"display:block; margin:0 auto;\" /></p>\n<h3>Exemple sur un vrai projet utilisant ocamlnet :</h3>\n<p><a href=\"/public/callgraph-with-patch2.png\"><img src=\"/public/./.callgraph-with-patch2_m.jpg\" alt=\"callgraph-with-patch2.png\" style=\"display:block; margin:0 auto;\" /></a></p>","","ocaml callgraph kcachegrind outil simple mais diablement efficace pour analyser les callgraph programmes python php perl afin faire débogage encore analyse performance situation actuelle avec programme caml simple exemple utilisé let bar let foo bar let print int foo abord nous compilons désactivant les optimisations qui pourraient éliminer ces fonctions triviales ocamlopt inline foo puis nous exécutons test via valgrind qui génère fichier format quot callgrind quot contenant ordre appel des fonctions ainsi que les estimations temps passé dans chacune entre elles valgrind tool callgrind foo enfin regarde résultat sous kcachegrind kcachegrind callgrind out 10624 mais voilà assembleur généré par compilateur caml contient pas toutes les instructions utilisées par valgrind lors analyse programme ainsi aucun label fonction apparait nous avons droit des adresses mémoire hexadécimal problème corrigé pour version détails exemple fonctionnement normal voyons comment valgrind fonctionne avec int bar int return int foo int return bar int main foo gcc foo valgrind tool callgrind foo kcachegrind callgrind out 10719 cette fois nous obtenons graphe correct avec nom des fonctions regardons maintenant assembleur généré par gcc gcc assembleur gcc file quot quot text globl bar type bar function bar pushl ebp movl esp ebp movl ebp eax incl eax popl ebp ret size bar bar globl foo type foo function foo pushl ebp movl esp ebp subl esp movl ebp eax movl eax esp call bar addl eax leave ret size foo foo comparons maintenant celui assembleur généré par compilateur ocaml assembleur ocaml text align globl camlt bar type camlt bar function camlt bar l100 addl eax ret text align globl camlt foo type camlt foo function camlt foo l101 call camlt bar l102 addl eax ret dans les deux cas nous retrouvons bien nos deux fonctions foo bar avec les instructions globl type mais manque size fin des fonctions caml ceci est source problème pour valgrind car après analyse son code source ignore les fonctions taille nulle solution suffit appliquer minuscule patch sur compilateur ocaml pour générer des exécutables elf valides aux yeux valgrind patch alter elf for valgrind cvs 080620 patch réalisé sur version cvs qui correspond futur version nous obtenons alors callgraph suivant sur premier exemple exemple sur vrai projet utilisant ocamlnet","a:1:{s:3:\"tag\";a:5:{i:0;s:9:\"profiling\";i:1;s:11:\"kcachegrind\";i:2;s:8:\"valgrind\";i:3;s:9:\"callgraph\";i:4;s:5:\"ocaml\";}}","1","0","1","1","11","0","0"
"212155","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18842","2008-03-19 23:53:00","Europe/Paris","2008-02-21 14:24:52","2008-03-19 22:51:25","","post","wiki","2008/02/21/dynamique-vs-statique","fr","dynamique vs statique","","","Les langages dynamiques comme Python, PHP, Ruby ou encore Javascript ont le vent en poupe, car ils apportent un net gain en ''productivité --éphémère-- instantanée''.%%%\r\nLorsque l'on développe dans ces langages, on boucle sur des cycles : __coder puis regarder__ : \r\n* on modifie le code source du programme, et,\r\n* on va directement voir le résultat en exécutant l'application ...\r\n\r\nDans le cas des langages à typage statique, nous sommes obligés de rajouter une étape intermédiaire : __coder, compiler et éventuellement regarder__ : \r\n* on commence toujours pas modifier notre code source, puis,\r\n* nous sommes obligés de cliquer sur un bouton ou de lancer un make pour la compilation, et enfin,\r\n* suivant le résultat de la compilation, soit on se lance dans un nouveau cycle en cas d'erreur, ou alors, on exécute l'application pour valider des besoins fonctionnels ou visuels.%%%\r\n\r\nDonc oui, un programme développé à l'aide d'un langage statique prendra plus de temps car l'étape de compilation nous oblige à supprimer toute erreur de typage, de syntaxe et souvent bon nombre d'erreurs d'inattention. De plus cette étape de compilation ne supprime pas l'étape \"lancer le programme\", que nous devons toujours effectuer afin de valider les specs fonctionnelles ou graphiques.%%%\r\n\r\nMais ce temps passé à faire valider notre code par le compilateur n'est pas sans bénéfices, puisque notre programme sera plus fiable et n'émettra aucune erreur purement informatique : typage, syntaxe, ...%%%\r\nAinsi, __les erreurs sont présentées au développeur et en aucun cas à l'utilisateur__ qui ne devrait en aucun cas avoir à gérer, ni comprendre, ni même voir une telle erreur! $$[Billet sur les erreurs à l'exécution|http://pinderkent.blogsavy.com/archives/157|en]$$\r\n\r\n!!! Tests unitaires\r\nOui mais certains diront : on peut développer en mode ''[Extreme programming|http://fr.wikipedia.org/wiki/Extreme_programming|fr]'' ou encore ''Programmation agile'' en agrémentant une base de tests unitaires tout au long du développement. Cela se tient si l'on fait des tests unitaires doublés de [couverture de code|http://fr.wikipedia.org/wiki/Couverture_de_code|fr] maintenue à 100% afin de s'assurer d'exécuter l'intégralité du code source par les tests et ainsi éviter l'affichage de moultes erreurs aux yeux ébahis de nos utilisateurs. %%%\r\nMais cela engendre un volume de travail supplémentaire loin d'être négligeable! \r\nOn peut même se demander si les tests ne font pas que reproduire l'action d'un compilateur analysant notre programme ?%%%\r\nPour rester objectif, je dirais que de tels tests vont plus loin et permettent par exemple de valider des specs fonctionelles et nous obtenons au final un logiciel modulaire, ++spécifié++ et solide.$$les tests unitaires sont une bonne chose et je reviendrais la dessus$$'%%%\r\nMais je reste perplexe quand au temps de développement nécessaire si l'on compare à n'importe quel langage statique agrémenté de quelques tests unitaires/fonctionnels (naturellement plus succincts).%%%\r\nD'autre part, il ne faut pas oublier que la [règle des 80/20|http://fr.wikipedia.org/wiki/Loi_de_Pareto|fr] s'applique à tout, y compris à l'informatique et à notre sujet de discussion : on peut souvent réaliser une application fonctionnelle à 80% avec 20% du temps nécessaire pour faire l'application finale : fiable et maintenable par d'autres développeurs.\r\n\r\n!!! Refactoring et évolution  $$[Billet sur l'évolutivité du dynamique|http://blogs.tedneward.com/2008/01/24/Can+Dynamic+Languages+Scale.aspx|en]$$\r\nEnfin, je tiens à mettre en avant un problème sérieux lorsque l'on doit faire évoluer une application écrite à l'aide d'un langage dynamique. En effet, dans ce cas de figure, nous devons à coup sûr modifier des structures de données : faire évoluer un attribut entier vers un objet plus complexe, ou encore modifier le nom d'une fonction ou ses paramètres, ou pire encore : changer le type de sortie d'une fonction! Et à moins d'utiliser des outils avancés comme IntelliJ ou Eclipse, __les étapes de refactoring(réécriture de code) seront laborieuses, incomplètes et vont décupler le nombre d'erreur signalées à l'exécution__ ... %%%\r\nEnfin, il faut rester conscient que ces outils ne pourront jamais rejoindre le niveau de vérification effectué par le compilateur d'un langage typé statiquement, et ce, à cause de la nature dynamique du langage.","<p>Les langages dynamiques comme Python, PHP, Ruby ou encore Javascript ont le\nvent en poupe, car ils apportent un net gain en <em>productivité\n<del>éphémère</del> instantanée</em>.<br />\nLorsque l'on développe dans ces langages, on boucle sur des cycles :\n<strong>coder puis regarder</strong> :</p>\n<ul>\n<li>on modifie le code source du programme, et,</li>\n<li>on va directement voir le résultat en exécutant l'application ...</li>\n</ul>\n<p>Dans le cas des langages à typage statique, nous sommes obligés de rajouter\nune étape intermédiaire : <strong>coder, compiler et éventuellement\nregarder</strong> :</p>\n<ul>\n<li>on commence toujours pas modifier notre code source, puis,</li>\n<li>nous sommes obligés de cliquer sur un bouton ou de lancer un make pour la\ncompilation, et enfin,</li>\n<li>suivant le résultat de la compilation, soit on se lance dans un nouveau\ncycle en cas d'erreur, ou alors, on exécute l'application pour valider des\nbesoins fonctionnels ou visuels.<br /></li>\n</ul>\n<p>Donc oui, un programme développé à l'aide d'un langage statique prendra plus\nde temps car l'étape de compilation nous oblige à supprimer toute erreur de\ntypage, de syntaxe et souvent bon nombre d'erreurs d'inattention. De plus cette\nétape de compilation ne supprime pas l'étape &quot;lancer le programme&quot;, que nous\ndevons toujours effectuer afin de valider les specs fonctionnelles ou\ngraphiques.<br /></p>\n<p>Mais ce temps passé à faire valider notre code par le compilateur n'est pas\nsans bénéfices, puisque notre programme sera plus fiable et n'émettra aucune\nerreur purement informatique : typage, syntaxe, ...<br />\nAinsi, <strong>les erreurs sont présentées au développeur et en aucun cas à\nl'utilisateur</strong> qui ne devrait en aucun cas avoir à gérer, ni\ncomprendre, ni même voir une telle erreur! <sup>[<a href=\"#pnote-212155-1\" id=\"rev-pnote-212155-1\" name=\"rev-pnote-212155-1\">1</a>]</sup></p>\n<h3>Tests unitaires</h3>\n<p>Oui mais certains diront : on peut développer en mode <em><a href=\"http://fr.wikipedia.org/wiki/Extreme_programming\" hreflang=\"fr\">Extreme\nprogramming</a></em> ou encore <em>Programmation agile</em> en agrémentant une\nbase de tests unitaires tout au long du développement. Cela se tient si l'on\nfait des tests unitaires doublés de <a href=\"http://fr.wikipedia.org/wiki/Couverture_de_code\" hreflang=\"fr\">couverture de\ncode</a> maintenue à 100% afin de s'assurer d'exécuter l'intégralité du code\nsource par les tests et ainsi éviter l'affichage de moultes erreurs aux yeux\nébahis de nos utilisateurs.<br />\nMais cela engendre un volume de travail supplémentaire loin d'être négligeable!\nOn peut même se demander si les tests ne font pas que reproduire l'action d'un\ncompilateur analysant notre programme ?<br />\nPour rester objectif, je dirais que de tels tests vont plus loin et permettent\npar exemple de valider des specs fonctionelles et nous obtenons au final un\nlogiciel modulaire, <ins>spécifié</ins> et solide.<sup>[<a href=\"#pnote-212155-2\" id=\"rev-pnote-212155-2\" name=\"rev-pnote-212155-2\">2</a>]</sup>'<br />\nMais je reste perplexe quand au temps de développement nécessaire si l'on\ncompare à n'importe quel langage statique agrémenté de quelques tests\nunitaires/fonctionnels (naturellement plus succincts).<br />\nD'autre part, il ne faut pas oublier que la <a href=\"http://fr.wikipedia.org/wiki/Loi_de_Pareto\" hreflang=\"fr\">règle des 80/20</a>\ns'applique à tout, y compris à l'informatique et à notre sujet de\ndiscussion : on peut souvent réaliser une application fonctionnelle à 80%\navec 20% du temps nécessaire pour faire l'application finale : fiable et\nmaintenable par d'autres développeurs.</p>\n<h3>Refactoring et évolution <sup>[<a href=\"#pnote-212155-3\" id=\"rev-pnote-212155-3\" name=\"rev-pnote-212155-3\">3</a>]</sup></h3>\n<p>Enfin, je tiens à mettre en avant un problème sérieux lorsque l'on doit\nfaire évoluer une application écrite à l'aide d'un langage dynamique. En effet,\ndans ce cas de figure, nous devons à coup sûr modifier des structures de\ndonnées : faire évoluer un attribut entier vers un objet plus complexe, ou\nencore modifier le nom d'une fonction ou ses paramètres, ou pire encore :\nchanger le type de sortie d'une fonction! Et à moins d'utiliser des outils\navancés comme IntelliJ ou Eclipse, <strong>les étapes de refactoring(réécriture\nde code) seront laborieuses, incomplètes et vont décupler le nombre d'erreur\nsignalées à l'exécution</strong> ...<br />\nEnfin, il faut rester conscient que ces outils ne pourront jamais rejoindre le\nniveau de vérification effectué par le compilateur d'un langage typé\nstatiquement, et ce, à cause de la nature dynamique du langage.</p>\n<div class=\"footnotes\">\n<h4>Notes</h4>\n<p>[<a href=\"#rev-pnote-212155-1\" id=\"pnote-212155-1\" name=\"pnote-212155-1\">1</a>] <a href=\"http://pinderkent.blogsavy.com/archives/157\" hreflang=\"en\">Billet sur les erreurs à l'exécution</a></p>\n<p>[<a href=\"#rev-pnote-212155-2\" id=\"pnote-212155-2\" name=\"pnote-212155-2\">2</a>] les tests unitaires sont une bonne chose et je\nreviendrais la dessus</p>\n<p>[<a href=\"#rev-pnote-212155-3\" id=\"pnote-212155-3\" name=\"pnote-212155-3\">3</a>] <a href=\"http://blogs.tedneward.com/2008/01/24/Can+Dynamic+Languages+Scale.aspx\" hreflang=\"en\">Billet sur l'évolutivité du dynamique</a></p>\n</div>","","dynamique statique les langages dynamiques comme python php ruby encore javascript ont vent poupe car ils apportent net gain productivité éphémère instantanée lorsque développe dans ces langages boucle sur des cycles coder puis regarder modifie code source programme directement voir résultat exécutant application dans cas des langages typage statique nous sommes obligés rajouter une étape intermédiaire coder compiler éventuellement regarder commence toujours pas modifier notre code source puis nous sommes obligés cliquer sur bouton lancer make pour compilation enfin suivant résultat compilation soit lance dans nouveau cycle cas erreur alors exécute application pour valider des besoins fonctionnels visuels donc oui programme développé aide langage statique prendra plus temps car étape compilation nous oblige supprimer toute erreur typage syntaxe souvent bon nombre erreurs inattention plus cette étape compilation supprime pas étape quot lancer programme quot que nous devons toujours effectuer afin valider les specs fonctionnelles graphiques mais temps passé faire valider notre code par compilateur est pas sans bénéfices puisque notre programme sera plus fiable émettra aucune erreur purement informatique typage syntaxe ainsi les erreurs sont présentées développeur aucun cas utilisateur qui devrait aucun cas avoir gérer comprendre même voir une telle erreur tests unitaires oui mais certains diront peut développer mode extreme programming encore programmation agile agrémentant une base tests unitaires tout long développement cela tient fait des tests unitaires doublés couverture code maintenue 100 afin assurer exécuter intégralité code source par les tests ainsi éviter affichage moultes erreurs aux yeux ébahis nos utilisateurs mais cela engendre volume travail supplémentaire loin être négligeable peut même demander les tests font pas que reproduire action compilateur analysant notre programme pour rester objectif dirais que tels tests vont plus loin permettent par exemple valider des specs fonctionelles nous obtenons final logiciel modulaire spécifié solide mais reste perplexe quand temps développement nécessaire compare importe quel langage statique agrémenté quelques tests unitaires fonctionnels naturellement plus succincts autre part faut pas oublier que règle des applique tout compris informatique notre sujet discussion peut souvent réaliser une application fonctionnelle avec temps nécessaire pour faire application finale fiable maintenable par autres développeurs refactoring évolution enfin tiens mettre avant problème sérieux lorsque doit faire évoluer une application écrite aide langage dynamique effet dans cas figure nous devons coup sûr modifier des structures données faire évoluer attribut entier vers objet plus complexe encore modifier nom une fonction ses paramètres pire encore changer type sortie une fonction moins utiliser des outils avancés comme intellij eclipse les étapes refactoring réécriture code seront laborieuses incomplètes vont décupler nombre erreur signalées exécution enfin faut rester conscient que ces outils pourront jamais rejoindre niveau vérification effectué par compilateur langage typé statiquement cause nature dynamique langage notes billet sur les erreurs exécution les tests unitaires sont une bonne chose reviendrais dessus billet sur évolutivité dynamique","a:1:{s:3:\"tag\";a:3:{i:0;s:15:\"tests unitaires\";i:1;s:16:\"typage dynamique\";i:2;s:15:\"typage statique\";}}","1","0","1","1","2","0","0"
"576043","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","45328","2011-01-09 20:02:00","Europe/Paris","2011-01-08 22:25:18","2011-01-12 01:04:01","","post","xhtml","2011/01/08/Arretetoi.la-geolocalisation-horodate","fr","Arretetoi.la - la géolocalisation horodaté!","","","<p align=\"center\">\r\n  <a href=\"http://arretetoi.la/\" style=\"font-size: 2em;\">http://arretetoi.la/</a>\r\n</p>\r\n<img src=\"/public/arretetoila/.icon_128_t.jpg\" style=\"float: right;\" />\r\nCette application web va vous permettre de récupérer une liste de restaurants le long d'un trajet en voiture.\r\nD'abord, vous indiquez votre lieu de départ, d'arrivée ainsi que l'heure à laquelle vous comptez partir.\r\nTout ceci pour obtenir une liste de restaurants chaudement recommandés par <a href=\"http://dismoiou.fr/\">Dismoiou.fr</a>. Jusque là, rien de révolutionnaire! Mais la particularité de ce service est d'afficher des adresses uniquement autour des villes que vous allez croiser autour des horaires de repas.\r\nAinsi, si vous faites Paris-Marseille en partant à 8h, le site vous proposera de déjeuner près de lyon,\r\ncar vous devrez y être autour de midi!\r\n<p align=\"center\" style=\"font-size: 1.2em\">\r\n  <strong>Arretetoi.la est un service à la fois géolocalisé mais surtout horodaté!</strong>\r\n</p>\r\nLes site marche aussi bien sur ordinateur que sur téléphone. La version sur ordinateur vous permettra de préparer un parcours et d'estimer où vous pourriez manger. Tandis que la version mobile vous permettra de mettre à jour l'estimation en fonction de votre progression. En effet, votre téléphone pourra transmettre votre position exacte et mettre à jour la zone de déjeuner/diner.\r\n<br/>\r\nVoici un aperçu de la version ordinateur:\r\n<p align=\"center\">\r\nIndication des lieux de départ/arrivée ainsi que l'heure de départ\r\n<img src=\"/public/arretetoila/.desktop-1_s.jpg\" style=\"display: block; margin: auto;\" />\r\nVotre trajet horodaté\r\n<img src=\"/public/arretetoila/.desktop-2_s.jpg\" style=\"display: block; margin: auto;\" />\r\nLieu où vous serez à midi ou 20h, avec les restaurants recommandés\r\n<img src=\"/public/arretetoila/.desktop-3_s.jpg\" style=\"display: block; margin: auto;\" />\r\n</p>\r\n\r\nLa version mobile:\r\n<p align=\"center\">\r\nIndication de votre lieu d'arrivée, le reste se remplit automatiquement\r\n<img src=\"/public/arretetoila/.mobile-1_s.jpg\" style=\"display: block; margin: auto;\" />\r\nListe des restaurants recommandés autour de midi ou 20h\r\n<img src=\"/public/arretetoila/.mobile-2_s.jpg\" style=\"display: block; margin: auto;\" />\r\nAffichage du restaurant sélectionné sur une carte avec votre trajet\r\n<img src=\"/public/arretetoila/.mobile-3_s.jpg\" style=\"display: block; margin: auto;\" />\r\n</p>\r\n\r\nEnfin, notez que vous pouvez ajouter cette application à votre écran d'accueil sur iphone et android.\r\nAinsi que sur ordinateur avec le navigateur chrome via le <a href=\"https://chrome.google.com/webstore/detail/dmjmddodainnogedepioklhnhdmebfhk\">chrome web store</a>.","<p style=\"text-align: center\"><a href=\"http://arretetoi.la/\" style=\"font-size: 2em;\">http://arretetoi.la/</a></p>\n<img src=\"/public/arretetoila/.icon_128_t.jpg\" style=\"float: right;\" /> Cette\napplication web va vous permettre de récupérer une liste de restaurants le long\nd'un trajet en voiture. D'abord, vous indiquez votre lieu de départ, d'arrivée\nainsi que l'heure à laquelle vous comptez partir. Tout ceci pour obtenir une\nliste de restaurants chaudement recommandés par <a href=\"http://dismoiou.fr/\">Dismoiou.fr</a>. Jusque là, rien de révolutionnaire! Mais\nla particularité de ce service est d'afficher des adresses uniquement autour\ndes villes que vous allez croiser autour des horaires de repas. Ainsi, si vous\nfaites Paris-Marseille en partant à 8h, le site vous proposera de déjeuner près\nde lyon, car vous devrez y être autour de midi!\n<p style=\"font-size: 1.2em; text-align: center\"><strong>Arretetoi.la est un\nservice à la fois géolocalisé mais surtout horodaté!</strong></p>\nLes site marche aussi bien sur ordinateur que sur téléphone. La version sur\nordinateur vous permettra de préparer un parcours et d'estimer où vous pourriez\nmanger. Tandis que la version mobile vous permettra de mettre à jour\nl'estimation en fonction de votre progression. En effet, votre téléphone pourra\ntransmettre votre position exacte et mettre à jour la zone de\ndéjeuner/diner.<br />\nVoici un aperçu de la version ordinateur:\n<p style=\"text-align: center\">Indication des lieux de départ/arrivée ainsi que\nl'heure de départ <img src=\"/public/arretetoila/.desktop-1_s.jpg\" style=\"display: block; margin: auto;\" /> Votre trajet horodaté <img src=\"/public/arretetoila/.desktop-2_s.jpg\" style=\"display: block; margin: auto;\" />\nLieu où vous serez à midi ou 20h, avec les restaurants recommandés <img src=\"/public/arretetoila/.desktop-3_s.jpg\" style=\"display: block; margin: auto;\" /></p>\nLa version mobile:\n<p style=\"text-align: center\">Indication de votre lieu d'arrivée, le reste se\nremplit automatiquement <img src=\"/public/arretetoila/.mobile-1_s.jpg\" style=\"display: block; margin: auto;\" /> Liste des restaurants recommandés autour de\nmidi ou 20h <img src=\"/public/arretetoila/.mobile-2_s.jpg\" style=\"display: block; margin: auto;\" /> Affichage du restaurant sélectionné sur une\ncarte avec votre trajet <img src=\"/public/arretetoila/.mobile-3_s.jpg\" style=\"display: block; margin: auto;\" /></p>\nEnfin, notez que vous pouvez ajouter cette application à votre écran d'accueil\nsur iphone et android. Ainsi que sur ordinateur avec le navigateur chrome via\nle <a href=\"https://chrome.google.com/webstore/detail/dmjmddodainnogedepioklhnhdmebfhk\">chrome\nweb store</a>.","","arretetoi géolocalisation horodaté http arretetoi cette application web vous permettre récupérer une liste restaurants long trajet voiture abord vous indiquez votre lieu départ arrivée ainsi que heure laquelle vous comptez partir tout ceci pour obtenir une liste restaurants chaudement recommandés par dismoiou jusque rien révolutionnaire mais particularité service est afficher des adresses uniquement autour des villes que vous allez croiser autour des horaires repas ainsi vous faites paris marseille partant site vous proposera déjeuner près lyon car vous devrez être autour midi arretetoi est service fois géolocalisé mais surtout horodaté les site marche aussi bien sur ordinateur que sur téléphone version sur ordinateur vous permettra préparer parcours estimer vous pourriez manger tandis que version mobile vous permettra mettre jour estimation fonction votre progression effet votre téléphone pourra transmettre votre position exacte mettre jour zone déjeuner diner voici aperçu version ordinateur indication des lieux départ arrivée ainsi que heure départ votre trajet horodaté lieu vous serez midi 20h avec les restaurants recommandés version mobile indication votre lieu arrivée reste remplit automatiquement liste des restaurants recommandés autour midi 20h affichage restaurant sélectionné sur une carte avec votre trajet enfin notez que vous pouvez ajouter cette application votre écran accueil sur iphone android ainsi que sur ordinateur avec navigateur chrome via chrome web store","a:1:{s:3:\"tag\";a:3:{i:0;s:12:\"arretetoi.la\";i:1;s:11:\"google maps\";i:2;s:8:\"dismoiou\";}}","1","0","1","1","5","0","0"
"296231","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18842","2008-11-12 22:43:00","Europe/Paris","2008-11-09 21:43:08","2008-11-13 12:50:41","","post","wiki","2008/11/09/Ocaml-native-code-debugging","fr","Ocaml native code debugging","","","((/public/./.t-caml-valid-callgraph_s.jpg|t-caml-valid-callgraph.png|R|t-caml-valid-callgraph.png, juin 2008))\r\nMaintenant que le bug [Improve gnu ELF|http://caml.inria.fr/mantis/bug_view_page.php?bug_id=4642|en] est corrigé, kcachegrind nous génère de beaux callgraphs.\r\n\r\nCe patch consistait à ajouter des instructions .size (dans l'assembleur ELF) pour que valgrind interprète tous les symboles (camT_entry, camlT_foo, camlT_bar, ...) et puisse ainsi afficher leurs noms au lieu d'un nombre hexadécimal!\r\n\r\n!!!! Les standards ELF pour le debug\r\nMaintenant, nous souhaiterions que ces outils puissent savoir de manière standard dans quels fichiers et à quelles lignes sont déclarés les fonctions.\r\n(Le nom du fichier est bien présent dans les symboles, mais cela ne permet pas d'exploiter le plein potentiel de ces outils)\r\n\r\nVoyons un peu comment se débrouille GCC :\r\n///\r\n  int bar(int a) {\r\n        return 1+a;\r\n  }\r\n  \r\n  int foo(int a) {\r\n        return 2+bar(a);\r\n  }\r\n  \r\n  int main() {\r\n        foo(3);\r\n  }\r\n///\r\n\r\n///\r\n  $ gcc -O0 -g -S t.c\r\n///\r\n\r\n///\r\n  .globl bar\r\n        .type   bar, @function\r\n  bar:\r\n  .LFB2:\r\n        .file 1 \"t.c\"\r\n        .loc 1 1 0\r\n        pushq   %rbp\r\n  .LCFI0:\r\n        movq    %rsp, %rbp\r\n  .LCFI1:\r\n        movl    %edi, -4(%rbp)\r\n        .loc 1 2 0\r\n        movl    -4(%rbp), %eax\r\n        incl    %eax\r\n        .loc 1 3 0\r\n        leave\r\n        ret\r\n  .LFE2:\r\n        .size   bar, .-bar\r\n  .globl foo\r\n        .type   foo, @function\r\n///\r\n\r\nLes instructions clés sont .file et .loc :\r\n* .file déclare un chemin vers un fichier et l'associe à un identifiant %%%\r\n-> .file $identifiant$ \"$chemin_du_fichier\"\r\n* .loc associe un fichier, un numéro de ligne et de colonne aux instructions la succédant %%%\r\n-> .loc $identifiant_de_fichier$ $ligne$ $colonne$\r\n\r\n!!!! Solution proposée\r\nLe module du compilateur qui génère les instructions est : \r\n[asmcomp/i386/emit.mlp|http://camlcvs.inria.fr/cgi-bin/cvsweb/ocaml/asmcomp/i386/emit.mlp?rev=1.41.2.2;only_with_tag=release311|en]%%%\r\nEt plus particulièrement la fonction ''fundecl'' :\r\n///\r\n  let fundecl fundecl =\r\n    function_name := fundecl.fun_name;\r\n    fastcode_flag := fundecl.fun_fast;\r\n    (* ... *)\r\n    `	.globl	{emit_symbol fundecl.fun_name}\n`;\r\n    `{emit_symbol fundecl.fun_name}:\n`;\r\n    if !Clflags.gprofile then emit_profile();\r\n    let n = frame_size() - 4 in\r\n    if n > 0 then\r\n      `	subl	${emit_int n}, %esp\n`;\r\n    `{emit_label !tailrec_entry_point}:\n`;\r\n    emit_all true fundecl.fun_body;\r\n    List.iter emit_call_gc !call_gc_sites;\r\n    emit_call_bound_errors ();\r\n    List.iter emit_float_constant !float_constants;\r\n    match Config.system with\r\n      \"linux_elf\" | \"bsd_elf\" | \"gnu\" ->\r\n        `	.type	{emit_symbol fundecl.fun_name},@function\n`;\r\n        `	.size	{emit_symbol fundecl.fun_name},.-{emit_symbol fundecl.fun_name}\n`\r\n    | _ -> ()\r\n///\r\nHors nous n'avons à disposition que la variable fundecl :\r\n///\r\n  type fundecl = \r\n  { fun_name: string;\r\n    fun_body: instruction;\r\n    fun_fast: bool } \r\n  type instruction =\r\n  { mutable desc: instruction_desc;\r\n    mutable next: instruction;\r\n    arg: Reg.t array;\r\n    res: Reg.t array;\r\n    dbg: Debuginfo.t;\r\n    live: Reg.Set.t }\r\n///\r\nIl y a bien un attribut dbg sur les instructions mais il est rarement renseigné. (une compilation avec l'option -dlinear permet de le voir)\r\n\r\nJ'ai décidé d'ajouter un attribut ''fun_dbg : Debuginfo.t'' sur ''fundecl'' et de le remplir dans toutes les phases de compilation. Il serait peut être plus judicieux de travailler sur l'attribut ''dbg'' des instructions ? (car cela permettrait par la suite d'indiquer les lignes de chaque instruction à valgrind, mais aussi gdb!)\r\nCe patch n'est pas optimisé car il répète l'instruction .file pour chaque .loc, donc à chaque entête de fonction, nous avons un .file et un .loc.\r\n\r\n-> [Patch sur la branche release311|/public/patch-file-and-loc-v1-cvs-2008-11-11.patch]\r\n%%%\r\n%%%\r\n\r\nVoyons maintenant ce qu'apporte ce patch.\r\n\r\n!!!! Résultats avec gdb\r\n///\r\n  $ ocamlopt -g -inline 0 t.ml\r\n  $ gdb a.out\r\n  (gdb) break t.ml:6\r\n  Breakpoint 1 at 0x8049940: file t.ml, line 6.\r\n  (gdb) run\r\n  Starting program: /home/alex/callgraph/a.out \r\n  \r\n  Breakpoint 1, camlT__foo_60 () at t.ml:6\r\n  6       let foo i  =\r\n  Current language:  auto; currently asm\r\n\r\n  (gdb) backtrace\r\n  #0  camlT__foo_60 () at t.ml:7\r\n  #1  0x0804c570 in camlT__entry () at t.ml:12\r\n  #2  0x0806e4b7 in caml_start_program ()\r\n  \r\n  (gdb) step 1\r\n  camlT__bar_58 () at t.ml:2\r\n  2       let bar i =\r\n  \r\n  (gdb) list\r\n  1\r\n  2       let bar i =\r\n  3               1+i\r\n  4       ;;\r\n  5\r\n  6       let foo i  =\r\n  7               2+(bar i )\r\n  8       ;;\r\n  9\r\n  10      let () =\r\n///\r\n\r\n!!!! Résultats avec gprof\r\n///\r\n  $ ocamlopt -g -p -inline 0 t.ml\r\n  $ ./a.out\r\n  $ gprof -A\r\n  *** File /home/alex/callgraph/t.ml:\r\n                  \r\n           1 -> let bar i =\r\n                        Thread.delay 3.0;\r\n                        1+i\r\n                ;;\r\n                \r\n           1 -> let foo i  =\r\n                        2+(bar i )\r\n                ;;\r\n                \r\n                let () =\r\n           1 ->         let closure() = 3 in\r\n                        print_int ( foo (closure()) )\r\n                ;;\r\n                \r\n  Top 10 Lines:\r\n\r\n     Line      Count\r\n        2          1\r\n        7          1\r\n       12          1\r\n\r\n  Execution Summary:\r\n\r\n        3   Executable lines in this file\r\n        3   Lines executed\r\n   100.00   Percent of the file executed\r\n\r\n        3   Total number of line executions\r\n     1.00   Average executions per line\r\n///\r\n\r\n\r\n!!!! Résultats avec valgrind/kcachegrind \r\n///\r\n  $ ocamlopt -g -inline 0 t.ml\r\n  $ valgrind --tool=callgrind ./a.out\r\n  $ callgrind_annotate callgrind.out.2152 t.ml\r\n  --------------------------------------------------------------------------------\r\n  -- User-annotated source: t.ml\r\n  --------------------------------------------------------------------------------\r\n  .  \r\n  8  let bar i =\r\n  77,715  => thread.ml:camlThread__delay_75 (1x)\r\n  .      Thread.delay 3.0;\r\n  .      1+i\r\n  .  ;;\r\n  .  \r\n  3  let foo i  = \r\n  77,723  => t.ml:camlT__bar_58 (1x)\r\n  .      2+(bar i )\r\n  .  ;;\r\n  .  \r\n  .  let () =\r\n  13          let closure() = 3 in\r\n  1,692  => pervasives.ml:camlPervasives__output_string_215 (1x)\r\n  2,312  => pervasives.ml:camlPervasives__string_of_int_154 (1x)\r\n  77,726  => t.ml:camlT__foo_60 (1x)\r\n  .      print_int ( foo (closure()) )\r\n  .  ;;\r\n  .  \r\n  $ kcachegrind callgrind.out.2152\r\n///\r\n((/public/./.kcachegrind-file-and-line_m.jpg|kcachegrind-file-and-line.png|C|kcachegrind-file-and-line.png, nov 2008))\r\n\r\n%%%\r\n%%%\r\n\r\n!!!! Et après ?\r\nOn peut espérer encore un tas d'améliorations, comme :\r\n* des breakpoints sur n'importe quelle ligne de caml ...\r\n* un pluging gdb pour pouvoir lire des valeurs pendant un break!","<p><img src=\"/public/./.t-caml-valid-callgraph_s.jpg\" alt=\"t-caml-valid-callgraph.png\" style=\"float:right; margin: 0 0 1em 1em;\" title=\"t-caml-valid-callgraph.png, juin 2008\" /> Maintenant que le bug <a href=\"http://caml.inria.fr/mantis/bug_view_page.php?bug_id=4642\" hreflang=\"en\">Improve gnu ELF</a> est corrigé, kcachegrind nous génère de beaux\ncallgraphs.</p>\n<p>Ce patch consistait à ajouter des instructions .size (dans l'assembleur ELF)\npour que valgrind interprète tous les symboles (camT_entry, camlT_foo,\ncamlT_bar, ...) et puisse ainsi afficher leurs noms au lieu d'un nombre\nhexadécimal!</p>\n<h2>Les standards ELF pour le debug</h2>\n<p>Maintenant, nous souhaiterions que ces outils puissent savoir de manière\nstandard dans quels fichiers et à quelles lignes sont déclarés les fonctions.\n(Le nom du fichier est bien présent dans les symboles, mais cela ne permet pas\nd'exploiter le plein potentiel de ces outils)</p>\n<p>Voyons un peu comment se débrouille GCC :</p>\n<pre>\n  int bar(int a) {\n        return 1+a;\n  }\n  \n  int foo(int a) {\n        return 2+bar(a);\n  }\n  \n  int main() {\n        foo(3);\n  }\n</pre>\n<pre>\n  $ gcc -O0 -g -S t.c\n</pre>\n<pre>\n  .globl bar\n        .type   bar, @function\n  bar:\n  .LFB2:\n        .file 1 &quot;t.c&quot;\n        .loc 1 1 0\n        pushq   %rbp\n  .LCFI0:\n        movq    %rsp, %rbp\n  .LCFI1:\n        movl    %edi, -4(%rbp)\n        .loc 1 2 0\n        movl    -4(%rbp), %eax\n        incl    %eax\n        .loc 1 3 0\n        leave\n        ret\n  .LFE2:\n        .size   bar, .-bar\n  .globl foo\n        .type   foo, @function\n</pre>\n<p>Les instructions clés sont .file et .loc :</p>\n<ul>\n<li>.file déclare un chemin vers un fichier et l'associe à un\nidentifiant<br /></li>\n</ul>\n<p>-&gt; .file $identifiant$ &quot;$chemin_du_fichier&quot;</p>\n<ul>\n<li>.loc associe un fichier, un numéro de ligne et de colonne aux instructions\nla succédant<br /></li>\n</ul>\n<p>-&gt; .loc $identifiant_de_fichier$ $ligne$ $colonne$</p>\n<h2>Solution proposée</h2>\n<p>Le module du compilateur qui génère les instructions est : <a href=\"http://camlcvs.inria.fr/cgi-bin/cvsweb/ocaml/asmcomp/i386/emit.mlp?rev=1.41.2.2;only_with_tag=release311\" hreflang=\"en\">asmcomp/i386/emit.mlp</a><br />\nEt plus particulièrement la fonction <em>fundecl</em> :</p>\n<pre>\n  let fundecl fundecl =\n    function_name := fundecl.fun_name;\n    fastcode_flag := fundecl.fun_fast;\n    (* ... *)\n    `   .globl  {emit_symbol fundecl.fun_name}\n`;\n    `{emit_symbol fundecl.fun_name}:\n`;\n    if !Clflags.gprofile then emit_profile();\n    let n = frame_size() - 4 in\n    if n &gt; 0 then\n      ` subl    ${emit_int n}, %esp\n`;\n    `{emit_label !tailrec_entry_point}:\n`;\n    emit_all true fundecl.fun_body;\n    List.iter emit_call_gc !call_gc_sites;\n    emit_call_bound_errors ();\n    List.iter emit_float_constant !float_constants;\n    match Config.system with\n      &quot;linux_elf&quot; | &quot;bsd_elf&quot; | &quot;gnu&quot; -&gt;\n        `       .type   {emit_symbol fundecl.fun_name},@function\n`;\n        `       .size   {emit_symbol fundecl.fun_name},.-{emit_symbol fundecl.fun_name}\n`\n    | _ -&gt; ()\n</pre>\n<p>Hors nous n'avons à disposition que la variable fundecl :</p>\n<pre>\n  type fundecl = \n  { fun_name: string;\n    fun_body: instruction;\n    fun_fast: bool } \n  type instruction =\n  { mutable desc: instruction_desc;\n    mutable next: instruction;\n    arg: Reg.t array;\n    res: Reg.t array;\n    dbg: Debuginfo.t;\n    live: Reg.Set.t }\n</pre>\n<p>Il y a bien un attribut dbg sur les instructions mais il est rarement\nrenseigné. (une compilation avec l'option -dlinear permet de le voir)</p>\n<p>J'ai décidé d'ajouter un attribut <em>fun_dbg : Debuginfo.t</em> sur\n<em>fundecl</em> et de le remplir dans toutes les phases de compilation. Il\nserait peut être plus judicieux de travailler sur l'attribut <em>dbg</em> des\ninstructions ? (car cela permettrait par la suite d'indiquer les lignes de\nchaque instruction à valgrind, mais aussi gdb!) Ce patch n'est pas optimisé car\nil répète l'instruction .file pour chaque .loc, donc à chaque entête de\nfonction, nous avons un .file et un .loc.</p>\n<p>-&gt; <a href=\"/public/patch-file-and-loc-v1-cvs-2008-11-11.patch\">Patch sur\nla branche release311</a><br />\n<br /></p>\n<p>Voyons maintenant ce qu'apporte ce patch.</p>\n<h2>Résultats avec gdb</h2>\n<pre>\n  $ ocamlopt -g -inline 0 t.ml\n  $ gdb a.out\n  (gdb) break t.ml:6\n  Breakpoint 1 at 0x8049940: file t.ml, line 6.\n  (gdb) run\n  Starting program: /home/alex/callgraph/a.out \n  \n  Breakpoint 1, camlT__foo_60 () at t.ml:6\n  6       let foo i  =\n  Current language:  auto; currently asm\n\n  (gdb) backtrace\n  #0  camlT__foo_60 () at t.ml:7\n  #1  0x0804c570 in camlT__entry () at t.ml:12\n  #2  0x0806e4b7 in caml_start_program ()\n  \n  (gdb) step 1\n  camlT__bar_58 () at t.ml:2\n  2       let bar i =\n  \n  (gdb) list\n  1\n  2       let bar i =\n  3               1+i\n  4       ;;\n  5\n  6       let foo i  =\n  7               2+(bar i )\n  8       ;;\n  9\n  10      let () =\n</pre>\n<h2>Résultats avec gprof</h2>\n<pre>\n  $ ocamlopt -g -p -inline 0 t.ml\n  $ ./a.out\n  $ gprof -A\n  *** File /home/alex/callgraph/t.ml:\n                  \n           1 -&gt; let bar i =\n                        Thread.delay 3.0;\n                        1+i\n                ;;\n                \n           1 -&gt; let foo i  =\n                        2+(bar i )\n                ;;\n                \n                let () =\n           1 -&gt;         let closure() = 3 in\n                        print_int ( foo (closure()) )\n                ;;\n                \n  Top 10 Lines:\n\n     Line      Count\n        2          1\n        7          1\n       12          1\n\n  Execution Summary:\n\n        3   Executable lines in this file\n        3   Lines executed\n   100.00   Percent of the file executed\n\n        3   Total number of line executions\n     1.00   Average executions per line\n</pre>\n<h2>Résultats avec valgrind/kcachegrind</h2>\n<pre>\n  $ ocamlopt -g -inline 0 t.ml\n  $ valgrind --tool=callgrind ./a.out\n  $ callgrind_annotate callgrind.out.2152 t.ml\n  --------------------------------------------------------------------------------\n  -- User-annotated source: t.ml\n  --------------------------------------------------------------------------------\n  .  \n  8  let bar i =\n  77,715  =&gt; thread.ml:camlThread__delay_75 (1x)\n  .      Thread.delay 3.0;\n  .      1+i\n  .  ;;\n  .  \n  3  let foo i  = \n  77,723  =&gt; t.ml:camlT__bar_58 (1x)\n  .      2+(bar i )\n  .  ;;\n  .  \n  .  let () =\n  13          let closure() = 3 in\n  1,692  =&gt; pervasives.ml:camlPervasives__output_string_215 (1x)\n  2,312  =&gt; pervasives.ml:camlPervasives__string_of_int_154 (1x)\n  77,726  =&gt; t.ml:camlT__foo_60 (1x)\n  .      print_int ( foo (closure()) )\n  .  ;;\n  .  \n  $ kcachegrind callgrind.out.2152\n</pre>\n<p><img src=\"/public/./.kcachegrind-file-and-line_m.jpg\" alt=\"kcachegrind-file-and-line.png\" style=\"display:block; margin:0 auto;\" title=\"kcachegrind-file-and-line.png, nov 2008\" /></p>\n<p><br />\n<br /></p>\n<h2>Et après ?</h2>\n<p>On peut espérer encore un tas d'améliorations, comme :</p>\n<ul>\n<li>des breakpoints sur n'importe quelle ligne de caml ...</li>\n<li>un pluging gdb pour pouvoir lire des valeurs pendant un break!</li>\n</ul>","","ocaml native code debugging maintenant que bug improve gnu elf est corrigé kcachegrind nous génère beaux callgraphs patch consistait ajouter des instructions size dans assembleur elf pour que valgrind interprète tous les symboles camt entry camlt foo camlt bar puisse ainsi afficher leurs noms lieu nombre hexadécimal les standards elf pour debug maintenant nous souhaiterions que ces outils puissent savoir manière standard dans quels fichiers quelles lignes sont déclarés les fonctions nom fichier est bien présent dans les symboles mais cela permet pas exploiter plein potentiel ces outils voyons peu comment débrouille gcc int bar int return int foo int return bar int main foo gcc globl bar type bar function bar lfb2 file quot quot loc pushq rbp lcfi0 movq rsp rbp lcfi1 movl edi rbp loc movl rbp eax incl eax loc leave ret lfe2 size bar bar globl foo type foo function les instructions clés sont file loc file déclare chemin vers fichier associe identifiant file identifiant quot chemin fichier quot loc associe fichier numéro ligne colonne aux instructions succédant loc identifiant fichier ligne colonne solution proposée module compilateur qui génère les instructions est asmcomp i386 emit mlp plus particulièrement fonction fundecl let fundecl fundecl function name fundecl fun name fastcode flag fundecl fun fast globl emit symbol fundecl fun name emit symbol fundecl fun name clflags gprofile then emit profile let frame size then subl emit int esp emit label tailrec entry point emit all true fundecl fun body list iter emit call call sites emit call bound errors list iter emit float constant float constants match config system with quot linux elf quot quot bsd elf quot quot gnu quot type emit symbol fundecl fun name function size emit symbol fundecl fun name emit symbol fundecl fun name hors nous avons disposition que variable fundecl type fundecl fun name string fun body instruction fun fast bool type instruction mutable desc instruction desc mutable next instruction arg reg array res reg array dbg debuginfo live reg set bien attribut dbg sur les instructions mais est rarement renseigné une compilation avec option dlinear permet voir décidé ajouter attribut fun dbg debuginfo sur fundecl remplir dans toutes les phases compilation serait peut être plus judicieux travailler sur attribut dbg des instructions car cela permettrait par suite indiquer les lignes chaque instruction valgrind mais aussi gdb patch est pas optimisé car répète instruction file pour chaque loc donc chaque entête fonction nous avons file loc patch sur branche release311 voyons maintenant apporte patch résultats avec gdb ocamlopt inline gdb out gdb break breakpoint 0x8049940 file line gdb run starting program home alex callgraph out breakpoint camlt foo let foo current language auto currently asm gdb backtrace camlt foo 0x0804c570 camlt entry 0x0806e4b7 caml start program gdb step camlt bar let bar gdb list let bar let foo bar let résultats avec gprof ocamlopt inline out gprof file home alex callgraph let bar thread delay let foo bar let let closure print int foo closure top lines line count execution summary executable lines this file lines executed 100 percent the file executed total number line executions average executions per line résultats avec valgrind kcachegrind ocamlopt inline valgrind tool callgrind out callgrind annotate callgrind out 2152 user annotated source let bar 715 thread camlthread delay thread delay let foo 723 camlt bar bar let let closure 692 pervasives camlpervasives output string 215 312 pervasives camlpervasives string int 154 726 camlt foo print int foo closure kcachegrind callgrind out 2152 après peut espérer encore tas améliorations comme des breakpoints sur importe quelle ligne caml pluging gdb pour pouvoir lire des valeurs pendant break","a:1:{s:3:\"tag\";a:5:{i:0;s:5:\"debug\";i:1;s:11:\"kcachegrind\";i:2;s:8:\"valgrind\";i:3;s:3:\"gdb\";i:4;s:5:\"ocaml\";}}","1","0","1","1","4","0","0"
"445940","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18841","2009-09-30 18:27:00","Europe/Paris","2009-09-30 16:27:13","2009-10-01 17:35:34","","post","xhtml","2009/09/30/Headless-xulrunner","en","Headless xulrunner","","","Here is a summary on how to run a xulrunner application on an headless computer, or more commonly just launch xulrunner in a command line with no windows.<br /><br />\r\nBy default, xulrunner try to open a XUL window defined in the \"\"toolkit.defaultChromeURI\"\" preference, so you have to set this one to an empty value. <br /><br />\r\nThen you need to have a running X server, even if it never open any window ... one simple and lightweight solution is running Xvfb. But any other X server will do the work! <br /><br />Finally, I suggest you to take the <a hreflang=\"en\" href=\"http://releases.mozilla.org/pub/mozilla.org/xulrunner/releases/1.9.0.14/runtimes/\">1.9.0.14 xulrunner release</a> which has less painfull dependencies like libalsa (due to ogg support) and libdbus-glib.<br /><br />This will avoid this kind of errors :<br />\r\n<blockquote>\r\n<p>./xulrunner-bin: error while loading shared libraries: libasound.so.2: cannot open shared object file: No such file or directory<br />./xulrunner-bin: error while loading shared libraries: libdbus-glib-1.so.2: cannot open shared object file: No such file or directory</p>\r\n</blockquote>\r\nHow to write such a tutorial without a complete working out of the box hello world ?<br />Here is a sample command line application with linux xulrunner binaries : <a href=\"/public/headless-runner.tar.gz\">headless-runner.tar.gz</a><br />\r\n\r\n<pre>\r\n$ tar zxvf headless-runner.tar.gz\r\n$ cd headless-runner\r\n$ Xvfb :2\r\n$ export DISPLAY=:2\r\n$ ./headless -ls -filesize application.ini\r\nLS :\r\n - application.ini\r\n - a.out\r\n - tests\r\n - components\r\n - defaults\r\n - updates\r\n - extensions\r\n - xulrunner-1.9.2a2pre.en-US.linux-x86_64.tar.bz2\r\n - xulrunner\r\n - headless\r\n\r\n$ ./headless -filesize application.ini\r\nFile size of : application.ini\r\n  243\r\n</pre>\r\nThe main code is in the file components/nsCommandLineHandler.js\r\n<pre>\r\nCommandLineHandler.prototype.handle = function(aCmdLine){\r\n  \r\n  var toggle = aCmdLine.handleFlag(\"ls\", false);\r\n  if (toggle) {\r\n    dump(\"LS : \n\");\r\n    var list = aCmdLine.workingDirectory.directoryEntries;\r\n    while(list.hasMoreElements()) {\r\n      var file = list.getNext().QueryInterface(Components.interfaces.nsIFile);\r\n      dump(\" - \"+file.leafName+\"\n\");\r\n    }\r\n    dump(\"\n\");\r\n  }\r\n\r\n  var filesize = aCmdLine.handleFlagWithParam(\"filesize\", false);\r\n  if (filesize) {\r\n    dump(\"File size of : \"+filesize+\"\n\");\r\n    var file = aCmdLine.resolveFile(filesize);\r\n    if (!file)\r\n      return dump(\"Unable to find this file\n\");\r\n    dump(\"  \"+file.fileSize+\"\n\");\r\n  }\r\n}\r\n</pre>\r\n\r\nFor more information, check the <a hreflang=\"en\" href=\"http://mxr.mozilla.org/mozilla-central/source/toolkit/components/commandlines/public/nsICommandLine.idl\">nsICommandLine</a> interface of the aCmdLine object.<br/>\r\n<br />\r\nLast but not least, why do I try to use Xulrunner in command line whereas <a href=\"https://developer.mozilla.org/en/xpcshell\">xpcshell</a> and \"<a href=\"https://developer.mozilla.org/En/SpiderMonkey/Introduction_to_the_JavaScript_shell\">js</a>\" commands exists?!\r\n<ul>\r\n <li><strong>First:</strong> Some tools like <a href=\"https://developer.mozilla.org/en/McCoy\">Mccoy</a> are bundled as xulrunner application. And you may launch these tools on headless servers in order to build, for example, continuous integration tools!</li>\r\n<li><strong>Second:</strong> JS shell allow you tu use only pure Javascript; Xpcshell expose all XPCOM but some part of Mozilla environnement are disabled! I was unabled to create a &lt;canvas&gt; element in xpcshell. There is no way to create a XUL/HTML document/element with XPCOM and hiddenWindow is disabled ... So the only solution to build a tool which takes website screenshots with &lt;canvas&gt; was using xulrunner!</li>\r\n</ul>","Here is a summary on how to run a xulrunner application on an headless\ncomputer, or more commonly just launch xulrunner in a command line with no\nwindows.<br />\n<br />\nBy default, xulrunner try to open a XUL window defined in the\n&quot;&quot;toolkit.defaultChromeURI&quot;&quot; preference, so you have to set this one to an\nempty value.<br />\n<br />\nThen you need to have a running X server, even if it never open any window ...\none simple and lightweight solution is running Xvfb. But any other X server\nwill do the work!<br />\n<br />\nFinally, I suggest you to take the <a hreflang=\"en\" href=\"http://releases.mozilla.org/pub/mozilla.org/xulrunner/releases/1.9.0.14/runtimes/\">\n1.9.0.14 xulrunner release</a> which has less painfull dependencies like\nlibalsa (due to ogg support) and libdbus-glib.<br />\n<br />\nThis will avoid this kind of errors :<br />\n<blockquote>\n<p>./xulrunner-bin: error while loading shared libraries: libasound.so.2:\ncannot open shared object file: No such file or directory<br />\n./xulrunner-bin: error while loading shared libraries: libdbus-glib-1.so.2:\ncannot open shared object file: No such file or directory</p>\n</blockquote>\nHow to write such a tutorial without a complete working out of the box hello\nworld ?<br />\nHere is a sample command line application with linux xulrunner binaries :\n<a href=\"/public/headless-runner.tar.gz\">headless-runner.tar.gz</a><br />\n<pre>\n$ tar zxvf headless-runner.tar.gz\n$ cd headless-runner\n$ Xvfb :2\n$ export DISPLAY=:2\n$ ./headless -ls -filesize application.ini\nLS :\n - application.ini\n - a.out\n - tests\n - components\n - defaults\n - updates\n - extensions\n - xulrunner-1.9.2a2pre.en-US.linux-x86_64.tar.bz2\n - xulrunner\n - headless\n\n$ ./headless -filesize application.ini\nFile size of : application.ini\n  243\n</pre>\nThe main code is in the file components/nsCommandLineHandler.js\n<pre>\nCommandLineHandler.prototype.handle = function(aCmdLine){\n  \n  var toggle = aCmdLine.handleFlag(&quot;ls&quot;, false);\n  if (toggle) {\n    dump(&quot;LS : \n&quot;);\n    var list = aCmdLine.workingDirectory.directoryEntries;\n    while(list.hasMoreElements()) {\n      var file = list.getNext().QueryInterface(Components.interfaces.nsIFile);\n      dump(&quot; - &quot;+file.leafName+&quot;\n&quot;);\n    }\n    dump(&quot;\n&quot;);\n  }\n\n  var filesize = aCmdLine.handleFlagWithParam(&quot;filesize&quot;, false);\n  if (filesize) {\n    dump(&quot;File size of : &quot;+filesize+&quot;\n&quot;);\n    var file = aCmdLine.resolveFile(filesize);\n    if (!file)\n      return dump(&quot;Unable to find this file\n&quot;);\n    dump(&quot;  &quot;+file.fileSize+&quot;\n&quot;);\n  }\n}\n</pre>\nFor more information, check the <a hreflang=\"en\" href=\"http://mxr.mozilla.org/mozilla-central/source/toolkit/components/commandlines/public/nsICommandLine.idl\">\nnsICommandLine</a> interface of the aCmdLine object.<br />\n<br />\nLast but not least, why do I try to use Xulrunner in command line whereas\n<a href=\"https://developer.mozilla.org/en/xpcshell\">xpcshell</a> and &quot;<a href=\"https://developer.mozilla.org/En/SpiderMonkey/Introduction_to_the_JavaScript_shell\">js</a>&quot;\ncommands exists?!\n<ul>\n<li><strong>First:</strong> Some tools like <a href=\"https://developer.mozilla.org/en/McCoy\">Mccoy</a> are bundled as xulrunner\napplication. And you may launch these tools on headless servers in order to\nbuild, for example, continuous integration tools!</li>\n<li><strong>Second:</strong> JS shell allow you tu use only pure Javascript;\nXpcshell expose all XPCOM but some part of Mozilla environnement are disabled!\nI was unabled to create a &lt;canvas&gt; element in xpcshell. There is no way\nto create a XUL/HTML document/element with XPCOM and hiddenWindow is disabled\n... So the only solution to build a tool which takes website screenshots with\n&lt;canvas&gt; was using xulrunner!</li>\n</ul>","","headless xulrunner here summary how run xulrunner application headless computer more commonly just launch xulrunner command line with windows default xulrunner try open xul window defined the quot quot toolkit defaultchromeuri quot quot preference you have set this one empty value then you need have running server even never open any window one simple and lightweight solution running xvfb but any other server will the work finally suggest you take the xulrunner release which has less painfull dependencies like libalsa due ogg support and libdbus glib this will avoid this kind errors xulrunner bin error while loading shared libraries libasound cannot open shared object file such file directory xulrunner bin error while loading shared libraries libdbus glib cannot open shared object file such file directory how write such tutorial without complete working out the box hello world here sample command line application with linux xulrunner binaries headless runner tar tar zxvf headless runner tar headless runner xvfb export display headless filesize application ini application ini out tests components defaults updates extensions xulrunner 2a2pre linux x86 tar bz2 xulrunner headless headless filesize application ini file size application ini 243 the main code the file components nscommandlinehandler commandlinehandler prototype handle function acmdline var toggle acmdline handleflag quot quot false toggle dump quot quot var list acmdline workingdirectory directoryentries while list hasmoreelements var file list getnext queryinterface components interfaces nsifile dump quot quot file leafname quot quot dump quot quot var filesize acmdline handleflagwithparam quot filesize quot false filesize dump quot file size quot filesize quot quot var file acmdline resolvefile filesize file return dump quot unable find this file quot dump quot quot file filesize quot quot for more information check the nsicommandline interface the acmdline object last but not least why try use xulrunner command line whereas xpcshell and quot quot commands exists first some tools like mccoy are bundled xulrunner application and you may launch these tools headless servers order build for example continuous integration tools second shell allow you use only pure javascript xpcshell expose all xpcom but some part mozilla environnement are disabled was unabled create canvas element xpcshell there way create xul html document element with xpcom and hiddenwindow disabled the only solution build tool which takes website screenshots with canvas was using xulrunner","a:1:{s:3:\"tag\";a:3:{i:0;s:9:\"xulrunner\";i:1;s:8:\"headless\";i:2;s:12:\"command line\";}}","1","0","1","1","6","0","0"
"449492","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18841","2009-10-16 12:34:00","Europe/Paris","2009-10-14 15:04:49","2009-10-30 23:36:03","","post","xhtml","2009/10/16/FoobarFox-:-JSCtypes-connecing-Foobar-into-Firefox!","en","FoobarFox : JSCtypes putting Foobar into your Firefox!","","","<p style=\"text-align:center\"><a href=\"/public/foofox_techno-barje.fr.xpi\" style=\"font-size: 2em;\">FoobarFox</a></p>\r\n<strong>FoobarFox features </strong>\r\n<ul>\r\n <li>Retrieve currently playing song information into your Firefox</li>\r\n <li>Automatically post to your twitter account all listening tracks</li>\r\n <li>Search for information on wikipedia, myspace or google</li>\r\n</ul>\r\n<strong>FoobarFox prerequisites </strong>\r\n<ul>\r\n <li>You have to be on Windows ...</li>\r\n <li>Need  <a href=\"http://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/latest-mozilla-1.9.2/\">Firefox 3.6b1pre nightly</a>\r\nor <a href=\"http://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/latest-trunk/\">Firefox 3.7a1pre nightly</a>\r\n</li>\r\n <li>Use <a href=\"http://www.foobar2000.org/\">Foobar</a> music player</li>\r\n</ul>\r\n\r\n<p style=\"text-align:center\">install <a href=\"/public/foofox_techno-barje.fr.xpi\" style=\"font-size: 1em;\">foofox@techno-barje.fr.xpi</a></p>\r\n\r\n<img src=\"/public/foobarfox-1.png\" alt=\"foobarfox\" style=\"margin: 0 auto; display: block; border: 2px solid black; margin-bottom: 5px;\" title=\"foobarfox\" />\r\n<img src=\"/public/foobarfox-2.png\" alt=\"foobarfox\" style=\"margin: 0 auto; display: block; border: 2px solid black;\" title=\"foobarfox\" /><br />\r\n\r\n<br /><br />\r\n\r\n<h3>Real world JSCtypes usage</h3>\r\nFoobarFox is not so usefull, it's mainly a proof of concept for JSCtypes capabilities. <br />\r\n\r\nLet's see how use JSCtypes to do fun things. You can copy paste this sample code into your JS Console while your foobar is playing something :\r\n<pre>\r\nComponents.utils.import(\"resource://gre/modules/ctypes.jsm\");\r\n\r\n/* Change the dll path if your main windows directory is not on C:\WINDOWS! */\r\nvar lib = ctypes.open(\"C:\\WINDOWS\\system32\\user32.dll\");\r\n\r\n/* Declare the signature of FindWindows function */\r\nvar findWindowEx = lib.declare(\"FindWindowW\",\r\n                               ctypes.stdcall_abi,\r\n                               ctypes.int32_t,\r\n                               ctypes.ustring,\r\n                               ctypes.int32_t);\r\n\r\n/* Search for Foobar windows by it's id */\r\n/* this ID is often changing of value at each release :/ */\r\nvar win = findWindowEx(\"{DA7CD0DE-1602-45e6-89A1-C2CA151E008E}/1\", 0);\r\nif (!win)\r\n  win = findWindowEx(\"{DA7CD0DE-1602-45e6-89A1-C2CA151E008E}\", 0);\r\nif (!win)\r\n  win = findWindowEx(\"{97E27FAA-C0B3-4b8e-A693-ED7881E99FC1}\", 0); \r\nif (!win)\r\n  win = findWindowEx(\"{E7076D1C-A7BF-4f39-B771-BCBE88F2A2A8}\", 0);\r\n\r\n/* Define another signature of windows API function */\r\nvar getWindowText = lib.declare(\"GetWindowTextW\",\r\n                               ctypes.stdcall_abi,\r\n                               ctypes.int32_t,\r\n                               ctypes.int32_t,\r\n                               ctypes.ustring,\r\n                               ctypes.int32_t);\r\n\r\n/* Fill the string buffer we give to JSCtypes call */\r\nvar text=\"\";\r\nvar max_len = 100;\r\nfor(var i=0; i &lt; max_len; i++)\r\n  text+=\" \";\r\nvar text_len = getWindowText(win,text,100);\r\n\r\n/* Extract song information from foobar window title */\r\nvar m = text.match(/(.*) - (?:\[([^#]+)([^\]]+)\] |)(.*) \[foobar2000.*\]/);\r\n\r\nvar musicinfo = {\r\n  artist : m[1],\r\n  album : m[2],\r\n  trackNumber : m[3],\r\n  track : m[4]\r\n};\r\nalert(musicinfo.toSource());\r\n</pre>\r\n\r\n<h3>JSCtypes current capabilities</h3>\r\n<p>\r\nAs I said in my <a href=\"/post/2009/10/12/JS-Ctypes\">previous post</a>, ctypes support in Firefox is limited and we can't use <i>struct</i>. So we're able to play only with libraries that wait string and int. You can even pass objects/structures, but only if they can be created by a function whose arguments support the same limitation. As you can see in the previous example, we're able to retrieve a pointer to a HWND object with FindWindowEx because it only wait string arguments. After that we give this pointer to getWindowText as a ctypes.int32_t.\r\n</p>\r\n\r\n<h3>JSCtypes current limitations</h3>\r\nNow, let's see a C++ code that can't be mapped into JSCtypes :\r\n<pre>\r\n// Add a notification to the tray.\r\nNOTIFYICONDATA nid = {0};\r\n\r\nnid.cbSize         = sizeof(nid);\r\nnid.uID            = 100;    \r\nnid.uFlags         = NIF_ICON;\r\nnid.hIcon          = LoadIcon(g_hInstance, MAKEINTRESOURCE(IDI_SAMPLEICON));\r\n\r\nShell_NotifyIcon(NIM_ADD, &nid);\r\n</pre>\r\n<p style=\"text-align: right\">source: <a href=\"http://msdn.microsoft.com/en-us/library/aa453686.aspx\">msdn</a></p>\r\nIn this case, we are neither able to create any NOTIFYICONDATA object, nor to set attributes on this structure.\r\n<br />\r\n<br/>\r\n\r\n<b>For more information</b>\r\n<ul>\r\n<li>\r\n<a href=\"https://wiki.mozilla.org/Jsctypes/api\">JSCtypes api</a>. But take care, this is a work in progress!\r\n</li>\r\n<li>\r\n Bug <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=513788\">513788</a> -  Revise js-facing API for js-ctypes.\r\n</li>\r\n<li>\r\n Bug <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=429551\">429551</a> -  add struct support to js-ctypes.\r\n</li>\r\n</ul>","<p style=\"text-align:center\"><a href=\"/public/foofox_techno-barje.fr.xpi\" style=\"font-size: 2em;\">FoobarFox</a></p>\n<strong>FoobarFox features</strong>\n<ul>\n<li>Retrieve currently playing song information into your Firefox</li>\n<li>Automatically post to your twitter account all listening tracks</li>\n<li>Search for information on wikipedia, myspace or google</li>\n</ul>\n<strong>FoobarFox prerequisites</strong>\n<ul>\n<li>You have to be on Windows ...</li>\n<li>Need <a href=\"http://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/latest-mozilla-1.9.2/\">Firefox\n3.6b1pre nightly</a> or <a href=\"http://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/latest-trunk/\">Firefox\n3.7a1pre nightly</a></li>\n<li>Use <a href=\"http://www.foobar2000.org/\">Foobar</a> music player</li>\n</ul>\n<p style=\"text-align:center\">install <a href=\"/public/foofox_techno-barje.fr.xpi\" style=\"font-size: 1em;\">foofox@techno-barje.fr.xpi</a></p>\n<img src=\"/public/foobarfox-1.png\" alt=\"foobarfox\" style=\"margin: 0 auto; display: block; border: 2px solid black; margin-bottom: 5px;\" title=\"foobarfox\" /> <img src=\"/public/foobarfox-2.png\" alt=\"foobarfox\" style=\"margin: 0 auto; display: block; border: 2px solid black;\" title=\"foobarfox\" /><br />\n<br />\n<br />\n<h3>Real world JSCtypes usage</h3>\nFoobarFox is not so usefull, it's mainly a proof of concept for JSCtypes\ncapabilities.<br />\nLet's see how use JSCtypes to do fun things. You can copy paste this sample\ncode into your JS Console while your foobar is playing something :\n<pre>\nComponents.utils.import(&quot;resource://gre/modules/ctypes.jsm&quot;);\n\n/* Change the dll path if your main windows directory is not on C:\WINDOWS! */\nvar lib = ctypes.open(&quot;C:\\WINDOWS\\system32\\user32.dll&quot;);\n\n/* Declare the signature of FindWindows function */\nvar findWindowEx = lib.declare(&quot;FindWindowW&quot;,\n                               ctypes.stdcall_abi,\n                               ctypes.int32_t,\n                               ctypes.ustring,\n                               ctypes.int32_t);\n\n/* Search for Foobar windows by it's id */\n/* this ID is often changing of value at each release :/ */\nvar win = findWindowEx(&quot;{DA7CD0DE-1602-45e6-89A1-C2CA151E008E}/1&quot;, 0);\nif (!win)\n  win = findWindowEx(&quot;{DA7CD0DE-1602-45e6-89A1-C2CA151E008E}&quot;, 0);\nif (!win)\n  win = findWindowEx(&quot;{97E27FAA-C0B3-4b8e-A693-ED7881E99FC1}&quot;, 0); \nif (!win)\n  win = findWindowEx(&quot;{E7076D1C-A7BF-4f39-B771-BCBE88F2A2A8}&quot;, 0);\n\n/* Define another signature of windows API function */\nvar getWindowText = lib.declare(&quot;GetWindowTextW&quot;,\n                               ctypes.stdcall_abi,\n                               ctypes.int32_t,\n                               ctypes.int32_t,\n                               ctypes.ustring,\n                               ctypes.int32_t);\n\n/* Fill the string buffer we give to JSCtypes call */\nvar text=&quot;&quot;;\nvar max_len = 100;\nfor(var i=0; i &lt; max_len; i++)\n  text+=&quot; &quot;;\nvar text_len = getWindowText(win,text,100);\n\n/* Extract song information from foobar window title */\nvar m = text.match(/(.*) - (?:\[([^#]+)([^\]]+)\] |)(.*) \[foobar2000.*\]/);\n\nvar musicinfo = {\n  artist : m[1],\n  album : m[2],\n  trackNumber : m[3],\n  track : m[4]\n};\nalert(musicinfo.toSource());\n</pre>\n<h3>JSCtypes current capabilities</h3>\n<p>As I said in my <a href=\"/post/2009/10/12/JS-Ctypes\">previous post</a>,\nctypes support in Firefox is limited and we can't use <i>struct</i>. So we're\nable to play only with libraries that wait string and int. You can even pass\nobjects/structures, but only if they can be created by a function whose\narguments support the same limitation. As you can see in the previous example,\nwe're able to retrieve a pointer to a HWND object with FindWindowEx because it\nonly wait string arguments. After that we give this pointer to getWindowText as\na ctypes.int32_t.</p>\n<h3>JSCtypes current limitations</h3>\nNow, let's see a C++ code that can't be mapped into JSCtypes :\n<pre>\n// Add a notification to the tray.\nNOTIFYICONDATA nid = {0};\n\nnid.cbSize         = sizeof(nid);\nnid.uID            = 100;    \nnid.uFlags         = NIF_ICON;\nnid.hIcon          = LoadIcon(g_hInstance, MAKEINTRESOURCE(IDI_SAMPLEICON));\n\nShell_NotifyIcon(NIM_ADD, &amp;nid);\n</pre>\n<p style=\"text-align: right\">source: <a href=\"http://msdn.microsoft.com/en-us/library/aa453686.aspx\">msdn</a></p>\nIn this case, we are neither able to create any NOTIFYICONDATA object, nor to\nset attributes on this structure.<br />\n<br />\n<b>For more information</b>\n<ul>\n<li><a href=\"https://wiki.mozilla.org/Jsctypes/api\">JSCtypes api</a>. But take\ncare, this is a work in progress!</li>\n<li>Bug <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=513788\">513788</a> - Revise\njs-facing API for js-ctypes.</li>\n<li>Bug <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=429551\">429551</a> - add struct\nsupport to js-ctypes.</li>\n</ul>","","foobarfox jsctypes putting foobar into your firefox foobarfox foobarfox features retrieve currently playing song information into your firefox automatically post your twitter account all listening tracks search for information wikipedia myspace google foobarfox prerequisites you have windows need firefox 6b1pre nightly firefox 7a1pre nightly use foobar music player install foofox techno barje xpi real world jsctypes usage foobarfox not usefull mainly proof concept for jsctypes capabilities let see how use jsctypes fun things you can copy paste this sample code into your console while your foobar playing something components utils import quot resource gre modules ctypes jsm quot change the dll path your main windows directory not windows var lib ctypes open quot windows system32 user32 dll quot declare the signature findwindows function var findwindowex lib declare quot findwindoww quot ctypes stdcall abi ctypes int32 ctypes ustring ctypes int32 search for foobar windows this often changing value each release var win findwindowex quot da7cd0de 1602 45e6 89a1 c2ca151e008e quot win win findwindowex quot da7cd0de 1602 45e6 89a1 c2ca151e008e quot win win findwindowex quot 97e27faa c0b3 4b8e a693 ed7881e99fc1 quot win win findwindowex quot e7076d1c a7bf 4f39 b771 bcbe88f2a2a8 quot define another signature windows api function var getwindowtext lib declare quot getwindowtextw quot ctypes stdcall abi ctypes int32 ctypes int32 ctypes ustring ctypes int32 fill the string buffer give jsctypes call var text quot quot var max len 100 for var max len text quot quot var text len getwindowtext win text 100 extract song information from foobar window title var text match foobar2000 var musicinfo artist album tracknumber track alert musicinfo tosource jsctypes current capabilities said previous post ctypes support firefox limited and can use struct able play only with libraries that wait string and int you can even pass objects structures but only they can created function whose arguments support the same limitation you can see the previous example able retrieve pointer hwnd object with findwindowex because only wait string arguments after that give this pointer getwindowtext ctypes int32 jsctypes current limitations now let see code that can mapped into jsctypes add notification the tray notifyicondata nid nid cbsize sizeof nid nid uid 100 nid uflags nif icon nid hicon loadicon hinstance makeintresource idi sampleicon shell notifyicon nim add amp nid source msdn this case are neither able create any notifyicondata object nor set attributes this structure for more information jsctypes api but take care this work progress bug 513788 revise facing api for ctypes bug 429551 add struct support ctypes","a:1:{s:3:\"tag\";a:5:{i:0;s:8:\"jsctypes\";i:1;s:9:\"js ctypes\";i:2;s:9:\"foobarfox\";i:3;s:6:\"foobar\";i:4;s:7:\"firefox\";}}","1","0","1","1","4","0","0"
"552021","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","44812","2010-10-04 23:46:00","Europe/Paris","2010-10-04 13:58:33","2010-10-04 22:50:34","","post","xhtml","2010/10/04/UIWebView-secrets-part1-memory-leaks-on-xmlhttprequest","fr","UIWebView secrets - part1 - memory leaks on xmlhttprequest","","","<p>\r\nMy first blog post on iphone subject reveal a big memory bug when using UIWebView component.\r\nThis is the (only one) component to display some HTML content in an iphone interface.\r\nUIWebView object has a lot of differents issues and I'm going to highlight the biggest of them.\r\nActually, all XMLHttpRequests used in javascript code are fully leaking!!! \r\nI mean when you do a request that retrieve 100ko of data, your memory used grow up for 100ko!\r\nThis bug is not always active, but almost always. \r\nIn fact the trigger to enable it is to simply open one link in your UIWebView. For example, clicking on a &lt;a&gt; link.\r\n</p>\r\n<p>\r\nBut let's look at a memory usage graph while we execute this <a href=\"/public/iphone-sdk/UIWebViewLeaks.zip\">simple test application</a>:\r\n<img src=\"/public/iphone-sdk/profile-xmlhttprequest-0-then-1-labeled.png\" alt=\"memory usage graph\" style=\"margin: 0 auto; display: block;\" title=\"memory usage graph\" />\r\n<ol>\r\n<li>Create the UIWebView object</li>\r\n<li>Load a local HTML test file</li>\r\n<li>Execute 3 XMLHttpRequest to google.com, notice how the memory is freed three times after each request!</li>\r\n<li>Trigger the leak by opening a page that redirect back to our test file</li>\r\n<li>Execute the same 3 XMLHttpRequest and look how much memory is used and totally leaked :/</li>\r\n<li>We clean the HTML document with document.body.innerHTML=''; (sometimes free some memory, when we have a lot of DOM objects)</li>\r\n<li>release the UIWebView (almost no memory freed, next post is going to analyse that)</li>\r\n</ol>\r\n<p style=\"text-align: center\">\r\n  <a href=\"/public/iphone-sdk/UIWebViewLeaks.zip\">Test Application</a>\r\n</p>\r\n\r\n<br />\r\nSo, to sum up, usually, when you execute this Javascript in a UIWebView:\r\n<pre>\r\n  var xmlhttp = new XMLHttpRequest();\r\n  xmlhttp.onreadystatechange = function() {\r\n    if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {\r\n      // Do whatever you want with the result\r\n      \r\n    }\r\n  };\r\n  xmlhttp.open(\"GET\", \"http://your.domain/your.request/...\", true);\r\n  xmlhttp.send();\r\n</pre>\r\nYour are going to have a big memory usage and leak a lot of data!\r\n\r\n<br/><br/>\r\n\r\n<p>\r\nBut there is a hack to solve this problem: revert what is done when you open a link.<br />\r\nIn fact, the key property which leads to this leak is the <em>WebKitCacheModelPreferenceKey</em> application setting.\r\nAnd when you open a link in a UIWebView, this property is automatically set to the value <em>\"1\"</em>.\r\nSo, the solution is to set it back to <em>0</em> everytime you open a link.\r\nYou may easily do this by adding a <em>UIWebViewDelegate</em> to your UIWebView :\r\n<pre>\r\n- (void)webViewDidFinishLoad:(UIWebView *)webView {\r\n  [[NSUserDefaults standardUserDefaults] setInteger:0 forKey:@\"WebKitCacheModelPreferenceKey\"];\r\n}\r\n</pre>\r\n</p>\r\n\r\nSo are you going to have much less crash due to \"Low Memory\" :)","<p>My first blog post on iphone subject reveal a big memory bug when using\nUIWebView component. This is the (only one) component to display some HTML\ncontent in an iphone interface. UIWebView object has a lot of differents issues\nand I'm going to highlight the biggest of them. Actually, all XMLHttpRequests\nused in javascript code are fully leaking!!! I mean when you do a request that\nretrieve 100ko of data, your memory used grow up for 100ko! This bug is not\nalways active, but almost always. In fact the trigger to enable it is to simply\nopen one link in your UIWebView. For example, clicking on a &lt;a&gt; link.</p>\n<p>But let's look at a memory usage graph while we execute this <a href=\"/public/iphone-sdk/UIWebViewLeaks.zip\">simple test application</a>: <img src=\"/public/iphone-sdk/profile-xmlhttprequest-0-then-1-labeled.png\" alt=\"memory usage graph\" style=\"margin: 0 auto; display: block;\" title=\"memory usage graph\" /></p>\n<ol>\n<li>Create the UIWebView object</li>\n<li>Load a local HTML test file</li>\n<li>Execute 3 XMLHttpRequest to google.com, notice how the memory is freed\nthree times after each request!</li>\n<li>Trigger the leak by opening a page that redirect back to our test file</li>\n<li>Execute the same 3 XMLHttpRequest and look how much memory is used and\ntotally leaked :/</li>\n<li>We clean the HTML document with document.body.innerHTML=''; (sometimes free\nsome memory, when we have a lot of DOM objects)</li>\n<li>release the UIWebView (almost no memory freed, next post is going to\nanalyse that)</li>\n</ol>\n<p style=\"text-align: center\"><a href=\"/public/iphone-sdk/UIWebViewLeaks.zip\">Test Application</a></p>\n<br />\nSo, to sum up, usually, when you execute this Javascript in a UIWebView:\n<pre>\n  var xmlhttp = new XMLHttpRequest();\n  xmlhttp.onreadystatechange = function() {\n    if (xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200) {\n      // Do whatever you want with the result\n      \n    }\n  };\n  xmlhttp.open(&quot;GET&quot;, &quot;http://your.domain/your.request/...&quot;, true);\n  xmlhttp.send();\n</pre>\nYour are going to have a big memory usage and leak a lot of data!<br />\n<br />\n<p>But there is a hack to solve this problem: revert what is done when you open\na link.<br />\nIn fact, the key property which leads to this leak is the\n<em>WebKitCacheModelPreferenceKey</em> application setting. And when you open a\nlink in a UIWebView, this property is automatically set to the value\n<em>&quot;1&quot;</em>. So, the solution is to set it back to <em>0</em> everytime you\nopen a link. You may easily do this by adding a <em>UIWebViewDelegate</em> to\nyour UIWebView :</p>\n<pre>\n- (void)webViewDidFinishLoad:(UIWebView *)webView {\n  [[NSUserDefaults standardUserDefaults] setInteger:0 forKey:@&quot;WebKitCacheModelPreferenceKey&quot;];\n}\n</pre>\nSo are you going to have much less crash due to &quot;Low Memory&quot; :)","","uiwebview secrets part1 memory leaks xmlhttprequest first blog post iphone subject reveal big memory bug when using uiwebview component this the only one component display some html content iphone interface uiwebview object has lot differents issues and going highlight the biggest them actually all xmlhttprequests used javascript code are fully leaking mean when you request that retrieve 100ko data your memory used grow for 100ko this bug not always active but almost always fact the trigger enable simply open one link your uiwebview for example clicking link but let look memory usage graph while execute this simple test application create the uiwebview object load local html test file execute xmlhttprequest google com notice how the memory freed three times after each request trigger the leak opening page that redirect back our test file execute the same xmlhttprequest and look how much memory used and totally leaked clean the html document with document body innerhtml sometimes free some memory when have lot dom objects release the uiwebview almost memory freed next post going analyse that test application sum usually when you execute this javascript uiwebview var xmlhttp new xmlhttprequest xmlhttp onreadystatechange function xmlhttp readystate amp amp xmlhttp status 200 whatever you want with the result xmlhttp open quot get quot quot http your domain your request quot true xmlhttp send your are going have big memory usage and leak lot data but there hack solve this problem revert what done when you open link fact the key property which leads this leak the webkitcachemodelpreferencekey application setting and when you open link uiwebview this property automatically set the value quot quot the solution set back everytime you open link you may easily this adding uiwebviewdelegate your uiwebview void webviewdidfinishload uiwebview webview nsuserdefaults standarduserdefaults setinteger forkey quot webkitcachemodelpreferencekey quot are you going have much less crash due quot low memory quot","a:1:{s:3:\"tag\";a:2:{i:0;s:4:\"leak\";i:1;s:9:\"UIWebView\";}}","1","0","1","1","7","0","0"
"456504","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18841","2009-11-02 00:21:00","Europe/Paris","2009-10-30 22:55:33","2009-11-01 23:24:38","","post","xhtml","2009/11/02/Catch-all-requests-to-a-specific-mime-type/file-extension-in-Firefox","fr","Catch all requests to a specific mime type/file extension in Firefox","","","Here is a Mozilla Javascript Module which allow to catch <ins>absolutely </ins>  all requests based on their Content-Type Http header (ie Mime type) or their filename.\r\n<p style=\"text-align:center\"><strong><a href=\"/public/contentTypeObserver.js\">contentTypeObserver.js</a></strong><br />(under LGPL License)</p>\r\nNormally, it would be simple to catch all firefox request by adding a nsIURIContentListener like this : \r\n<pre>\r\nComponents.classes[\"@mozilla.org/uriloader;1\"].getService(Components.interfaces.nsIURILoader).registerContentListener( ...nsIURIContentListener... );\r\n</pre>\r\nBut for some reason, this listener is bypassed <a href=\"http://mxr.mozilla.org/mozilla-central/source/uriloader/base/nsURILoader.cpp#403\">here</a> when the HTTP request contains a Content-Disposition header :(<br />\r\nSo I give you there all Mozilla black magic needed to catch really all requests.<br />\r\n<p style=\"text-align:center\"><b>Hello world </b></p>\r\n<pre>\r\nComponents.utils.import(\"resource://your-extension/contentTypeObserver.js\"); \r\nvar contentTypeObserver = {};\r\n\r\n// Tell if we must catch requests with this content-type\r\n// requestInfo is an object with 3 attributes : contentType, contentLength and fileName.\r\ncontentTypeObserver.getRequestListener = function (requestInfo) {\r\n  // Return a new instance of nsIWebProgressListener\r\n  // (a new instance to avoid conflicts with multiple simultaneous downloads)\r\n  return {\r\n    onStartRequest : function (request, context) {\r\n\r\n    },\r\n    onStopRequest : function (request, context, statusCode) {\r\n\r\n    },\r\n    onDataAvailable : function (request, context, inputStream, offset, count) {\r\n\r\n    }\r\n  };\r\n  // There is an helper function that allow to automatically save this request to a file,\r\n  // you just have to pass destinationFile argument which hold a nsIFile instance :\r\n  return createSaveToFileRequestListener(requestInfo, destinationFile, function () { dump(\"file : \"+destinationFile.spec+\" downloaded!\n\"); }\r\n}\r\n\r\naddContentTypeObserver(contentTypeObserver);\r\n</pre>","Here is a Mozilla Javascript Module which allow to catch <ins>absolutely</ins>\nall requests based on their Content-Type Http header (ie Mime type) or their\nfilename.\n<p style=\"text-align:center\"><strong><a href=\"/public/contentTypeObserver.js\">contentTypeObserver.js</a></strong><br />\n(under LGPL License)</p>\nNormally, it would be simple to catch all firefox request by adding a\nnsIURIContentListener like this :\n<pre>\nComponents.classes[&quot;@mozilla.org/uriloader;1&quot;].getService(Components.interfaces.nsIURILoader).registerContentListener( ...nsIURIContentListener... );\n</pre>\nBut for some reason, this listener is bypassed <a href=\"http://mxr.mozilla.org/mozilla-central/source/uriloader/base/nsURILoader.cpp#403\">\nhere</a> when the HTTP request contains a Content-Disposition header :(<br />\nSo I give you there all Mozilla black magic needed to catch really all\nrequests.<br />\n<p style=\"font-weight: bold; text-align: center\">Hello world</p>\n<pre>\nComponents.utils.import(&quot;resource://your-extension/contentTypeObserver.js&quot;); \nvar contentTypeObserver = {};\n\n// Tell if we must catch requests with this content-type\n// requestInfo is an object with 3 attributes : contentType, contentLength and fileName.\ncontentTypeObserver.getRequestListener = function (requestInfo) {\n  // Return a new instance of nsIWebProgressListener\n  // (a new instance to avoid conflicts with multiple simultaneous downloads)\n  return {\n    onStartRequest : function (request, context) {\n\n    },\n    onStopRequest : function (request, context, statusCode) {\n\n    },\n    onDataAvailable : function (request, context, inputStream, offset, count) {\n\n    }\n  };\n  // There is an helper function that allow to automatically save this request to a file,\n  // you just have to pass destinationFile argument which hold a nsIFile instance :\n  return createSaveToFileRequestListener(requestInfo, destinationFile, function () { dump(&quot;file : &quot;+destinationFile.spec+&quot; downloaded!\n&quot;); }\n}\n\naddContentTypeObserver(contentTypeObserver);\n</pre>","","catch all requests specific mime type file extension firefox here mozilla javascript module which allow catch absolutely all requests based their content type http header mime type their filename contenttypeobserver under lgpl license normally would simple catch all firefox request adding nsiuricontentlistener like this components classes quot mozilla org uriloader quot getservice components interfaces nsiuriloader registercontentlistener nsiuricontentlistener but for some reason this listener bypassed here when the http request contains content disposition header give you there all mozilla black magic needed catch really all requests hello world components utils import quot resource your extension contenttypeobserver quot var contenttypeobserver tell must catch requests with this content type requestinfo object with attributes contenttype contentlength and filename contenttypeobserver getrequestlistener function requestinfo return new instance nsiwebprogresslistener new instance avoid conflicts with multiple simultaneous downloads return onstartrequest function request context onstoprequest function request context statuscode ondataavailable function request context inputstream offset count there helper function that allow automatically save this request file you just have pass destinationfile argument which hold nsifile instance return createsavetofilerequestlistener requestinfo destinationfile function dump quot file quot destinationfile spec quot downloaded quot addcontenttypeobserver contenttypeobserver","a:1:{s:3:\"tag\";a:4:{i:0;s:21:\"nsIURIContentListener\";i:1;s:11:\"contenttype\";i:2;s:8:\"mimetype\";i:3;s:7:\"mozilla\";}}","1","0","1","1","4","0","0"
"307650","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18841","2008-12-11 19:51:00","Europe/Paris","2008-12-11 18:51:59","2008-12-12 00:56:12","","post","xhtml","2008/12/11/XUL-Profiler","fr","XUL Profiler","","","<p><img src=\"/public/addon_thumb.png\" alt=\"addon_thumb.png\" style=\"margin: 0 0 1em 1em; float: right;\" title=\"addon_thumb.png, dec 2008\" /> XUL\r\nProfiler&nbsp;? Qu'est-ce donc&nbsp;? Et bien c'est l'extension Firefox que\r\nj'ai pu développer chez <a href=\"http://www.yoono.com\">Yoono</a>. Elle a pour\r\nbut de donner des pistes aux développeurs XUL (mais aussi aux développeurs Web)\r\npour optimiser les performances de leurs applications.</p>\r\n<p>Pour l'instant, cette extension permet de récolter deux\r\ninformations&nbsp;:</p>\r\n<ul>\r\n<li>un callgraph Javascript&nbsp;: Chaque appel de fonction est consigné dans\r\nun arbre et classé par son temps d'exécution. On peut ainsi rapidement repérer\r\nles fonctions qui ralentissent le navigateur.</li>\r\n<li>une vidéo des rafraichissements de Firefox&nbsp;: Toutes les opérations de\r\nmise à jour graphique de firefox sont enregistrées dans une vidéo qui nous\r\npermet d'apprendre à optimiser notre Javascript ainsi que les CSS afin de\r\nsoulager Firefox dans son travail de layout.</li>\r\n</ul>\r\n<p>L'extension est disponible sur <a href=\"https://addons.mozilla.org/fr/firefox/addon/9954\">Mozilla addons</a></p>\r\n<p>Voici quelques résultats sur des exemples simples.</p>\r\n<h2>Callgraph Javascript</h2>\r\n<p>(<a href=\"/public/test-xulprofiler-callgraph.html\">Fichier html de test</a>) </p>\r\n<pre>\r\nfunction fun_root() {\r\n  fun_A();\r\n  fun_B();\r\n  fun_C();\r\n}\r\nfunction fun_A() {\r\n  dump(\"fun A\");\r\n}\r\nfunction fun_B() {\r\n  dump(\"fun B\");\r\n  var s=\"\";\r\n  fun_D();\r\n  for(var i=0; i<1000; i++) {\r\n    s+=\"CPU INTENSIVE FUNCTION\";\r\n    fun_D();\r\n  }\r\n  fun_D();\r\n}\r\nfunction fun_C() {\r\n  dump(\"fun C\");\r\n}\r\nfunction fun_D() {\r\n  dump(\"fun D\");\r\n}\r\n</pre>\r\n<p><img src=\"/public/test-xulprofiler-callgraph.png\" alt=\"test-xulprofiler-callgraph.png\" style=\"margin: 0 auto; display: block;\" title=\"test-xulprofiler-callgraph.png, dec 2008\" /></p>\r\n<p>On voit ici la hiérarchie des appels entre les fonction grâce à la présentation sous forme d'arbre, et l'on peut conclure que la majorité du temps de calcul de ce script est effectué dans la fonction \"fun_B\".</p>\r\n<h2>Paint events</h2>\r\n<p>(<a href=\"/public/test-xulprofiler-paint.html\">Fichier html de test</a>) </p>\r\n<pre>\r\nfunction delayEachInserts() {\r\n  for(var i=0;i<20;i++) {\r\n    window.setTimeout(insertItem,100*i,i);\r\n  }\r\n}\r\nfunction insertItem(i) {\r\n  var container=document.getElementById(\"container\");\r\n  var item=document.createElement(\"div\");\r\n  item.setAttribute(\"class\",\"item\");\r\n  item.textContent=\"Item \"+i;\r\n  container.appendChild(item);\r\n}\r\nwindow.addEventListener(\"load\",delayEachInserts,false);\r\n</pre>\r\n<p>&nbsp;<strong> =&gt; </strong><a style=\"font-weight: bold;\" href=\"/public/test-xulprofiler-paint-result.html\">Résutat</a></p>\r\n<p>Cet exemple montre que lorsqu'on ajoute un élement DOM, Firefox est obligé de rafraichir son conteneur à chaque ajout.</p>","<p><img src=\"/public/addon_thumb.png\" alt=\"addon_thumb.png\" style=\"margin: 0 0 1em 1em; float: right;\" title=\"addon_thumb.png, dec 2008\" /> XUL\nProfiler ? Qu'est-ce donc ? Et bien c'est l'extension Firefox que\nj'ai pu développer chez <a href=\"http://www.yoono.com\">Yoono</a>. Elle a pour\nbut de donner des pistes aux développeurs XUL (mais aussi aux développeurs Web)\npour optimiser les performances de leurs applications.</p>\n<p>Pour l'instant, cette extension permet de récolter deux\ninformations :</p>\n<ul>\n<li>un callgraph Javascript : Chaque appel de fonction est consigné dans\nun arbre et classé par son temps d'exécution. On peut ainsi rapidement repérer\nles fonctions qui ralentissent le navigateur.</li>\n<li>une vidéo des rafraichissements de Firefox : Toutes les opérations de\nmise à jour graphique de firefox sont enregistrées dans une vidéo qui nous\npermet d'apprendre à optimiser notre Javascript ainsi que les CSS afin de\nsoulager Firefox dans son travail de layout.</li>\n</ul>\n<p>L'extension est disponible sur <a href=\"https://addons.mozilla.org/fr/firefox/addon/9954\">Mozilla addons</a></p>\n<p>Voici quelques résultats sur des exemples simples.</p>\n<h2>Callgraph Javascript</h2>\n<p>(<a href=\"/public/test-xulprofiler-callgraph.html\">Fichier html de\ntest</a>)</p>\n<pre>\nfunction fun_root() {\n  fun_A();\n  fun_B();\n  fun_C();\n}\nfunction fun_A() {\n  dump(&quot;fun A&quot;);\n}\nfunction fun_B() {\n  dump(&quot;fun B&quot;);\n  var s=&quot;&quot;;\n  fun_D();\n  for(var i=0; i&lt;1000; i++) {\n    s+=&quot;CPU INTENSIVE FUNCTION&quot;;\n    fun_D();\n  }\n  fun_D();\n}\nfunction fun_C() {\n  dump(&quot;fun C&quot;);\n}\nfunction fun_D() {\n  dump(&quot;fun D&quot;);\n}\n</pre>\n<p><img src=\"/public/test-xulprofiler-callgraph.png\" alt=\"test-xulprofiler-callgraph.png\" style=\"margin: 0 auto; display: block;\" title=\"test-xulprofiler-callgraph.png, dec 2008\" /></p>\n<p>On voit ici la hiérarchie des appels entre les fonction grâce à la\nprésentation sous forme d'arbre, et l'on peut conclure que la majorité du temps\nde calcul de ce script est effectué dans la fonction &quot;fun_B&quot;.</p>\n<h2>Paint events</h2>\n<p>(<a href=\"/public/test-xulprofiler-paint.html\">Fichier html de test</a>)</p>\n<pre>\nfunction delayEachInserts() {\n  for(var i=0;i&lt;20;i++) {\n    window.setTimeout(insertItem,100*i,i);\n  }\n}\nfunction insertItem(i) {\n  var container=document.getElementById(&quot;container&quot;);\n  var item=document.createElement(&quot;div&quot;);\n  item.setAttribute(&quot;class&quot;,&quot;item&quot;);\n  item.textContent=&quot;Item &quot;+i;\n  container.appendChild(item);\n}\nwindow.addEventListener(&quot;load&quot;,delayEachInserts,false);\n</pre>\n<p>  <strong>=&gt;</strong> <a style=\"font-weight: bold;\" href=\"/public/test-xulprofiler-paint-result.html\">Résutat</a></p>\n<p>Cet exemple montre que lorsqu'on ajoute un élement DOM, Firefox est obligé\nde rafraichir son conteneur à chaque ajout.</p>","","xul profiler xul profiler est donc bien est extension firefox que développer chez yoono elle pour but donner des pistes aux développeurs xul mais aussi aux développeurs web pour optimiser les performances leurs applications pour instant cette extension permet récolter deux informations callgraph javascript chaque appel fonction est consigné dans arbre classé par son temps exécution peut ainsi rapidement repérer les fonctions qui ralentissent navigateur une vidéo des rafraichissements firefox toutes les opérations mise jour graphique firefox sont enregistrées dans une vidéo qui nous permet apprendre optimiser notre javascript ainsi que les css afin soulager firefox dans son travail layout extension est disponible sur mozilla addons voici quelques résultats sur des exemples simples callgraph javascript fichier html test function fun root fun fun fun function fun dump quot fun quot function fun dump quot fun quot var quot quot fun for var 1000 quot cpu intensive function quot fun fun function fun dump quot fun quot function fun dump quot fun quot voit ici hiérarchie des appels entre les fonction grâce présentation sous forme arbre peut conclure que majorité temps calcul script est effectué dans fonction quot fun quot paint events fichier html test function delayeachinserts for var window settimeout insertitem 100 function insertitem var container document getelementbyid quot container quot var item document createelement quot div quot item setattribute quot class quot quot item quot item textcontent quot item quot container appendchild item window addeventlistener quot load quot delayeachinserts false résutat cet exemple montre que lorsqu ajoute élement dom firefox est obligé rafraichir son conteneur chaque ajout","a:1:{s:3:\"tag\";a:6:{i:0;s:7:\"firefox\";i:1;s:13:\"mozafterpaint\";i:2;s:7:\"mozilla\";i:3;s:8:\"profiler\";i:4;s:3:\"xul\";i:5;s:12:\"xul profiler\";}}","1","0","1","1","0","0","0"
"457209","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18842","2009-11-02 23:47:00","Europe/Paris","2009-11-02 22:47:49","2009-11-02 22:52:09","","post","wiki","2009/11/02/Ocaml-native-code-debugging","fr","Ocaml native code debugging","","","Note: english translation of my [previous post|/post/2008/11/09/Ocaml-native-code-debugging] \r\n\r\n((/public/./.t-caml-valid-callgraph_s.jpg|t-caml-valid-callgraph.png|R|t-caml-valid-callgraph.png, juin 2008))\r\n\r\nNow that [Improve gnu ELF|http://caml.inria.fr/mantis/bug_view_page.php?bug_id=4642|en] bug is commited in ocaml 3.11+, KCachegrind can generate beautifull callgraphs.\r\n\r\nThis patch consist in adding .size instructions (in ELF assembly code) in order to allow valgrind to interpret all symbols (camlT_entry, camlT_foo, camlT_bar, ..) and it can so display symbols names instead of their hexadecimal numbers!!!\r\n\r\n!!!! ELF instructions for debug\r\nNow, we may want these tools to be able to display file name and line number for all functions.(File name is present in symbols name but it doesn't allow full usage of these tools)\r\n\r\nLet's see how's gcc working :\r\n///\r\n  int bar(int a) {\r\n        return 1+a;\r\n  }\r\n  \r\n  int foo(int a) {\r\n        return 2+bar(a);\r\n  }\r\n  \r\n  int main() {\r\n        foo(3);\r\n  }\r\n///\r\n\r\n///\r\n  $ gcc -O0 -g -S t.c\r\n///\r\n\r\n///\r\n  .globl bar\r\n        .type   bar, @function\r\n  bar:\r\n  .LFB2:\r\n        .file 1 \"t.c\"\r\n        .loc 1 1 0\r\n        pushq   %rbp\r\n  .LCFI0:\r\n        movq    %rsp, %rbp\r\n  .LCFI1:\r\n        movl    %edi, -4(%rbp)\r\n        .loc 1 2 0\r\n        movl    -4(%rbp), %eax\r\n        incl    %eax\r\n        .loc 1 3 0\r\n        leave\r\n        ret\r\n  .LFE2:\r\n        .size   bar, .-bar\r\n  .globl foo\r\n        .type   foo, @function\r\n///\r\n\r\nUsefull instructions are .file and .loc :\r\n* .file define a file path and bind it to an id %%%\r\n-> .file $file_id\"$file_path\"\r\n* .loc define a file, a line and column number to the next instructions %%%\r\n-> .loc $file_id$ $line$ $column$\r\n\r\n!!!! Suggested solution\r\nThe compiler module which emits these instructions is :\r\n[asmcomp/i386/emit.mlp|http://camlcvs.inria.fr/cgi-bin/cvsweb/ocaml/asmcomp/i386/emit.mlp?rev=1.41.2.2;only_with_tag=release311|en]%%%\r\nAnd especially this \"fundecl\" function :\r\n///\r\n  let fundecl fundecl =\r\n    function_name := fundecl.fun_name;\r\n    fastcode_flag := fundecl.fun_fast;\r\n    (* ... *)\r\n    `	.globl	{emit_symbol fundecl.fun_name}\n`;\r\n    `{emit_symbol fundecl.fun_name}:\n`;\r\n    if !Clflags.gprofile then emit_profile();\r\n    let n = frame_size() - 4 in\r\n    if n > 0 then\r\n      `	subl	${emit_int n}, %esp\n`;\r\n    `{emit_label !tailrec_entry_point}:\n`;\r\n    emit_all true fundecl.fun_body;\r\n    List.iter emit_call_gc !call_gc_sites;\r\n    emit_call_bound_errors ();\r\n    List.iter emit_float_constant !float_constants;\r\n    match Config.system with\r\n      \"linux_elf\" | \"bsd_elf\" | \"gnu\" ->\r\n        `	.type	{emit_symbol fundecl.fun_name},@function\n`;\r\n        `	.size	{emit_symbol fundecl.fun_name},.-{emit_symbol fundecl.fun_name}\n`\r\n    | _ -> ()\r\n///\r\nExcept that the only data we have is the fundecl variable :\r\n///\r\n  type fundecl = \r\n  { fun_name: string;\r\n    fun_body: instruction;\r\n    fun_fast: bool } \r\n  type instruction =\r\n  { mutable desc: instruction_desc;\r\n    mutable next: instruction;\r\n    arg: Reg.t array;\r\n    res: Reg.t array;\r\n    dbg: Debuginfo.t;\r\n    live: Reg.Set.t }\r\n///\r\nThere is a dbg attribute on instructions but it's rarely set. (One compilation with -dlinear option allow to see this fact)\r\n\r\nI've decided to add a ''fun_dbg : Debuginfo.t'' attribute on \"fundecl\" type and fill it in all compilation steps. It may more clever to work on this (often-empty) \"dbg\" attribute ? (it would allow to add position information on all instructions, it can be usefull for valgrind and gdb)\r\nThis patch is not optimised because it repeats .file instruction for each .loc and so it repeats it on each function header.\r\n\r\n-> [Patch based on release311 branch, but works on current trunk|/public/patch-file-and-loc-v1-cvs-2008-11-11.patch]\r\n%%%\r\n%%%\r\n\r\nNow let's see what brings this patch\r\n\r\n!!!! gdb results\r\n///\r\n  $ ocamlopt -g -inline 0 t.ml\r\n  $ gdb a.out\r\n  (gdb) break t.ml:6\r\n  Breakpoint 1 at 0x8049940: file t.ml, line 6.\r\n  (gdb) run\r\n  Starting program: /home/alex/callgraph/a.out \r\n  \r\n  Breakpoint 1, camlT__foo_60 () at t.ml:6\r\n  6       let foo i  =\r\n  Current language:  auto; currently asm\r\n\r\n  (gdb) backtrace\r\n  #0  camlT__foo_60 () at t.ml:7\r\n  #1  0x0804c570 in camlT__entry () at t.ml:12\r\n  #2  0x0806e4b7 in caml_start_program ()\r\n  \r\n  (gdb) step 1\r\n  camlT__bar_58 () at t.ml:2\r\n  2       let bar i =\r\n  \r\n  (gdb) list\r\n  1\r\n  2       let bar i =\r\n  3               1+i\r\n  4       ;;\r\n  5\r\n  6       let foo i  =\r\n  7               2+(bar i )\r\n  8       ;;\r\n  9\r\n  10      let () =\r\n///\r\n\r\n!!!! gprof results\r\n///\r\n  $ ocamlopt -g -p -inline 0 t.ml\r\n  $ ./a.out\r\n  $ gprof -A\r\n  *** File /home/alex/callgraph/t.ml:\r\n                  \r\n           1 -> let bar i =\r\n                        Thread.delay 3.0;\r\n                        1+i\r\n                ;;\r\n                \r\n           1 -> let foo i  =\r\n                        2+(bar i )\r\n                ;;\r\n                \r\n                let () =\r\n           1 ->         let closure() = 3 in\r\n                        print_int ( foo (closure()) )\r\n                ;;\r\n                \r\n  Top 10 Lines:\r\n\r\n     Line      Count\r\n        2          1\r\n        7          1\r\n       12          1\r\n\r\n  Execution Summary:\r\n\r\n        3   Executable lines in this file\r\n        3   Lines executed\r\n   100.00   Percent of the file executed\r\n\r\n        3   Total number of line executions\r\n     1.00   Average executions per line\r\n///\r\n\r\n\r\n!!!! valgrind/kcachegrind results\r\n///\r\n  $ ocamlopt -g -inline 0 t.ml\r\n  $ valgrind --tool=callgrind ./a.out\r\n  $ callgrind_annotate callgrind.out.2152 t.ml\r\n  --------------------------------------------------------------------------------\r\n  -- User-annotated source: t.ml\r\n  --------------------------------------------------------------------------------\r\n  .  \r\n  8  let bar i =\r\n  77,715  => thread.ml:camlThread__delay_75 (1x)\r\n  .      Thread.delay 3.0;\r\n  .      1+i\r\n  .  ;;\r\n  .  \r\n  3  let foo i  = \r\n  77,723  => t.ml:camlT__bar_58 (1x)\r\n  .      2+(bar i )\r\n  .  ;;\r\n  .  \r\n  .  let () =\r\n  13          let closure() = 3 in\r\n  1,692  => pervasives.ml:camlPervasives__output_string_215 (1x)\r\n  2,312  => pervasives.ml:camlPervasives__string_of_int_154 (1x)\r\n  77,726  => t.ml:camlT__foo_60 (1x)\r\n  .      print_int ( foo (closure()) )\r\n  .  ;;\r\n  .  \r\n  $ kcachegrind callgrind.out.2152\r\n///\r\n((/public/./.kcachegrind-file-and-line_m.jpg|kcachegrind-file-and-line.png|C|kcachegrind-file-and-line.png, nov 2008))\r\n\r\n%%%\r\n%%%\r\n\r\n!!!! And next ?\r\nWe first need to wait approval for this new feature by ocaml community, I've submitted it [there|http://caml.inria.fr/mantis/view.php?id=4888|en].%%%\r\nI someone from INRIA read this ... Don't hesitate to contact me, I'm open to work on a different approach.%%%\r\nAfter that, we may hope a lot of new features, like :\r\n* breakpoints on any caml line (not only function call)\r\n* gdb plugin allowing to read value in a breakpoint!","<p>Note: english translation of my <a href=\"/post/2008/11/09/Ocaml-native-code-debugging\">previous post</a></p>\n<p><img src=\"/public/./.t-caml-valid-callgraph_s.jpg\" alt=\"t-caml-valid-callgraph.png\" style=\"float:right; margin: 0 0 1em 1em;\" title=\"t-caml-valid-callgraph.png, juin 2008\" /></p>\n<p>Now that <a href=\"http://caml.inria.fr/mantis/bug_view_page.php?bug_id=4642\" hreflang=\"en\">Improve gnu ELF</a> bug is commited in ocaml 3.11+, KCachegrind\ncan generate beautifull callgraphs.</p>\n<p>This patch consist in adding .size instructions (in ELF assembly code) in\norder to allow valgrind to interpret all symbols (camlT_entry, camlT_foo,\ncamlT_bar, ..) and it can so display symbols names instead of their hexadecimal\nnumbers!!!</p>\n<h2>ELF instructions for debug</h2>\n<p>Now, we may want these tools to be able to display file name and line number\nfor all functions.(File name is present in symbols name but it doesn't allow\nfull usage of these tools)</p>\n<p>Let's see how's gcc working :</p>\n<pre>\n  int bar(int a) {\n        return 1+a;\n  }\n  \n  int foo(int a) {\n        return 2+bar(a);\n  }\n  \n  int main() {\n        foo(3);\n  }\n</pre>\n<pre>\n  $ gcc -O0 -g -S t.c\n</pre>\n<pre>\n  .globl bar\n        .type   bar, @function\n  bar:\n  .LFB2:\n        .file 1 &quot;t.c&quot;\n        .loc 1 1 0\n        pushq   %rbp\n  .LCFI0:\n        movq    %rsp, %rbp\n  .LCFI1:\n        movl    %edi, -4(%rbp)\n        .loc 1 2 0\n        movl    -4(%rbp), %eax\n        incl    %eax\n        .loc 1 3 0\n        leave\n        ret\n  .LFE2:\n        .size   bar, .-bar\n  .globl foo\n        .type   foo, @function\n</pre>\n<p>Usefull instructions are .file and .loc :</p>\n<ul>\n<li>.file define a file path and bind it to an id<br /></li>\n</ul>\n<p>-&gt; .file $file_id&quot;$file_path&quot;</p>\n<ul>\n<li>.loc define a file, a line and column number to the next\ninstructions<br /></li>\n</ul>\n<p>-&gt; .loc $file_id$ $line$ $column$</p>\n<h2>Suggested solution</h2>\n<p>The compiler module which emits these instructions is : <a href=\"http://camlcvs.inria.fr/cgi-bin/cvsweb/ocaml/asmcomp/i386/emit.mlp?rev=1.41.2.2;only_with_tag=release311\" hreflang=\"en\">asmcomp/i386/emit.mlp</a><br />\nAnd especially this &quot;fundecl&quot; function :</p>\n<pre>\n  let fundecl fundecl =\n    function_name := fundecl.fun_name;\n    fastcode_flag := fundecl.fun_fast;\n    (* ... *)\n    `   .globl  {emit_symbol fundecl.fun_name}\n`;\n    `{emit_symbol fundecl.fun_name}:\n`;\n    if !Clflags.gprofile then emit_profile();\n    let n = frame_size() - 4 in\n    if n &gt; 0 then\n      ` subl    ${emit_int n}, %esp\n`;\n    `{emit_label !tailrec_entry_point}:\n`;\n    emit_all true fundecl.fun_body;\n    List.iter emit_call_gc !call_gc_sites;\n    emit_call_bound_errors ();\n    List.iter emit_float_constant !float_constants;\n    match Config.system with\n      &quot;linux_elf&quot; | &quot;bsd_elf&quot; | &quot;gnu&quot; -&gt;\n        `       .type   {emit_symbol fundecl.fun_name},@function\n`;\n        `       .size   {emit_symbol fundecl.fun_name},.-{emit_symbol fundecl.fun_name}\n`\n    | _ -&gt; ()\n</pre>\n<p>Except that the only data we have is the fundecl variable :</p>\n<pre>\n  type fundecl = \n  { fun_name: string;\n    fun_body: instruction;\n    fun_fast: bool } \n  type instruction =\n  { mutable desc: instruction_desc;\n    mutable next: instruction;\n    arg: Reg.t array;\n    res: Reg.t array;\n    dbg: Debuginfo.t;\n    live: Reg.Set.t }\n</pre>\n<p>There is a dbg attribute on instructions but it's rarely set. (One\ncompilation with -dlinear option allow to see this fact)</p>\n<p>I've decided to add a <em>fun_dbg : Debuginfo.t</em> attribute on\n&quot;fundecl&quot; type and fill it in all compilation steps. It may more clever to work\non this (often-empty) &quot;dbg&quot; attribute ? (it would allow to add position\ninformation on all instructions, it can be usefull for valgrind and gdb) This\npatch is not optimised because it repeats .file instruction for each .loc and\nso it repeats it on each function header.</p>\n<p>-&gt; <a href=\"/public/patch-file-and-loc-v1-cvs-2008-11-11.patch\">Patch\nbased on release311 branch, but works on current trunk</a><br />\n<br /></p>\n<p>Now let's see what brings this patch</p>\n<h2>gdb results</h2>\n<pre>\n  $ ocamlopt -g -inline 0 t.ml\n  $ gdb a.out\n  (gdb) break t.ml:6\n  Breakpoint 1 at 0x8049940: file t.ml, line 6.\n  (gdb) run\n  Starting program: /home/alex/callgraph/a.out \n  \n  Breakpoint 1, camlT__foo_60 () at t.ml:6\n  6       let foo i  =\n  Current language:  auto; currently asm\n\n  (gdb) backtrace\n  #0  camlT__foo_60 () at t.ml:7\n  #1  0x0804c570 in camlT__entry () at t.ml:12\n  #2  0x0806e4b7 in caml_start_program ()\n  \n  (gdb) step 1\n  camlT__bar_58 () at t.ml:2\n  2       let bar i =\n  \n  (gdb) list\n  1\n  2       let bar i =\n  3               1+i\n  4       ;;\n  5\n  6       let foo i  =\n  7               2+(bar i )\n  8       ;;\n  9\n  10      let () =\n</pre>\n<h2>gprof results</h2>\n<pre>\n  $ ocamlopt -g -p -inline 0 t.ml\n  $ ./a.out\n  $ gprof -A\n  *** File /home/alex/callgraph/t.ml:\n                  \n           1 -&gt; let bar i =\n                        Thread.delay 3.0;\n                        1+i\n                ;;\n                \n           1 -&gt; let foo i  =\n                        2+(bar i )\n                ;;\n                \n                let () =\n           1 -&gt;         let closure() = 3 in\n                        print_int ( foo (closure()) )\n                ;;\n                \n  Top 10 Lines:\n\n     Line      Count\n        2          1\n        7          1\n       12          1\n\n  Execution Summary:\n\n        3   Executable lines in this file\n        3   Lines executed\n   100.00   Percent of the file executed\n\n        3   Total number of line executions\n     1.00   Average executions per line\n</pre>\n<h2>valgrind/kcachegrind results</h2>\n<pre>\n  $ ocamlopt -g -inline 0 t.ml\n  $ valgrind --tool=callgrind ./a.out\n  $ callgrind_annotate callgrind.out.2152 t.ml\n  --------------------------------------------------------------------------------\n  -- User-annotated source: t.ml\n  --------------------------------------------------------------------------------\n  .  \n  8  let bar i =\n  77,715  =&gt; thread.ml:camlThread__delay_75 (1x)\n  .      Thread.delay 3.0;\n  .      1+i\n  .  ;;\n  .  \n  3  let foo i  = \n  77,723  =&gt; t.ml:camlT__bar_58 (1x)\n  .      2+(bar i )\n  .  ;;\n  .  \n  .  let () =\n  13          let closure() = 3 in\n  1,692  =&gt; pervasives.ml:camlPervasives__output_string_215 (1x)\n  2,312  =&gt; pervasives.ml:camlPervasives__string_of_int_154 (1x)\n  77,726  =&gt; t.ml:camlT__foo_60 (1x)\n  .      print_int ( foo (closure()) )\n  .  ;;\n  .  \n  $ kcachegrind callgrind.out.2152\n</pre>\n<p><img src=\"/public/./.kcachegrind-file-and-line_m.jpg\" alt=\"kcachegrind-file-and-line.png\" style=\"display:block; margin:0 auto;\" title=\"kcachegrind-file-and-line.png, nov 2008\" /></p>\n<p><br />\n<br /></p>\n<h2>And next ?</h2>\n<p>We first need to wait approval for this new feature by ocaml community, I've\nsubmitted it <a href=\"http://caml.inria.fr/mantis/view.php?id=4888\" hreflang=\"en\">there</a>.<br />\nI someone from INRIA read this ... Don't hesitate to contact me, I'm open to\nwork on a different approach.<br />\nAfter that, we may hope a lot of new features, like :</p>\n<ul>\n<li>breakpoints on any caml line (not only function call)</li>\n<li>gdb plugin allowing to read value in a breakpoint!</li>\n</ul>","","ocaml native code debugging note english translation previous post now that improve gnu elf bug commited ocaml kcachegrind can generate beautifull callgraphs this patch consist adding size instructions elf assembly code order allow valgrind interpret all symbols camlt entry camlt foo camlt bar and can display symbols names instead their hexadecimal numbers elf instructions for debug now may want these tools able display file name and line number for all functions file name present symbols name but doesn allow full usage these tools let see how gcc working int bar int return int foo int return bar int main foo gcc globl bar type bar function bar lfb2 file quot quot loc pushq rbp lcfi0 movq rsp rbp lcfi1 movl edi rbp loc movl rbp eax incl eax loc leave ret lfe2 size bar bar globl foo type foo function usefull instructions are file and loc file define file path and bind file file quot file path quot loc define file line and column number the next instructions loc file line column suggested solution the compiler module which emits these instructions asmcomp i386 emit mlp and especially this quot fundecl quot function let fundecl fundecl function name fundecl fun name fastcode flag fundecl fun fast globl emit symbol fundecl fun name emit symbol fundecl fun name clflags gprofile then emit profile let frame size then subl emit int esp emit label tailrec entry point emit all true fundecl fun body list iter emit call call sites emit call bound errors list iter emit float constant float constants match config system with quot linux elf quot quot bsd elf quot quot gnu quot type emit symbol fundecl fun name function size emit symbol fundecl fun name emit symbol fundecl fun name except that the only data have the fundecl variable type fundecl fun name string fun body instruction fun fast bool type instruction mutable desc instruction desc mutable next instruction arg reg array res reg array dbg debuginfo live reg set there dbg attribute instructions but rarely set one compilation with dlinear option allow see this fact decided add fun dbg debuginfo attribute quot fundecl quot type and fill all compilation steps may more clever work this often empty quot dbg quot attribute would allow add position information all instructions can usefull for valgrind and gdb this patch not optimised because repeats file instruction for each loc and repeats each function header patch based release311 branch but works current trunk now let see what brings this patch gdb results ocamlopt inline gdb out gdb break breakpoint 0x8049940 file line gdb run starting program home alex callgraph out breakpoint camlt foo let foo current language auto currently asm gdb backtrace camlt foo 0x0804c570 camlt entry 0x0806e4b7 caml start program gdb step camlt bar let bar gdb list let bar let foo bar let gprof results ocamlopt inline out gprof file home alex callgraph let bar thread delay let foo bar let let closure print int foo closure top lines line count execution summary executable lines this file lines executed 100 percent the file executed total number line executions average executions per line valgrind kcachegrind results ocamlopt inline valgrind tool callgrind out callgrind annotate callgrind out 2152 user annotated source let bar 715 thread camlthread delay thread delay let foo 723 camlt bar bar let let closure 692 pervasives camlpervasives output string 215 312 pervasives camlpervasives string int 154 726 camlt foo print int foo closure kcachegrind callgrind out 2152 and next first need wait approval for this new feature ocaml community submitted there someone from inria read this don hesitate contact open work different approach after that may hope lot new features like breakpoints any caml line not only function call gdb plugin allowing read value breakpoint","a:1:{s:3:\"tag\";a:4:{i:0;s:8:\"valgrind\";i:1;s:11:\"kcachegrind\";i:2;s:3:\"gdb\";i:3;s:5:\"ocaml\";}}","1","0","1","1","7","0","0"
"459971","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18841","2009-11-16 13:42:00","Europe/Paris","2009-11-14 22:05:23","2009-11-16 13:33:44","","post","xhtml","2009/11/16/Mozilla-memory-profiling","fr","Mozilla memory profiling","","","As a Mozilla hacker, extension developer and Javascript expert,\r\nI've been really exited to see the <a href=\"http://www.toolness.com/wp/?p=709\">current work of Atul Varma</a> on memory profiling in Firefox!\r\nIt's naturally the next step of tool to build after <a href=\"https://addons.mozilla.org/en-US/firefox/addon/9954\">XUL Profiler</a>, which track CPU consumption and Javascript functions calls.<br />\r\nSo, instead of waiting for web developers to describe their future new \"memory\" firebug tab :), \r\nI've searched what information we can retrieve from JS API.\r\nAnd I've not limited my scope to web content but I take all Browser objects into account.\r\n<br/> <br/>\r\nFirst I've tried to find a meaningful parent for <strong>every</strong> living object.<br />\r\nIn the Mozilla planet we may face with three main types of parents : \r\n<ul>\r\n<li> window : chrome (browser.xul, popups, jsconsole, sidebars, ...) or content (websites,popups,iframes)</li>\r\n<li> xpcom services</li>\r\n<li> JS modules</li>\r\n</ul>\r\n(But there is also XBL, sandboxes and some others strange things like \"Block\")<br />\r\n<br/>\r\nHere is the first result of this work :\r\n<p style=\"text-align: center\">\r\n  <a href=\"/public/another-profiler_techno-barje.fr-1.0.xpi\" style=\"font-size: 2em;\">another-profiler_techno-barje.fr-1.0.xpi</a>\r\n</p>\r\n<strong>This extension need <a href=\"https://addons.mozilla.org/fr/firefox/addon/12025\">Jetpack 0.6+</a>.</strong> \r\nIt adds a \"Open another memory profiler\" item in Tools menu and display all living windows, xpcoms and modules.\r\nThen when you select one of them, it displays the simplest profiling ever: number of js objects group by C++ native class.\r\nI'll show you in the next blog post how to display a better profiling!\r\n<br/>\r\n<img src=\"/public/.another-profiler-1.0_m.jpg\" alt=\"another-profiler-1.0.png\" style=\"margin: 0 auto; display: block;\" title=\"another-profiler-1.0.png, nov. 2009\" />\r\nBut for now, I'm going to show you all the code needed to make this first version.\r\n<br /><br />\r\nFor the living windows, there is a lot of cases, but it's simple : \r\n<pre>\r\n// Get the list of absolutery ALL windows living in a Firefox session, stored as a Tree\r\nfunction getAllWindows() {\r\n  var windows = [];\r\n  \r\n  // Begin by iterating over all top chrome windows (browser, jsconsole, dominspector, etc.)\r\n  var wm = Components.classes[\"@mozilla.org/appshell/window-mediator;1\"]\r\n          .getService(Components.interfaces.nsIWindowMediator);\r\n  var enumerator = wm.getXULWindowEnumerator(null);\r\n  while(enumerator.hasMoreElements()) {\r\n    var win = enumerator.getNext();\r\n    if (win instanceof Components.interfaces.nsIXULWindow) {\r\n      // Search for all children windows (sidebar, content, iframes, ...)\r\n      parseDocshell(win.docShell);\r\n   }\r\n  }\r\n\r\n  function getWindowByDocShell(docShell) {\r\n    if (!(docShell instanceof Components.interfaces.nsIInterfaceRequestor))\r\n      return;\r\n    return docShell.getInterface(Components.interfaces.nsIDOMWindow);\r\n  }\r\n  function parseDocshell(docShell) {\r\n    if (!docShell) return;\r\n    var domWindow = getWindowByDocShell(docShell);\r\n    \r\n    var topWindow = {\r\n          type  : \"window\",\r\n          name  : domWindow.document.title,\r\n          href  : domWindow.location.href,\r\n          object: domWindow,\r\n          children: []\r\n        };\r\n    windows.push(topWindow);\r\n    \r\n    var topWindows = [topWindow];\r\n    \r\n    var treeItemType = Components.interfaces.nsIDocShellTreeItem.typeAll;\r\n    // From inspector@mozilla.org inspector.js appendContainedDocuments\r\n    // Load all the window's content docShells\r\n    var containedDocShells = docShell.getDocShellEnumerator(treeItemType,\r\n                                      Components.interfaces.nsIDocShell.ENUMERATE_FORWARDS);\r\n    while (containedDocShells.hasMoreElements())\r\n    {\r\n      var childShell = containedDocShells.getNext().QueryInterface(Components.interfaces.nsIDocShell);\r\n      \r\n      if (childShell == docShell) {\r\n        // It's the current topWindow\r\n        continue;\r\n      }\r\n      \r\n      var childDOMWindow = getWindowByDocShell(childShell);\r\n      if (!childDOMWindow) continue;\r\n      var parent;\r\n      for(var i=0; i&lt;topWindows.length; i++) {\r\n        if (topWindows[i].object == childDOMWindow.parent) {\r\n          parent = topWindows[i];\r\n          break;\r\n        }\r\n      }\r\n      var newWindow = {\r\n        type  : \"window\",\r\n        name  : childDOMWindow.document.title,\r\n        href  : childDOMWindow.location.href,\r\n        object: childDOMWindow,\r\n        children : []\r\n      };\r\n      topWindows.push(newWindow);\r\n      if (parent)\r\n        parent.children.push(newWindow);\r\n      else\r\n        topWindow.children.push(newWindow);\r\n    }\r\n    delete topWindows;\r\n  }\r\n  \r\n  // Finally, don't forget *the* hidden window, it's a big one used by many extensions!\r\n  var hiddenWindow = Components.classes[\"@mozilla.org/appshell/appShellService;1\"]\r\n         .getService(Components.interfaces.nsIAppShellService)\r\n         .hiddenWindow;\r\n  if (hiddenWindow instanceof Components.interfaces.nsIXULWindow) {\r\n    parseDocshell(hiddenWindow.docShell);\r\n  }\r\n  \r\n  return windows;\r\n}\r\n</pre>\r\n<br /><br />\r\nFor XPCOM services, it's shorter, but it' an unknown practice :\r\n<pre>\r\n// Get the list of all XPCOM services (not the xpcom objects, only services) in a Firefox session\r\nfunction getAllXPCOMServices() {\r\n  var instanciatedServices = [];\r\n  var serviceManager=Components.manager.QueryInterface(Components.interfaces.nsIServiceManager);\r\n  var supports = Components.interfaces.nsISupports;\r\n  for(var cl in Components.classes) {\r\n    try {\r\n      if (serviceManager.isServiceInstantiated(Components.classes[cl],supports)) {\r\n        var service=Components.classes[cl].getService(supports);\r\n        if (service.wrappedJSObject) {\r\n          // Get the global object\r\n          service=service.wrappedJSObject.__parent__;\r\n          if (!service)\r\n            service=Components.classes[cl].getService(supports).__parent__;\r\n          instanciatedServices.push({\r\n            type   : \"xpcom\",\r\n            name   : cl,\r\n            object : service\r\n          });\r\n        }\r\n      }\r\n    } catch(e) {\r\n      // serviceManager.isServiceInstantiated is throwing if there is no instance ...\r\n    }\r\n  }\r\n  return instanciatedServices;\r\n}\r\n</pre>\r\n<br /><br />\r\n\r\nBut for JS Modules, I've not found any way to get those ... <br/>\r\nThe only solution I've got was to do a quick profiling and identify them :\r\n<pre>\r\nfunction searchJSModules () {\r\n  var jsmodules = [];\r\n  \r\n  var roots=getGCRoots();\r\n  for(var r in roots) {\r\n    var id = roots[r];\r\n    var info = getObjectInfo(id);\r\n    var properties = getObjectProperties(id);\r\n    /*\r\n    // We can also identify XPCOM by reading global NSGetModule function\r\n    var nsgetmodule = getObjectProperty(id,\"NSGetModule\").NSGetModule;\r\n    if (nsgetmodule) {\r\n      print (\" --> is an XPCOM\");\r\n      print (\" --> defined in : \"+getObjectInfo(nsgetmodule).filename);\r\n      continue;\r\n    }\r\n    */\r\n    // See if the current object has a EXPORTED_SYMBOLS object\r\n    // We suppose every JS Module has one ...\r\n    var exportedsymbols = getObjectProperty(id,\"EXPORTED_SYMBOLS\").EXPORTED_SYMBOLS;\r\n    if (!exportedsymbols) continue;\r\n    \r\n    // Then search for the first declared function\r\n    // Which will allow us to get the file of this module!\r\n    \r\n    // Begin to search in EXPORTED_SYMBOLS\r\n    var symbols = getObjectProperties(exportedsymbols);\r\n    var filename;\r\n    for(var i in symbols) {\r\n      var s = getObjectProperty(id,symbols[i])[symbols[i]];\r\n      var inf = getObjectInfo(s);\r\n      if (!inf) continue;\r\n      if (inf.nativeClass==\"Function\" && inf.filename) {\r\n        filename=inf.filename;\r\n        break;\r\n      } else if (inf.nativeClass=\"Object\") {\r\n        var subprops = getObjectProperties(s);\r\n        for(var j in subprops) {\r\n          var subs = subprops[j];\r\n          var subinf = getObjectInfo(subs);\r\n          if (!subinf) continue;\r\n          if (subinf.nativeClass==\"Function\" && subinf.filename) {\r\n            filename = subinf.filename;\r\n            break;\r\n          }\r\n        }\r\n        if (filename) break;\r\n      }\r\n    }\r\n    if (!filename) {\r\n      // Unable to found a function in exported_symbols objects\r\n      // now try to find a function defined in global context\r\n      var table = getObjectTable();\r\n      var count=0;\r\n      for (var subid in table) {\r\n        var subinf = getObjectInfo(parseInt(subid));\r\n        if (subinf && subinf.parent == id && subinf.nativeClass==\"Function\" && subinf.filename) {\r\n          filename = subinf.filename;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (filename) {\r\n      var file = filename;\r\n      var res = filename.match(/\/([^\/]+\/[^\/]+\/[^\/]+\.\w+)$/);\r\n      if (res)\r\n        file = decodeURIComponent(res[1]);\r\n      jsmodules.push({\r\n        type  : \"jsmodule\",\r\n        name  : file,\r\n        file  : filename,\r\n        object: id\r\n      });\r\n    } else {\r\n      // we were unable to find any function, we may try to search deeper\r\n    }\r\n  }\r\n  \r\n  return JSON.stringify(jsmodules);\r\n}\r\n\r\nfunction getAllJSModules() {\r\n  var factory = Components.classes[\"@labs.mozilla.com/jetpackdi;1\"]\r\n               .createInstance(Components.interfaces.nsIJetpack);\r\n  var endpoint = factory.get();\r\n  var json = endpoint.profileMemory(searchJSModules.toSource()+\"\nsearchJSModules()\", \"find-jsmodules.js\", 1, null);\r\n  return JSON.parse(json);\r\n}\r\n</pre>\r\n<br/><br/>\r\nFinally, here is the function which retrieve objects counts for one parent.\r\nIt use the Jetpack memory profiler XPCOM.\r\n<pre>\r\nfunction profileFunction() {\r\n  var namedObjects=getNamedObjects();\r\n  \r\n  // namedObjects[\"parent\"] is null ... why ?!\r\n  var parent;\r\n  for(var i in namedObjects) {\r\n    if (i==\"parent\") {\r\n      parent = parseInt(namedObjects[i]);\r\n    }\r\n  }\r\n  \r\n  // Remove web content windows js wrapper\r\n  var inf = getObjectInfo(parent);\r\n  if (inf && inf.nativeClass==\"XPCSafeJSObjectWrapper\") {\r\n    parent = inf.wrappedObject;\r\n  }\r\n  \r\n  var children = {};\r\n  \r\n  // Check every JS object\r\n  var table = getObjectTable();\r\n  for(var i in table) {\r\n    var info = getObjectInfo(parseInt(i));\r\n    \r\n    // Search if this one is related to the selected parent\r\n    // ie walk throught all parents in order to find if the current object is a descendant of selected parent\r\n    if ( info.parent != parent ) {\r\n      var parentMatch = false;\r\n      var p = info.parent;\r\n      while(true) {\r\n        var subinfo = getObjectInfo(p);\r\n        if (!subinfo) break;\r\n        \r\n        if ( subinfo.id == parent || subinfo.parent == parent ) {\r\n          // Answer= Yes\r\n          parentMatch = true;\r\n          break;\r\n        }\r\n        \r\n        // Walk throught encapsulated objects\r\n        if (subinfo.outerObject && subinfo.outerObject!=p) {\r\n          p = subinfo.outerObject;\r\n          continue;\r\n        }\r\n        \r\n        p = subinfo.parent;\r\n      }\r\n      // Answer= Yes\r\n      if (!parentMatch) continue;\r\n    }\r\n    \r\n    if (!children[info.nativeClass])\r\n      children[info.nativeClass] = 0;\r\n    children[info.nativeClass]++;\r\n  }\r\n  \r\n  return JSON.stringify(children);\r\n}\r\nfunction profileParent(parent) {\r\n  var factory = Components.classes[\"@labs.mozilla.com/jetpackdi;1\"]\r\n               .createInstance(Components.interfaces.nsIJetpack);\r\n  var endpoint = factory.get();\r\n  var json = endpoint.profileMemory(profileFunction.toSource()+\"\nprofileFunction()\", \"profile.js\", 1, {parent: parent});\r\n  return JSON.parse(json);\r\n}\r\n</pre>\r\n<p style=\"text-align: right\">\r\n  <a href=\"https://wiki.mozilla.org/Labs/Jetpack/Binary_Components#Memory_Profiling\">More information</a>\r\n</p>\r\n<br/>\r\nCome back for the next blog post to get the 2.0 version :)","As a Mozilla hacker, extension developer and Javascript expert, I've been\nreally exited to see the <a href=\"http://www.toolness.com/wp/?p=709\">current\nwork of Atul Varma</a> on memory profiling in Firefox! It's naturally the next\nstep of tool to build after <a href=\"https://addons.mozilla.org/en-US/firefox/addon/9954\">XUL Profiler</a>, which\ntrack CPU consumption and Javascript functions calls.<br />\nSo, instead of waiting for web developers to describe their future new &quot;memory&quot;\nfirebug tab :), I've searched what information we can retrieve from JS API. And\nI've not limited my scope to web content but I take all Browser objects into\naccount.<br />\n<br />\nFirst I've tried to find a meaningful parent for <strong>every</strong> living\nobject.<br />\nIn the Mozilla planet we may face with three main types of parents :\n<ul>\n<li>window : chrome (browser.xul, popups, jsconsole, sidebars, ...) or content\n(websites,popups,iframes)</li>\n<li>xpcom services</li>\n<li>JS modules</li>\n</ul>\n(But there is also XBL, sandboxes and some others strange things like\n&quot;Block&quot;)<br />\n<br />\nHere is the first result of this work :\n<p style=\"text-align: center\"><a href=\"/public/another-profiler_techno-barje.fr-1.0.xpi\" style=\"font-size: 2em;\">another-profiler_techno-barje.fr-1.0.xpi</a></p>\n<strong>This extension need <a href=\"https://addons.mozilla.org/fr/firefox/addon/12025\">Jetpack 0.6+</a>.</strong>\nIt adds a &quot;Open another memory profiler&quot; item in Tools menu and display all\nliving windows, xpcoms and modules. Then when you select one of them, it\ndisplays the simplest profiling ever: number of js objects group by C++ native\nclass. I'll show you in the next blog post how to display a better\nprofiling!<br />\n<img src=\"/public/.another-profiler-1.0_m.jpg\" alt=\"another-profiler-1.0.png\" style=\"margin: 0 auto; display: block;\" title=\"another-profiler-1.0.png, nov. 2009\" /> But for now, I'm going to show you all\nthe code needed to make this first version.<br />\n<br />\nFor the living windows, there is a lot of cases, but it's simple :\n<pre>\n// Get the list of absolutery ALL windows living in a Firefox session, stored as a Tree\nfunction getAllWindows() {\n  var windows = [];\n  \n  // Begin by iterating over all top chrome windows (browser, jsconsole, dominspector, etc.)\n  var wm = Components.classes[&quot;@mozilla.org/appshell/window-mediator;1&quot;]\n          .getService(Components.interfaces.nsIWindowMediator);\n  var enumerator = wm.getXULWindowEnumerator(null);\n  while(enumerator.hasMoreElements()) {\n    var win = enumerator.getNext();\n    if (win instanceof Components.interfaces.nsIXULWindow) {\n      // Search for all children windows (sidebar, content, iframes, ...)\n      parseDocshell(win.docShell);\n   }\n  }\n\n  function getWindowByDocShell(docShell) {\n    if (!(docShell instanceof Components.interfaces.nsIInterfaceRequestor))\n      return;\n    return docShell.getInterface(Components.interfaces.nsIDOMWindow);\n  }\n  function parseDocshell(docShell) {\n    if (!docShell) return;\n    var domWindow = getWindowByDocShell(docShell);\n    \n    var topWindow = {\n          type  : &quot;window&quot;,\n          name  : domWindow.document.title,\n          href  : domWindow.location.href,\n          object: domWindow,\n          children: []\n        };\n    windows.push(topWindow);\n    \n    var topWindows = [topWindow];\n    \n    var treeItemType = Components.interfaces.nsIDocShellTreeItem.typeAll;\n    // From inspector@mozilla.org inspector.js appendContainedDocuments\n    // Load all the window's content docShells\n    var containedDocShells = docShell.getDocShellEnumerator(treeItemType,\n                                      Components.interfaces.nsIDocShell.ENUMERATE_FORWARDS);\n    while (containedDocShells.hasMoreElements())\n    {\n      var childShell = containedDocShells.getNext().QueryInterface(Components.interfaces.nsIDocShell);\n      \n      if (childShell == docShell) {\n        // It's the current topWindow\n        continue;\n      }\n      \n      var childDOMWindow = getWindowByDocShell(childShell);\n      if (!childDOMWindow) continue;\n      var parent;\n      for(var i=0; i&lt;topWindows.length; i++) {\n        if (topWindows[i].object == childDOMWindow.parent) {\n          parent = topWindows[i];\n          break;\n        }\n      }\n      var newWindow = {\n        type  : &quot;window&quot;,\n        name  : childDOMWindow.document.title,\n        href  : childDOMWindow.location.href,\n        object: childDOMWindow,\n        children : []\n      };\n      topWindows.push(newWindow);\n      if (parent)\n        parent.children.push(newWindow);\n      else\n        topWindow.children.push(newWindow);\n    }\n    delete topWindows;\n  }\n  \n  // Finally, don't forget *the* hidden window, it's a big one used by many extensions!\n  var hiddenWindow = Components.classes[&quot;@mozilla.org/appshell/appShellService;1&quot;]\n         .getService(Components.interfaces.nsIAppShellService)\n         .hiddenWindow;\n  if (hiddenWindow instanceof Components.interfaces.nsIXULWindow) {\n    parseDocshell(hiddenWindow.docShell);\n  }\n  \n  return windows;\n}\n</pre>\n<br />\n<br />\nFor XPCOM services, it's shorter, but it' an unknown practice :\n<pre>\n// Get the list of all XPCOM services (not the xpcom objects, only services) in a Firefox session\nfunction getAllXPCOMServices() {\n  var instanciatedServices = [];\n  var serviceManager=Components.manager.QueryInterface(Components.interfaces.nsIServiceManager);\n  var supports = Components.interfaces.nsISupports;\n  for(var cl in Components.classes) {\n    try {\n      if (serviceManager.isServiceInstantiated(Components.classes[cl],supports)) {\n        var service=Components.classes[cl].getService(supports);\n        if (service.wrappedJSObject) {\n          // Get the global object\n          service=service.wrappedJSObject.__parent__;\n          if (!service)\n            service=Components.classes[cl].getService(supports).__parent__;\n          instanciatedServices.push({\n            type   : &quot;xpcom&quot;,\n            name   : cl,\n            object : service\n          });\n        }\n      }\n    } catch(e) {\n      // serviceManager.isServiceInstantiated is throwing if there is no instance ...\n    }\n  }\n  return instanciatedServices;\n}\n</pre>\n<br />\n<br />\nBut for JS Modules, I've not found any way to get those ...<br />\nThe only solution I've got was to do a quick profiling and identify them :\n<pre>\nfunction searchJSModules () {\n  var jsmodules = [];\n  \n  var roots=getGCRoots();\n  for(var r in roots) {\n    var id = roots[r];\n    var info = getObjectInfo(id);\n    var properties = getObjectProperties(id);\n    /*\n    // We can also identify XPCOM by reading global NSGetModule function\n    var nsgetmodule = getObjectProperty(id,&quot;NSGetModule&quot;).NSGetModule;\n    if (nsgetmodule) {\n      print (&quot; --&gt; is an XPCOM&quot;);\n      print (&quot; --&gt; defined in : &quot;+getObjectInfo(nsgetmodule).filename);\n      continue;\n    }\n    */\n    // See if the current object has a EXPORTED_SYMBOLS object\n    // We suppose every JS Module has one ...\n    var exportedsymbols = getObjectProperty(id,&quot;EXPORTED_SYMBOLS&quot;).EXPORTED_SYMBOLS;\n    if (!exportedsymbols) continue;\n    \n    // Then search for the first declared function\n    // Which will allow us to get the file of this module!\n    \n    // Begin to search in EXPORTED_SYMBOLS\n    var symbols = getObjectProperties(exportedsymbols);\n    var filename;\n    for(var i in symbols) {\n      var s = getObjectProperty(id,symbols[i])[symbols[i]];\n      var inf = getObjectInfo(s);\n      if (!inf) continue;\n      if (inf.nativeClass==&quot;Function&quot; &amp;&amp; inf.filename) {\n        filename=inf.filename;\n        break;\n      } else if (inf.nativeClass=&quot;Object&quot;) {\n        var subprops = getObjectProperties(s);\n        for(var j in subprops) {\n          var subs = subprops[j];\n          var subinf = getObjectInfo(subs);\n          if (!subinf) continue;\n          if (subinf.nativeClass==&quot;Function&quot; &amp;&amp; subinf.filename) {\n            filename = subinf.filename;\n            break;\n          }\n        }\n        if (filename) break;\n      }\n    }\n    if (!filename) {\n      // Unable to found a function in exported_symbols objects\n      // now try to find a function defined in global context\n      var table = getObjectTable();\n      var count=0;\n      for (var subid in table) {\n        var subinf = getObjectInfo(parseInt(subid));\n        if (subinf &amp;&amp; subinf.parent == id &amp;&amp; subinf.nativeClass==&quot;Function&quot; &amp;&amp; subinf.filename) {\n          filename = subinf.filename;\n          break;\n        }\n      }\n    }\n    if (filename) {\n      var file = filename;\n      var res = filename.match(/\/([^\/]+\/[^\/]+\/[^\/]+\.\w+)$/);\n      if (res)\n        file = decodeURIComponent(res[1]);\n      jsmodules.push({\n        type  : &quot;jsmodule&quot;,\n        name  : file,\n        file  : filename,\n        object: id\n      });\n    } else {\n      // we were unable to find any function, we may try to search deeper\n    }\n  }\n  \n  return JSON.stringify(jsmodules);\n}\n\nfunction getAllJSModules() {\n  var factory = Components.classes[&quot;@labs.mozilla.com/jetpackdi;1&quot;]\n               .createInstance(Components.interfaces.nsIJetpack);\n  var endpoint = factory.get();\n  var json = endpoint.profileMemory(searchJSModules.toSource()+&quot;\nsearchJSModules()&quot;, &quot;find-jsmodules.js&quot;, 1, null);\n  return JSON.parse(json);\n}\n</pre>\n<br />\n<br />\nFinally, here is the function which retrieve objects counts for one parent. It\nuse the Jetpack memory profiler XPCOM.\n<pre>\nfunction profileFunction() {\n  var namedObjects=getNamedObjects();\n  \n  // namedObjects[&quot;parent&quot;] is null ... why ?!\n  var parent;\n  for(var i in namedObjects) {\n    if (i==&quot;parent&quot;) {\n      parent = parseInt(namedObjects[i]);\n    }\n  }\n  \n  // Remove web content windows js wrapper\n  var inf = getObjectInfo(parent);\n  if (inf &amp;&amp; inf.nativeClass==&quot;XPCSafeJSObjectWrapper&quot;) {\n    parent = inf.wrappedObject;\n  }\n  \n  var children = {};\n  \n  // Check every JS object\n  var table = getObjectTable();\n  for(var i in table) {\n    var info = getObjectInfo(parseInt(i));\n    \n    // Search if this one is related to the selected parent\n    // ie walk throught all parents in order to find if the current object is a descendant of selected parent\n    if ( info.parent != parent ) {\n      var parentMatch = false;\n      var p = info.parent;\n      while(true) {\n        var subinfo = getObjectInfo(p);\n        if (!subinfo) break;\n        \n        if ( subinfo.id == parent || subinfo.parent == parent ) {\n          // Answer= Yes\n          parentMatch = true;\n          break;\n        }\n        \n        // Walk throught encapsulated objects\n        if (subinfo.outerObject &amp;&amp; subinfo.outerObject!=p) {\n          p = subinfo.outerObject;\n          continue;\n        }\n        \n        p = subinfo.parent;\n      }\n      // Answer= Yes\n      if (!parentMatch) continue;\n    }\n    \n    if (!children[info.nativeClass])\n      children[info.nativeClass] = 0;\n    children[info.nativeClass]++;\n  }\n  \n  return JSON.stringify(children);\n}\nfunction profileParent(parent) {\n  var factory = Components.classes[&quot;@labs.mozilla.com/jetpackdi;1&quot;]\n               .createInstance(Components.interfaces.nsIJetpack);\n  var endpoint = factory.get();\n  var json = endpoint.profileMemory(profileFunction.toSource()+&quot;\nprofileFunction()&quot;, &quot;profile.js&quot;, 1, {parent: parent});\n  return JSON.parse(json);\n}\n</pre>\n<p style=\"text-align: right\"><a href=\"https://wiki.mozilla.org/Labs/Jetpack/Binary_Components#Memory_Profiling\">More\ninformation</a></p>\n<br />\nCome back for the next blog post to get the 2.0 version :)","","mozilla memory profiling mozilla hacker extension developer and javascript expert been really exited see the current work atul varma memory profiling firefox naturally the next step tool build after xul profiler which track cpu consumption and javascript functions calls instead waiting for web developers describe their future new quot memory quot firebug tab searched what information can retrieve from api and not limited scope web content but take all browser objects into account first tried find meaningful parent for every living object the mozilla planet may face with three main types parents window chrome browser xul popups jsconsole sidebars content websites popups iframes xpcom services modules but there also xbl sandboxes and some others strange things like quot block quot here the first result this work another profiler techno barje xpi this extension need jetpack adds quot open another memory profiler quot item tools menu and display all living windows xpcoms and modules then when you select one them displays the simplest profiling ever number objects group native class show you the next blog post how display better profiling but for now going show you all the code needed make this first version for the living windows there lot cases but simple get the list absolutery all windows living firefox session stored tree function getallwindows var windows begin iterating over all top chrome windows browser jsconsole dominspector etc var components classes quot mozilla org appshell window mediator quot getservice components interfaces nsiwindowmediator var enumerator getxulwindowenumerator null while enumerator hasmoreelements var win enumerator getnext win instanceof components interfaces nsixulwindow search for all children windows sidebar content iframes parsedocshell win docshell function getwindowbydocshell docshell docshell instanceof components interfaces nsiinterfacerequestor return return docshell getinterface components interfaces nsidomwindow function parsedocshell docshell docshell return var domwindow getwindowbydocshell docshell var topwindow type quot window quot name domwindow document title href domwindow location href object domwindow children windows push topwindow var topwindows topwindow var treeitemtype components interfaces nsidocshelltreeitem typeall from inspector mozilla org inspector appendcontaineddocuments load all the window content docshells var containeddocshells docshell getdocshellenumerator treeitemtype components interfaces nsidocshell enumerate forwards while containeddocshells hasmoreelements var childshell containeddocshells getnext queryinterface components interfaces nsidocshell childshell docshell the current topwindow continue var childdomwindow getwindowbydocshell childshell childdomwindow continue var parent for var topwindows length topwindows object childdomwindow parent parent topwindows break var newwindow type quot window quot name childdomwindow document title href childdomwindow location href object childdomwindow children topwindows push newwindow parent parent children push newwindow else topwindow children push newwindow delete topwindows finally don forget the hidden window big one used many extensions var hiddenwindow components classes quot mozilla org appshell appshellservice quot getservice components interfaces nsiappshellservice hiddenwindow hiddenwindow instanceof components interfaces nsixulwindow parsedocshell hiddenwindow docshell return windows for xpcom services shorter but unknown practice get the list all xpcom services not the xpcom objects only services firefox session function getallxpcomservices var instanciatedservices var servicemanager components manager queryinterface components interfaces nsiservicemanager var supports components interfaces nsisupports for var components classes try servicemanager isserviceinstantiated components classes supports var service components classes getservice supports service wrappedjsobject get the global object service service wrappedjsobject parent service service components classes getservice supports parent instanciatedservices push type quot xpcom quot name object service catch servicemanager isserviceinstantiated throwing there instance return instanciatedservices but for modules not found any way get those the only solution got was quick profiling and identify them function searchjsmodules var jsmodules var roots getgcroots for var roots var roots var info getobjectinfo var properties getobjectproperties can also identify xpcom reading global nsgetmodule function var nsgetmodule getobjectproperty quot nsgetmodule quot nsgetmodule nsgetmodule print quot xpcom quot print quot defined quot getobjectinfo nsgetmodule filename continue see the current object has exported symbols object suppose every module has one var exportedsymbols getobjectproperty quot exported symbols quot exported symbols exportedsymbols continue then search for the first declared function which will allow get the file this module begin search exported symbols var symbols getobjectproperties exportedsymbols var filename for var symbols var getobjectproperty symbols symbols var inf getobjectinfo inf continue inf nativeclass quot function quot amp amp inf filename filename inf filename break else inf nativeclass quot object quot var subprops getobjectproperties for var subprops var subs subprops var subinf getobjectinfo subs subinf continue subinf nativeclass quot function quot amp amp subinf filename filename subinf filename break filename break filename unable found function exported symbols objects now try find function defined global context var table getobjecttable var count for var subid table var subinf getobjectinfo parseint subid subinf amp amp subinf parent amp amp subinf nativeclass quot function quot amp amp subinf filename filename subinf filename break filename var file filename var res filename match res file decodeuricomponent res jsmodules push type quot jsmodule quot name file file filename object else were unable find any function may try search deeper return json stringify jsmodules function getalljsmodules var factory components classes quot labs mozilla com jetpackdi quot createinstance components interfaces nsijetpack var endpoint factory get var json endpoint profilememory searchjsmodules tosource quot nsearchjsmodules quot quot find jsmodules quot null return json parse json finally here the function which retrieve objects counts for one parent use the jetpack memory profiler xpcom function profilefunction var namedobjects getnamedobjects namedobjects quot parent quot null why var parent for var namedobjects quot parent quot parent parseint namedobjects remove web content windows wrapper var inf getobjectinfo parent inf amp amp inf nativeclass quot xpcsafejsobjectwrapper quot parent inf wrappedobject var children check every object var table getobjecttable for var table var info getobjectinfo parseint search this one related the selected parent walk throught all parents order find the current object descendant selected parent info parent parent var parentmatch false var info parent while true var subinfo getobjectinfo subinfo break subinfo parent subinfo parent parent answer yes parentmatch true break walk throught encapsulated objects subinfo outerobject amp amp subinfo outerobject subinfo outerobject continue subinfo parent answer yes parentmatch continue children info nativeclass children info nativeclass children info nativeclass return json stringify children function profileparent parent var factory components classes quot labs mozilla com jetpackdi quot createinstance components interfaces nsijetpack var endpoint factory get var json endpoint profilememory profilefunction tosource quot nprofilefunction quot quot profile quot parent parent return json parse json more information come back for the next blog post get the version","a:1:{s:3:\"tag\";a:4:{i:0;s:8:\"profiler\";i:1;s:6:\"memory\";i:2;s:7:\"jetpack\";i:3;s:7:\"firefox\";}}","1","0","1","1","4","0","0"
"483920","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18841","2010-02-12 19:01:00","Europe/Paris","2010-02-11 22:32:44","2010-02-12 19:34:47","","post","xhtml","2010/02/12/Freemonkeys","fr","Freemonkeys","","","<p style=\"text-align:center\"><a href=\"https://addons.mozilla.org/en-US/firefox/addon/46873\" style=\"font-size: 2em;\">Freemonkeys</a></p>\r\nYet another mozilla powered project! This time, a graphical unit tests editor/executer which enables you to spellcast an army of monkeys always happy to work hard on your projects and find bugs for free!\r\n<img src=\"/public/demo/fm/asserts.png\" alt=\"asserts.png\" style=\"margin: 0 auto; display: block; border: 2px solid black; max-width: 300px; max-height: 300px\" title=\"asserts.png, fév. 2010\" />\r\n<br/>\r\n<strong>Here is what they can do: </strong>\r\n<ul>\r\n<li>Launch any Mozilla application: Firefox, Thunderbird and any xulrunner app,</li>\r\n<li>Use an empty profile for each test execution, or an existing one,</li>\r\n<li>Speak fluently \"assert\" language: isTrue, isFalse, isDefined, equals, ... etc,</li>\r\n<li>Report you in real time test execution directly in your test source code,</li>\r\n<li>They are always ready to work. You don't need to restart Freemonkeys on each test execution, nor on your application reboot. Freemonkeys is an independant xulrunner app, which launch yours and then controls it remotly with a network connexion,</li>\r\n<li>Spot easily any window, any tab and any DOM element with usefull distinctive parameters: XPath, windows attributes, zIndex order, ... etc,</li>\r\n<li>Offer a way to facilitate node identification by simply clicking on it, and seeing in real time what are selected node parameters,</li>\r\n<li>They are able to write down some debug messages, inspect javascript objects with DOM Inspector, take screenshots of any elements,</li>\r\n<li>Ease you some kind of tests, by providing you a simple HTTP webserver in order to simulate some websites answers,</li>\r\n<li>They are not narrow-minded to synchronous tests but offers an assert library and some usefull API embracing asynchronous execution of your code!</li>\r\n</ul>\r\n<br />\r\nNow let's highlight some of these cool features ...<br />\r\n<br/>\r\n<h2>Node selection</h2>\r\nHere I was overing the tip of the day image. Freemonkeys spot it by highlighting it in red and show me all parameters which are going to be used to find this node later:\r\n<br/>\r\n<img src=\"/public/demo/fm/.inspector_m.jpg\" alt=\"inspector.png\" title=\"inspector.png, fév. 2010\" />\r\nYou just have to click on it to get back to test editor and have all javascript code needed to get a reference to this node, something like this:\r\n<pre>\r\nvar top = windows.getRegistered(\"firefox-window\", \"topmost\");\r\nvar tab = top.tabs.current;\r\nvar element = elements.xpath(tab, \"id('frame')/tbody[1]/tr[5]/td[1]/table[1]/tbody[1]/tr[1]/td[1]/table[1]/tbody[1]/tr[1]/td[1]/img[1]\");\r\n</pre>\r\n\r\n<br/><br/>\r\n<h2>Elements screenshots</h2>\r\n<br/>\r\nSimply write:\r\n<pre>\r\nelement.screenshot();\r\n</pre>\r\nAnd get a screenshot directly in the test editor:<br />\r\n<img src=\"/public/demo/fm/.element.screenshot_m.jpg\" alt=\"element.screenshot.png\" title=\"element.screenshot.png, fév. 2010\" />\r\n\r\n<br/><br/>\r\n<h2>Live test execution reporting</h2>\r\n<br/>\r\nYour monkeys report each assert status in the test editor, allowing you to keep the focus on test writing and not losing time by switching from your app to your terminal, then to your code editor, your terminal and your app ... etc, etc.\r\n<img src=\"/public/demo/fm/asserts.png\" alt=\"asserts.png\" style=\"margin: 0 auto; display: block; border: 2px solid black; margin: 5px;\" title=\"asserts.png, fév. 2010\" />\r\n<img src=\"/public/demo/fm/debug-msg.png\" alt=\"debug-msg.png\" title=\"debug-msg.png, fév. 2010\" />\r\n\r\n<br/><br/>\r\n\r\n<h2>HTTP API</h2>\r\n<br/>\r\n<pre>\r\n// Get a reference to a firefox tab\r\nvar top = windows.getRegistered(\"firefox-window\", \"topmost\");\r\nvar tab = top.tabs.current;\r\n\r\n// Start an HTTP server on port 81\r\nhttp.start(\"81\");\r\n\r\n// A successfull test\r\n// Create an assert objet which is going to wait for a request on root path of our http server\r\nvar test = http.assertGetRequest(\"/\");\r\n// Open this page in the tab\r\ntab.open(\"http://localhost:81/\");\r\n// Now wait for this request\r\ntest.wait();\r\n\r\n// The same test but with a non-existant page on our local server, so a failing test!\r\nvar test = http.assertGetRequest(\"/\");\r\ntab.open(\"http://localhost:81/foo\");\r\ntest.wait();\r\n</pre>\r\n<br/><br/>\r\n\r\n\r\n<h2>Asynchronous tests</h2>\r\n<br/>\r\n<pre>\r\n// A usefull function which allow you to block test execution for an amount of time in ms\r\nwait.during(1000);\r\n\r\n// The simpliest asynchronous test\r\nwait.forTrue(function () {\r\n  return true;\r\n});\r\n\r\n// Another, which is going to pass after 3s, with this setTimeout\r\nvar v=true;\r\nwait.setTimeout(function() {\r\n  v=false;\r\n},3000);\r\nwait.forFalse(function () {\r\n  return v;\r\n});\r\n\r\n// Finally, a test which will pass when the test function is going to be called ten times\r\n// (wait for the anonymous function returns 10)\r\nvar i=0;\r\nwait.forEquals(function () {\r\n  return i++;;\r\n}, 10);\r\n</pre>\r\n<br/><br/>\r\n\r\n\r\n\r\n<h1>How to get it ?</h1>\r\nSource code is available on github: <a href=\"http://github.com/ochameau/freemonkeys\">http://github.com/ochameau/freemonkeys</a> (LGPL licence)<br />\r\nIf you are on windows:\r\n<ul>\r\n<li>Download this package:\r\n<a href=\"http://github.com/downloads/ochameau/freemonkeys/freemonkeys-0.1-win.zip\">freemonkeys-0.1-win.zip</a>\r\n</li>\r\n<li>Extract this zip file somewhere</li>\r\n<li>Launch freemonkeys.exe</li>\r\n</ul>\r\n\r\nAnd for linux and mac:\r\n<ul>\r\n<li>Download this one:\r\n<a href=\"http://github.com/downloads/ochameau/freemonkeys/freemonkeys-0.1.zip\">freemonkeys-0.1.zip</a>\r\n</li>\r\n<li>Extract it somewhere</li>\r\n<li>If you don't have xulrunner, download it from <a href=\"http://releases.mozilla.org/pub/mozilla.org/xulrunner/releases/1.9.2rc1/runtimes/\">here</a>\r\n</li>\r\n<li>Finally, launch Freemonkeys with this command:<pre>\r\n/path/to/your/xulrunner/dir/xulrunner /path/to/freemonkeys/application.ini\r\n</pre>\r\n</li>\r\n</ul>","<p style=\"text-align:center\"><a href=\"https://addons.mozilla.org/en-US/firefox/addon/46873\" style=\"font-size: 2em;\">Freemonkeys</a></p>\nYet another mozilla powered project! This time, a graphical unit tests\neditor/executer which enables you to spellcast an army of monkeys always happy\nto work hard on your projects and find bugs for free! <img src=\"/public/demo/fm/asserts.png\" alt=\"asserts.png\" style=\"margin: 0 auto; display: block; border: 2px solid black; max-width: 300px; max-height: 300px\" title=\"asserts.png, fév. 2010\" /><br />\n<strong>Here is what they can do:</strong>\n<ul>\n<li>Launch any Mozilla application: Firefox, Thunderbird and any xulrunner\napp,</li>\n<li>Use an empty profile for each test execution, or an existing one,</li>\n<li>Speak fluently &quot;assert&quot; language: isTrue, isFalse, isDefined, equals, ...\netc,</li>\n<li>Report you in real time test execution directly in your test source\ncode,</li>\n<li>They are always ready to work. You don't need to restart Freemonkeys on\neach test execution, nor on your application reboot. Freemonkeys is an\nindependant xulrunner app, which launch yours and then controls it remotly with\na network connexion,</li>\n<li>Spot easily any window, any tab and any DOM element with usefull\ndistinctive parameters: XPath, windows attributes, zIndex order, ... etc,</li>\n<li>Offer a way to facilitate node identification by simply clicking on it, and\nseeing in real time what are selected node parameters,</li>\n<li>They are able to write down some debug messages, inspect javascript objects\nwith DOM Inspector, take screenshots of any elements,</li>\n<li>Ease you some kind of tests, by providing you a simple HTTP webserver in\norder to simulate some websites answers,</li>\n<li>They are not narrow-minded to synchronous tests but offers an assert\nlibrary and some usefull API embracing asynchronous execution of your\ncode!</li>\n</ul>\n<br />\nNow let's highlight some of these cool features ...<br />\n<br />\n<h2>Node selection</h2>\nHere I was overing the tip of the day image. Freemonkeys spot it by\nhighlighting it in red and show me all parameters which are going to be used to\nfind this node later:<br />\n<img src=\"/public/demo/fm/.inspector_m.jpg\" alt=\"inspector.png\" title=\"inspector.png, fév. 2010\" /> You just have to click on it to get back to test\neditor and have all javascript code needed to get a reference to this node,\nsomething like this:\n<pre>\nvar top = windows.getRegistered(&quot;firefox-window&quot;, &quot;topmost&quot;);\nvar tab = top.tabs.current;\nvar element = elements.xpath(tab, &quot;id('frame')/tbody[1]/tr[5]/td[1]/table[1]/tbody[1]/tr[1]/td[1]/table[1]/tbody[1]/tr[1]/td[1]/img[1]&quot;);\n</pre>\n<br />\n<br />\n<h2>Elements screenshots</h2>\n<br />\nSimply write:\n<pre>\nelement.screenshot();\n</pre>\nAnd get a screenshot directly in the test editor:<br />\n<img src=\"/public/demo/fm/.element.screenshot_m.jpg\" alt=\"element.screenshot.png\" title=\"element.screenshot.png, fév. 2010\" /><br />\n<br />\n<h2>Live test execution reporting</h2>\n<br />\nYour monkeys report each assert status in the test editor, allowing you to keep\nthe focus on test writing and not losing time by switching from your app to\nyour terminal, then to your code editor, your terminal and your app ... etc,\netc. <img src=\"/public/demo/fm/asserts.png\" alt=\"asserts.png\" style=\"margin: 0 auto; display: block; border: 2px solid black; margin: 5px;\" title=\"asserts.png, fév. 2010\" /> <img src=\"/public/demo/fm/debug-msg.png\" alt=\"debug-msg.png\" title=\"debug-msg.png, fév. 2010\" /><br />\n<br />\n<h2>HTTP API</h2>\n<br />\n<pre>\n// Get a reference to a firefox tab\nvar top = windows.getRegistered(&quot;firefox-window&quot;, &quot;topmost&quot;);\nvar tab = top.tabs.current;\n\n// Start an HTTP server on port 81\nhttp.start(&quot;81&quot;);\n\n// A successfull test\n// Create an assert objet which is going to wait for a request on root path of our http server\nvar test = http.assertGetRequest(&quot;/&quot;);\n// Open this page in the tab\ntab.open(&quot;http://localhost:81/&quot;);\n// Now wait for this request\ntest.wait();\n\n// The same test but with a non-existant page on our local server, so a failing test!\nvar test = http.assertGetRequest(&quot;/&quot;);\ntab.open(&quot;http://localhost:81/foo&quot;);\ntest.wait();\n</pre>\n<br />\n<br />\n<h2>Asynchronous tests</h2>\n<br />\n<pre>\n// A usefull function which allow you to block test execution for an amount of time in ms\nwait.during(1000);\n\n// The simpliest asynchronous test\nwait.forTrue(function () {\n  return true;\n});\n\n// Another, which is going to pass after 3s, with this setTimeout\nvar v=true;\nwait.setTimeout(function() {\n  v=false;\n},3000);\nwait.forFalse(function () {\n  return v;\n});\n\n// Finally, a test which will pass when the test function is going to be called ten times\n// (wait for the anonymous function returns 10)\nvar i=0;\nwait.forEquals(function () {\n  return i++;;\n}, 10);\n</pre>\n<br />\n<br />\n<h1>How to get it ?</h1>\nSource code is available on github: <a href=\"http://github.com/ochameau/freemonkeys\">http://github.com/ochameau/freemonkeys</a>\n(LGPL licence)<br />\nIf you are on windows:\n<ul>\n<li>Download this package: <a href=\"http://github.com/downloads/ochameau/freemonkeys/freemonkeys-0.1-win.zip\">freemonkeys-0.1-win.zip</a></li>\n<li>Extract this zip file somewhere</li>\n<li>Launch freemonkeys.exe</li>\n</ul>\nAnd for linux and mac:\n<ul>\n<li>Download this one: <a href=\"http://github.com/downloads/ochameau/freemonkeys/freemonkeys-0.1.zip\">freemonkeys-0.1.zip</a></li>\n<li>Extract it somewhere</li>\n<li>If you don't have xulrunner, download it from <a href=\"http://releases.mozilla.org/pub/mozilla.org/xulrunner/releases/1.9.2rc1/runtimes/\">\nhere</a></li>\n<li>Finally, launch Freemonkeys with this command:\n<pre>\n/path/to/your/xulrunner/dir/xulrunner /path/to/freemonkeys/application.ini\n</pre></li>\n</ul>","","freemonkeys freemonkeys yet another mozilla powered project this time graphical unit tests editor executer which enables you spellcast army monkeys always happy work hard your projects and find bugs for free here what they can launch any mozilla application firefox thunderbird and any xulrunner app use empty profile for each test execution existing one speak fluently quot assert quot language istrue isfalse isdefined equals etc report you real time test execution directly your test source code they are always ready work you don need restart freemonkeys each test execution nor your application reboot freemonkeys independant xulrunner app which launch yours and then controls remotly with network connexion spot easily any window any tab and any dom element with usefull distinctive parameters xpath windows attributes zindex order etc offer way facilitate node identification simply clicking and seeing real time what are selected node parameters they are able write down some debug messages inspect javascript objects with dom inspector take screenshots any elements ease you some kind tests providing you simple http webserver order simulate some websites answers they are not narrow minded synchronous tests but offers assert library and some usefull api embracing asynchronous execution your code now let highlight some these cool features node selection here was overing the tip the day image freemonkeys spot highlighting red and show all parameters which are going used find this node later you just have click get back test editor and have all javascript code needed get reference this node something like this var top windows getregistered quot firefox window quot quot topmost quot var tab top tabs current var element elements xpath tab quot frame tbody table tbody table tbody img quot elements screenshots simply write element screenshot and get screenshot directly the test editor live test execution reporting your monkeys report each assert status the test editor allowing you keep the focus test writing and not losing time switching from your app your terminal then your code editor your terminal and your app etc etc http api get reference firefox tab var top windows getregistered quot firefox window quot quot topmost quot var tab top tabs current start http server port http start quot quot successfull test create assert objet which going wait for request root path our http server var test http assertgetrequest quot quot open this page the tab tab open quot http localhost quot now wait for this request test wait the same test but with non existant page our local server failing test var test http assertgetrequest quot quot tab open quot http localhost foo quot test wait asynchronous tests usefull function which allow you block test execution for amount time wait during 1000 the simpliest asynchronous test wait fortrue function return true another which going pass after with this settimeout var true wait settimeout function false 3000 wait forfalse function return finally test which will pass when the test function going called ten times wait for the anonymous function returns var wait forequals function return how get source code available github http github com ochameau freemonkeys lgpl licence you are windows download this package freemonkeys win zip extract this zip file somewhere launch freemonkeys exe and for linux and mac download this one freemonkeys zip extract somewhere you don have xulrunner download from here finally launch freemonkeys with this command path your xulrunner dir xulrunner path freemonkeys application ini","a:1:{s:3:\"tag\";a:4:{i:0;s:8:\"windmill\";i:1;s:8:\"selenium\";i:2;s:7:\"mozmill\";i:3;s:9:\"unit test\";}}","1","0","1","1","3","1","0"
"448806","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18841","2009-10-12 14:03:00","Europe/Paris","2009-10-11 20:55:46","2009-10-12 12:04:48","","post","xhtml","2009/10/12/JS-Ctypes","en","JS Ctypes","","","<blockquote>\r\nBug 518721 - Implement jsctypes with raw JSAPI <br/>\r\nStatus: SOLVED FIXED!!!<br/>\r\n</blockquote>\r\n<p>\r\nThat's an awesome news for mozilla's developpers! <br/>\r\n<a href=\"https://wiki.mozilla.org/JSctypes\">JS Ctypes</a> aims to provide the same library than <a href=\"http://docs.python.org/library/ctypes.html\">Python Ctypes</a> : \r\n</p>\r\n<p>\r\nYou can load any dynamic library (dll, so, dylib) and call <b>C</b>-functions directly from your Javascript.\r\nIn the current implementation only simple types are supported : numbers, string, boolean.\r\nFor now, we can't play with pointers, nor structures, but these features are <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=513788\">planned</a>.\r\n</p>\r\n<br />\r\n\r\n<h3>simpler code -> less work -> simpler review</h3>\r\n<p>\r\nThis new feature is going to greatly ease platform specific developpement like windows management, system calls, ...\r\nFor example we're able to call Windows API directly from Javascript, without having to create, compile and maintain any C++ XPCOM! <br />\r\nOne side effect is that it will ease code review for https://addons.mozilla.org/ too!\r\nInstead of shipping an obscure dynamic library with our extension, \r\nwe may build only a JS-Ctypes wrapper and call directly OS libraries \r\nor call a common library that can be validated by reviewers with some MD5 checks.\r\n</p>\r\n<br />\r\n\r\n<h2>simpler code -> less knownledge -> better learning curve</h2>\r\n<p>\r\nThis is going to simplify the use of native code too!\r\nYou can now build native code without having to learn any mozilla \"things\" (XPCOM, specific build layout/system, ...)\r\nYou will just have to expose your library with a C api and write a simple JS-CTypes wrapper.\r\n</p>\r\n<br />\r\n\r\n<h2>Hello World!</h2>\r\n<ul>\r\n <li>\r\nFirst retrieve <a href=\"http://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/latest-mozilla-1.9.2/\">Firefox 3.6b1pre nightly</a>\r\nor <a href=\"http://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/latest-trunk/\">Firefox 3.7a1pre nightly</a>\r\n</li>\r\n <li>\r\nOn windows, copy and paste this code in your JS console.<br/>\r\nThis will display an OS native dialog.<br/>\r\n<i>(Change the dll path if your main windows directory is not on C:\WINDOWS!)</i>\r\n<pre>\r\n/* Load JS Ctypes Javascript module */\r\nComponents.utils.import(\"resource://gre/modules/ctypes.jsm\");\r\nvar Types = ctypes.types;\r\n\r\n/* Load windows api dll */\r\nvar lib = ctypes.open(\"C:\\WINDOWS\\system32\\user32.dll\");\r\n\r\n/* Declare the signature of the function we are going to call */\r\nvar msgBox = lib.declare(\"MessageBoxW\",\r\n                         ctypes.stdcall_abi,\r\n                         ctypes.int32_t,\r\n                         ctypes.int32_t,\r\n                         ctypes.ustring,\r\n                         ctypes.ustring,\r\n                         ctypes.int32_t);\r\nvar MB_OK = 3;\r\n\r\n/* Do it! */\r\nvar ret = msgBox(0, \"Hello world\", \"title\", MB_OK);\r\n\r\n/* Display the returned value */\r\nalert(\"MessageBox result : \"+ret);\r\n\r\nlib.close();\r\n</pre>\r\n</li>\r\n</ul>\r\n<br />","<blockquote>Bug 518721 - Implement jsctypes with raw JSAPI<br />\nStatus: SOLVED FIXED!!!<br /></blockquote>\n<p>That's an awesome news for mozilla's developpers!<br />\n<a href=\"https://wiki.mozilla.org/JSctypes\">JS Ctypes</a> aims to provide the\nsame library than <a href=\"http://docs.python.org/library/ctypes.html\">Python\nCtypes</a> :</p>\n<p>You can load any dynamic library (dll, so, dylib) and call\n<b>C</b>-functions directly from your Javascript. In the current implementation\nonly simple types are supported : numbers, string, boolean. For now, we can't\nplay with pointers, nor structures, but these features are <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=513788\">planned</a>.</p>\n<br />\n<h3>simpler code -&gt; less work -&gt; simpler review</h3>\n<p>This new feature is going to greatly ease platform specific developpement\nlike windows management, system calls, ... For example we're able to call\nWindows API directly from Javascript, without having to create, compile and\nmaintain any C++ XPCOM!<br />\nOne side effect is that it will ease code review for\nhttps://addons.mozilla.org/ too! Instead of shipping an obscure dynamic library\nwith our extension, we may build only a JS-Ctypes wrapper and call directly OS\nlibraries or call a common library that can be validated by reviewers with some\nMD5 checks.</p>\n<br />\n<h2>simpler code -&gt; less knownledge -&gt; better learning curve</h2>\n<p>This is going to simplify the use of native code too! You can now build\nnative code without having to learn any mozilla &quot;things&quot; (XPCOM, specific build\nlayout/system, ...) You will just have to expose your library with a C api and\nwrite a simple JS-CTypes wrapper.</p>\n<br />\n<h2>Hello World!</h2>\n<ul>\n<li>First retrieve <a href=\"http://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/latest-mozilla-1.9.2/\">Firefox\n3.6b1pre nightly</a> or <a href=\"http://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/latest-trunk/\">Firefox\n3.7a1pre nightly</a></li>\n<li>On windows, copy and paste this code in your JS console.<br />\nThis will display an OS native dialog.<br />\n<i>(Change the dll path if your main windows directory is not on\nC:\WINDOWS!)</i>\n<pre>\n/* Load JS Ctypes Javascript module */\nComponents.utils.import(&quot;resource://gre/modules/ctypes.jsm&quot;);\nvar Types = ctypes.types;\n\n/* Load windows api dll */\nvar lib = ctypes.open(&quot;C:\\WINDOWS\\system32\\user32.dll&quot;);\n\n/* Declare the signature of the function we are going to call */\nvar msgBox = lib.declare(&quot;MessageBoxW&quot;,\n                         ctypes.stdcall_abi,\n                         ctypes.int32_t,\n                         ctypes.int32_t,\n                         ctypes.ustring,\n                         ctypes.ustring,\n                         ctypes.int32_t);\nvar MB_OK = 3;\n\n/* Do it! */\nvar ret = msgBox(0, &quot;Hello world&quot;, &quot;title&quot;, MB_OK);\n\n/* Display the returned value */\nalert(&quot;MessageBox result : &quot;+ret);\n\nlib.close();\n</pre></li>\n</ul>\n<br />","","ctypes bug 518721 implement jsctypes with raw jsapi status solved fixed that awesome news for mozilla developpers ctypes aims provide the same library than python ctypes you can load any dynamic library dll dylib and call functions directly from your javascript the current implementation only simple types are supported numbers string boolean for now can play with pointers nor structures but these features are planned simpler code less work simpler review this new feature going greatly ease platform specific developpement like windows management system calls for example able call windows api directly from javascript without having create compile and maintain any xpcom one side effect that will ease code review for https addons mozilla org too instead shipping obscure dynamic library with our extension may build only ctypes wrapper and call directly libraries call common library that can validated reviewers with some md5 checks simpler code less knownledge better learning curve this going simplify the use native code too you can now build native code without having learn any mozilla quot things quot xpcom specific build layout system you will just have expose your library with api and write simple ctypes wrapper hello world first retrieve firefox 6b1pre nightly firefox 7a1pre nightly windows copy and paste this code your console this will display native dialog change the dll path your main windows directory not windows load ctypes javascript module components utils import quot resource gre modules ctypes jsm quot var types ctypes types load windows api dll var lib ctypes open quot windows system32 user32 dll quot declare the signature the function are going call var msgbox lib declare quot messageboxw quot ctypes stdcall abi ctypes int32 ctypes int32 ctypes ustring ctypes ustring ctypes int32 var var ret msgbox quot hello world quot quot title quot display the returned value alert quot messagebox result quot ret lib close","a:1:{s:3:\"tag\";a:4:{i:0;s:8:\"jsctypes\";i:1;s:2:\"js\";i:2;s:6:\"ctypes\";i:3;s:9:\"JS Ctypes\";}}","1","0","1","1","8","0","0"
"197565","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18842","2008-01-14 22:24:00","Europe/Paris","2008-01-14 21:24:50","2008-01-20 14:48:24","","post","wiki","2008/01/14/Pourquoi-ocaml","fr","Mais pourquoi ocaml ?","","","!!!! Ses performances\r\nC'est un des langages les plus performant avec un garbage collector : [Benchmark avec comme critère : vitesse et consommation mémoire|http://shootout.alioth.debian.org/gp4sandbox/benchmark.php?test=all&lang=all&calc=Calculate&xfullcpu=1&xmem=1&xloc=0&binarytrees=1&chameneosredux=0&fannkuch=1&fasta=1&knucleotide=1&mandelbrot=1&meteor=0&nbody=0&nsieve=1&nsievebits=1&partialsums=1&pidigits=0&recursive=1&regexdna=1&revcomp=1&spectralnorm=1&hello=0&sumcol=1&threadring=0]\r\n%%%\r\nAu final OCaml consomme peu de mémoire tout en restant dans les plus rapides et tout cela sans demander au développeur de gérer la mémoire!\r\n\r\n\r\n!!!! L'environnement par défaut, ses outils :\r\nMine de rien, lorsque vous télécharger les sources ''ocaml-3.10.1.tar.bz2'' de 2.2 Mo, vous aller avoir accès à un nombre important d'outils avancés :\r\n* un compilateur en __code natif__ (x86, amd64, power pc, alpha, mips, sparc, ...),\r\n* un compilateur qui génère du __bytecode__ caml. Le programme pourra intégrer l'interpréteur de bytecode afin d'être exécutable n'importe où. L'application peut aussi intégrer un toplevel afin de pouvoir exécuter des commandes __dans__ le programme.(une sorte de shell),\r\n* Un __débugueur pas à pas__ permettant de revenir en arrière! (uniquement en bytecode),\r\n* Un toplevel indépendant permettant d'apprendre facilement le langage en exécutant des instruction caml comme dans une ligne de commande,\r\n* camlp4, un preprocesseur permettant d'étendre le langage en fonction du domaine de notre programme,\r\n* des générateurs de parser lex/yacc,\r\n* un outil de création automatique de documentation à partir de code source .ml,\r\n* ocamlbuild, un assistant de compilation, comme make, mais spécialisé pour OCaml et très simple,\r\n* et enfin, des outils de profiling.\r\n\r\n\r\n!!!! Sa richesse\r\nC'est à coup sûr un des seuls langage à permettre de choisir le paradigme le plus adapté pour chaque partie de son programme!%%%\r\nNous pouvons ainsi utiliser selon le contexte du __fonctionnel, de l'impératif ou de l'objet__.%%%\r\nMais ce langage va encore plus loin, et intègre des concepts de programmation que tout langage digne de ce nom devrait intégrer:\r\n* polymorphisme paramétré (ie generics de java et templates de C++),\r\n* [fonctions d'ordre supérieur|http://fr.wikipedia.org/wiki/Fonction_d%27ordre_sup%C3%A9rieur] (une fonction peut prendre en paramètre ou retourner une fonction, et ce de manière très naturelle),\r\n* [fermetures|http://fr.wikipedia.org/wiki/Fermeture_%28informatique%29] (closure in english, difficile à résumer!),\r\n* prise en charge des exceptions,\r\n* [filtrage par motifs|http://fr.wikipedia.org/wiki/Filtrage_par_motif] (pattern matching in english),\r\n* [l'inférance de types|http://fr.wikipedia.org/wiki/Inf%C3%A9rence_de_types]\r\n* ...\r\n\r\nVoici comment obtenir un quicksort clair et simple avec du filtrage par motif, du fonctionnel, des types inférés ainsi que des fermetures et une fonction d'ordre supérieur :\r\n///\r\n let rec quicksort = function                     (* filtrage par motif du paramètre d'entrée qui est la liste à trier *)\r\n    | [] -> []                                                     (* [] est une liste vide *)\r\n    | pivot :: rest ->                                       (* pivot = premier element, rest = le reste de la liste *)\r\n        let is_less x = x < pivot in                 (* fermeture, car nous utilisons la variable pivot *)\r\n        let left, right = List.partition is_less rest in       (* partition est une fonction d'ordre supérieur car is_less est une fonction *)\r\n        (quicksort left) @ [pivot] @ (quicksort right)     (* @ permet de concaténer des listes *)\r\n(* le tout sans avoir à préciser les types ... *)\r\n(* List.partition p l returns a pair of lists (l1, l2), where l1 is the list of all the elements of l that satisfy the predicate p, and l2 is the list of all the elements of l that do not satisfy p. *)\r\n///","<h2>Ses performances</h2>\n<p>C'est un des langages les plus performant avec un garbage collector :\n<a href=\"http://shootout.alioth.debian.org/gp4sandbox/benchmark.php?test=all&amp;lang=all&amp;calc=Calculate&amp;xfullcpu=1&amp;xmem=1&amp;xloc=0&amp;binarytrees=1&amp;chameneosredux=0&amp;fannkuch=1&amp;fasta=1&amp;knucleotide=1&amp;mandelbrot=1&amp;meteor=0&amp;nbody=0&amp;nsieve=1&amp;nsievebits=1&amp;partialsums=1&amp;pidigits=0&amp;recursive=1&amp;regexdna=1&amp;revcomp=1&amp;spectralnorm=1&amp;hello=0&amp;sumcol=1&amp;threadring=0\">\nBenchmark avec comme critère : vitesse et consommation mémoire</a><br />\nAu final OCaml consomme peu de mémoire tout en restant dans les plus rapides et\ntout cela sans demander au développeur de gérer la mémoire!</p>\n<h2>L'environnement par défaut, ses outils :</h2>\n<p>Mine de rien, lorsque vous télécharger les sources\n<em>ocaml-3.10.1.tar.bz2</em> de 2.2 Mo, vous aller avoir accès à un nombre\nimportant d'outils avancés :</p>\n<ul>\n<li>un compilateur en <strong>code natif</strong> (x86, amd64, power pc, alpha,\nmips, sparc, ...),</li>\n<li>un compilateur qui génère du <strong>bytecode</strong> caml. Le programme\npourra intégrer l'interpréteur de bytecode afin d'être exécutable n'importe où.\nL'application peut aussi intégrer un toplevel afin de pouvoir exécuter des\ncommandes <strong>dans</strong> le programme.(une sorte de shell),</li>\n<li>Un <strong>débugueur pas à pas</strong> permettant de revenir en arrière!\n(uniquement en bytecode),</li>\n<li>Un toplevel indépendant permettant d'apprendre facilement le langage en\nexécutant des instruction caml comme dans une ligne de commande,</li>\n<li>camlp4, un preprocesseur permettant d'étendre le langage en fonction du\ndomaine de notre programme,</li>\n<li>des générateurs de parser lex/yacc,</li>\n<li>un outil de création automatique de documentation à partir de code source\n.ml,</li>\n<li>ocamlbuild, un assistant de compilation, comme make, mais spécialisé pour\nOCaml et très simple,</li>\n<li>et enfin, des outils de profiling.</li>\n</ul>\n<h2>Sa richesse</h2>\n<p>C'est à coup sûr un des seuls langage à permettre de choisir le paradigme le\nplus adapté pour chaque partie de son programme!<br />\nNous pouvons ainsi utiliser selon le contexte du <strong>fonctionnel, de\nl'impératif ou de l'objet</strong>.<br />\nMais ce langage va encore plus loin, et intègre des concepts de programmation\nque tout langage digne de ce nom devrait intégrer:</p>\n<ul>\n<li>polymorphisme paramétré (ie generics de java et templates de C++),</li>\n<li><a href=\"http://fr.wikipedia.org/wiki/Fonction_d%27ordre_sup%C3%A9rieur\">fonctions\nd'ordre supérieur</a> (une fonction peut prendre en paramètre ou retourner une\nfonction, et ce de manière très naturelle),</li>\n<li><a href=\"http://fr.wikipedia.org/wiki/Fermeture_%28informatique%29\">fermetures</a>\n(closure in english, difficile à résumer!),</li>\n<li>prise en charge des exceptions,</li>\n<li><a href=\"http://fr.wikipedia.org/wiki/Filtrage_par_motif\">filtrage par\nmotifs</a> (pattern matching in english),</li>\n<li><a href=\"http://fr.wikipedia.org/wiki/Inf%C3%A9rence_de_types\">l'inférance\nde types</a></li>\n<li>...</li>\n</ul>\n<p>Voici comment obtenir un quicksort clair et simple avec du filtrage par\nmotif, du fonctionnel, des types inférés ainsi que des fermetures et une\nfonction d'ordre supérieur :</p>\n<pre>\n let rec quicksort = function                     (* filtrage par motif du paramètre d'entrée qui est la liste à trier *)\n    | [] -&gt; []                                                     (* [] est une liste vide *)\n    | pivot :: rest -&gt;                                       (* pivot = premier element, rest = le reste de la liste *)\n        let is_less x = x &lt; pivot in                 (* fermeture, car nous utilisons la variable pivot *)\n        let left, right = List.partition is_less rest in       (* partition est une fonction d'ordre supérieur car is_less est une fonction *)\n        (quicksort left) @ [pivot] @ (quicksort right)     (* @ permet de concaténer des listes *)\n(* le tout sans avoir à préciser les types ... *)\n(* List.partition p l returns a pair of lists (l1, l2), where l1 is the list of all the elements of l that satisfy the predicate p, and l2 is the list of all the elements of l that do not satisfy p. *)\n</pre>","","mais pourquoi ocaml ses performances est des langages les plus performant avec garbage collector benchmark avec comme critère vitesse consommation mémoire final ocaml consomme peu mémoire tout restant dans les plus rapides tout cela sans demander développeur gérer mémoire environnement par défaut ses outils mine rien lorsque vous télécharger les sources ocaml tar bz2 vous aller avoir accès nombre important outils avancés compilateur code natif x86 amd64 power alpha mips sparc compilateur qui génère bytecode caml programme pourra intégrer interpréteur bytecode afin être exécutable importe application peut aussi intégrer toplevel afin pouvoir exécuter des commandes dans programme une sorte shell débugueur pas pas permettant revenir arrière uniquement bytecode toplevel indépendant permettant apprendre facilement langage exécutant des instruction caml comme dans une ligne commande camlp4 preprocesseur permettant étendre langage fonction domaine notre programme des générateurs parser lex yacc outil création automatique documentation partir code source ocamlbuild assistant compilation comme make mais spécialisé pour ocaml très simple enfin des outils profiling richesse est coup sûr des seuls langage permettre choisir paradigme plus adapté pour chaque partie son programme nous pouvons ainsi utiliser selon contexte fonctionnel impératif objet mais langage encore plus loin intègre des concepts programmation que tout langage digne nom devrait intégrer polymorphisme paramétré generics java templates fonctions ordre supérieur une fonction peut prendre paramètre retourner une fonction manière très naturelle fermetures closure english difficile résumer prise charge des exceptions filtrage par motifs pattern matching english inférance types voici comment obtenir quicksort clair simple avec filtrage par motif fonctionnel des types inférés ainsi que des fermetures une fonction ordre supérieur let rec quicksort function filtrage par motif paramètre entrée qui est liste trier est une liste vide pivot rest pivot premier element rest reste liste let less pivot fermeture car nous utilisons variable pivot let left right list partition less rest partition est une fonction ordre supérieur car less est une fonction quicksort left pivot quicksort right permet concaténer des listes tout sans avoir préciser les types list partition returns pair lists where the list all the elements that satisfy the predicate and the list all the elements that not satisfy","a:1:{s:3:\"tag\";a:4:{i:0;s:5:\"OCaml\";i:1;s:9:\"quicksort\";i:2;s:13:\"environnement\";i:3;s:12:\"performances\";}}","1","0","1","1","1","0","0"
"547585","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18841","2010-09-27 00:10:00","Europe/Paris","2010-09-20 22:10:26","2010-09-30 19:11:04","","post","xhtml","2010/09/27/CSS-animationCSS-transformSVG-powered-by-Firefox-Kaleidoscope","en","CSS animation+CSS transform+SVG powered by Firefox = Kaleidoscope","","","<a href=\"/public/kaleidoscope/kaleidoscope-tutorial.html\" style=\"font-size: 1em\"><img src=\"/public/kaleidoscope/kaleidoscope.jpg\" alt=\"kaleidoscope result\" style=\"margin: 0 auto; display: block;\" title=\"kaleidoscope result\" /></a>\r\n<br />\r\nThe amazing power of web technologies like CSS, HTML and SVG comes when you mix them all together!\r\nThe arrival of the new mozilla specific CSS property <em>-moz-element</em> totally unleashed the power of CSS animation/transition when it comes to doing graphical effects.\r\nAnd I'm pretty sure that we may go even more futher by using others standards like HTML and SVG ...\r\n<br />\r\n\r\nIn order to show you how simple and powerfull these technologies mix can be, \r\nI've add two extra features on top of this kaleidoscope:\r\n<ul>\r\n<li> The first one, use a video instead of an image: Video Kaleidoscope </li>\r\n<li> The second one allow you to specify a custom image by select or drag'n drop: Custom image</li>\r\n</ul>\r\nI find these two features quite powerfull, and what's totally awesome is how simple they are: \r\nonly 3 lines of HTML in the first case, tens lines of javascript in the second one!\r\n\r\n<p style=\"text-align: center\">\r\n<a href=\"/public/kaleidoscope/kaleidoscope-demo.html\" style=\"font-size: 1em\">Kaleidoscope demo</a>\r\n</p>\r\n<p style=\"text-align: right\">\r\nNeed <a href=\"http://www.mozilla.com/fr/firefox/all-beta.html\">Firefox 4 Beta 6</a> or a nightly!<br/>\r\n</p>\r\n\r\nFinally, you may look at this tutorial that explain point by point how to achieve a Kaleidoscope by mixing <em>-moz-element+SVG+CSS animations and transform</em>:<br/>\r\n<p style=\"text-align: center\">\r\n<a href=\"/public/kaleidoscope/kaleidoscope-tutorial.html\" style=\"font-size: 1em\">Kaleidoscope tutorial</a>\r\n</p>","<a href=\"/public/kaleidoscope/kaleidoscope-tutorial.html\" style=\"font-size: 1em\"><img src=\"/public/kaleidoscope/kaleidoscope.jpg\" alt=\"kaleidoscope result\" style=\"margin: 0 auto; display: block;\" title=\"kaleidoscope result\" /></a><br />\nThe amazing power of web technologies like CSS, HTML and SVG comes when you mix\nthem all together! The arrival of the new mozilla specific CSS property\n<em>-moz-element</em> totally unleashed the power of CSS animation/transition\nwhen it comes to doing graphical effects. And I'm pretty sure that we may go\neven more futher by using others standards like HTML and SVG ...<br />\nIn order to show you how simple and powerfull these technologies mix can be,\nI've add two extra features on top of this kaleidoscope:\n<ul>\n<li>The first one, use a video instead of an image: Video Kaleidoscope</li>\n<li>The second one allow you to specify a custom image by select or drag'n\ndrop: Custom image</li>\n</ul>\nI find these two features quite powerfull, and what's totally awesome is how\nsimple they are: only 3 lines of HTML in the first case, tens lines of\njavascript in the second one!\n<p style=\"text-align: center\"><a href=\"/public/kaleidoscope/kaleidoscope-demo.html\" style=\"font-size: 1em\">Kaleidoscope demo</a></p>\n<p style=\"text-align: right\">Need <a href=\"http://www.mozilla.com/fr/firefox/all-beta.html\">Firefox 4 Beta 6</a> or a\nnightly!<br /></p>\nFinally, you may look at this tutorial that explain point by point how to\nachieve a Kaleidoscope by mixing <em>-moz-element+SVG+CSS animations and\ntransform</em>:<br />\n<p style=\"text-align: center\"><a href=\"/public/kaleidoscope/kaleidoscope-tutorial.html\" style=\"font-size: 1em\">Kaleidoscope tutorial</a></p>","","css animation css transform svg powered firefox kaleidoscope the amazing power web technologies like css html and svg comes when you mix them all together the arrival the new mozilla specific css property moz element totally unleashed the power css animation transition when comes doing graphical effects and pretty sure that may even more futher using others standards like html and svg order show you how simple and powerfull these technologies mix can add two extra features top this kaleidoscope the first one use video instead image video kaleidoscope the second one allow you specify custom image select drag drop custom image find these two features quite powerfull and what totally awesome how simple they are only lines html the first case tens lines javascript the second one kaleidoscope demo need firefox beta nightly finally you may look this tutorial that explain point point how achieve kaleidoscope mixing moz element svg css animations and transform kaleidoscope tutorial","a:1:{s:3:\"tag\";a:4:{i:0;s:12:\"kaleidoscope\";i:1;s:12:\"-moz-element\";i:2;s:18:\"css transformation\";i:3;s:13:\"css animation\";}}","1","0","1","1","4","0","0"
"465018","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18841","2009-12-05 20:10:00","Europe/Paris","2009-12-05 19:10:32","2009-12-05 22:12:47","","post","xhtml","2009/12/05/Session-per-tab-in-Firefox","fr","Session per tab in Firefox","","","The brand new version of Yoono, <a href=\"http://www.yoono.com\">Yoono7</a> brings a <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=117222\">long-awaited</a> Firefox feature:\r\nthe possibility to sign-in on the same website with multiple accounts in different tabs or windows.\r\n<br /><br />\r\nAlthought this new feature is a big technical challenge, for the end user, it's really simple and non-intrusive!\r\nThis feature only add one simple \"profile\" selector on the left of the URL bar : \r\n<img src=\"/public/accounts/urlbar-global.png\" alt=\"urlbar-global.png\" style=\"margin: 0 auto; display: block;\" title=\"urlbar-global.png, déc. 2009\" />\r\nThis is the default status of the selector, it simply says that the current firefox behavior is \"as before\", using the same global session for all tabs.<br/>\r\nLet's look it when we enable session per tab on different profiles :\r\n<img src=\"/public/accounts/urlbar-gmail.png\" alt=\"urlbar-gmail.png\" style=\"margin: 0 auto; display: block;\" title=\"urlbar-gmail.png, déc. 2009\" />\r\n<img src=\"/public/accounts/urlbar-facebook.png\" alt=\"urlbar-facebook.png\" style=\"margin: 0 auto; display: block;\" title=\"urlbar-facebook.png, déc. 2009\" />\r\n<img src=\"/public/accounts/urlbar-witter.png\" alt=\"urlbar-witter.png\" style=\"margin: 0 auto; display: block;\" title=\"urlbar-witter.png, déc. 2009\" />\r\n<p>\r\nWhen you start the browser, open a bookmark, do a search or enter manually an URL, your request is loaded with the default global session (ie \"as before\").\r\nBut when you select a profile with this selector, the current tab is reloaded in order to use one specific totally independant session.\r\nFuthermore, if this website open a new tab or window, or if you click on a link, the new tab, window or webpage is going to use the same specific session.\r\n</p>\r\n<br />\r\n\r\nBut let's see how to use this feature from the beginning.\r\n<ol>\r\n\r\n<li style=\"clear:both\">\r\n<img src=\"/public/accounts/perso-add.png\" alt=\"perso-add.png\" style=\"float: right; margin: 0 0 1em 1em;\" title=\"perso-add.png, déc. 2009\" />\r\n<img src=\"/public/accounts/default-menu.png\" alt=\"default-menu.png\" style=\"float: right; margin: 0 0 1em 1em;\" title=\"default-menu.png, déc. 2009\" />\r\nFirst, we create one session linked to a personnal account. In this example I take gmail, but it can be any website : twitter, facebook, flickr, ... whatever! To do so we click on the profile selector and get menu on the left and we click on \"+ new profiles\" and get the right's one.\r\n</li>\r\n\r\n<li style=\"clear:both\">We are redirected to the homepage URL, where we must sign-in for this personnal account: poirot.alex.\r\n<img src=\"/public/accounts/.perso-signin_m.jpg\" alt=\"perso-signin.png\" style=\"margin: 0 auto; display: block;\" title=\"perso-signin.png, déc. 2009\" />\r\n<br />\r\nAnd we are now signed in for this \"Personnal gmail\" session :\r\n<img src=\"/public/accounts/.private-signed_m.jpg\" alt=\"private-signed.png\" style=\"margin: 0 auto; display: block;\" title=\"private-signed.png, déc. 2009\" />\r\n<br />\r\n</li>\r\n\r\n<li style=\"clear:both\">\r\n<img src=\"/public/accounts/add-pro.png\" alt=\"add-pro.png\" style=\"float: right; margin: 0 0 1em 1em;\" title=\"add-pro.png, déc. 2009\" />\r\nThen, we do the same for one professional account: yoono.test.<br />\r\n<img src=\"/public/accounts/.header-pro-signin_m.jpg\" alt=\"header-pro-signin.png\" style=\"margin: 0 auto; display: block;\" title=\"header-pro-signin.png, déc. 2009\" /><br />\r\n<img src=\"/public/accounts/.header-pro-signed_m.jpg\" alt=\"header-pro-signed.png\" style=\"margin: 0 auto; display: block;\" title=\"header-pro-signed.png, déc. 2009\" />\r\n<br />\r\n</li>\r\n\r\n<li style=\"clear:both\">\r\n<img src=\"/public/accounts/home-private.png\" alt=\"home-private.png\" style=\"float: right; margin: 0 0 1em 1em;\" title=\"home-private.png, déc. 2009\" />\r\nLater, we can reopen one of these sessions directly to the homepage with the profile selector and get automatically signed in. The \"switch to\" link doesn't go to the homepage and only reload the current tab with the selected session (very usefull for Facebook connect, sharing, ...).\r\n<img src=\"/public/accounts/.private-signed_m.jpg\" alt=\"private-signed.png\" style=\"margin: 0 auto; display: block;\" title=\"private-signed.png, déc. 2009\" />\r\n</li>\r\n\r\n</ol>\r\n<br/>\r\n<p style=\"text-align: center;font-weight: bold; font-size: 1.2em\">\r\n  So we can open as many different account in multiple tabs or windows!\r\n</p>\r\n<br/><br/>\r\n\r\n<h2>Important note:</h2>\r\nThe current version of Yoono7 doesn't allow custom profile creation. \r\nThe only profiles you can use is the ones automatically created for each account registered in the yoono's sidebar.\r\nBut watch for the next minor releases of Yoono7, we are going to ship all this very soon!\r\n<br/><br/>\r\n\r\n<h2>Another demo of this feature in video:</h2>\r\n<div class=\"external-media\" style=\"margin: 1em auto; text-align: center;\">\r\n<object type=\"application/x-shockwave-flash\" data=\"http://www.youtube.com/v/V51S6BxTPiw&amp;hl=en_US&amp;fs=1\" width=\"480\" height=\"385\">\r\n  <param name=\"movie\" value=\"http://www.youtube.com/v/V51S6BxTPiw&amp;hl=en_US&amp;fs=1\" />\r\n  <param name=\"wmode\" value=\"transparent\" />\r\n</object>\r\n</div>","The brand new version of Yoono, <a href=\"http://www.yoono.com\">Yoono7</a>\nbrings a <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=117222\">long-awaited</a> Firefox\nfeature: the possibility to sign-in on the same website with multiple accounts\nin different tabs or windows.<br />\n<br />\nAlthought this new feature is a big technical challenge, for the end user, it's\nreally simple and non-intrusive! This feature only add one simple &quot;profile&quot;\nselector on the left of the URL bar : <img src=\"/public/accounts/urlbar-global.png\" alt=\"urlbar-global.png\" style=\"margin: 0 auto; display: block;\" title=\"urlbar-global.png, déc. 2009\" /> This\nis the default status of the selector, it simply says that the current firefox\nbehavior is &quot;as before&quot;, using the same global session for all tabs.<br />\nLet's look it when we enable session per tab on different profiles : <img src=\"/public/accounts/urlbar-gmail.png\" alt=\"urlbar-gmail.png\" style=\"margin: 0 auto; display: block;\" title=\"urlbar-gmail.png, déc. 2009\" />\n<img src=\"/public/accounts/urlbar-facebook.png\" alt=\"urlbar-facebook.png\" style=\"margin: 0 auto; display: block;\" title=\"urlbar-facebook.png, déc. 2009\" /> <img src=\"/public/accounts/urlbar-witter.png\" alt=\"urlbar-witter.png\" style=\"margin: 0 auto; display: block;\" title=\"urlbar-witter.png, déc. 2009\" />\n<p>When you start the browser, open a bookmark, do a search or enter manually\nan URL, your request is loaded with the default global session (ie &quot;as\nbefore&quot;). But when you select a profile with this selector, the current tab is\nreloaded in order to use one specific totally independant session. Futhermore,\nif this website open a new tab or window, or if you click on a link, the new\ntab, window or webpage is going to use the same specific session.</p>\n<br />\nBut let's see how to use this feature from the beginning.\n<ol>\n<li style=\"clear:both\"><img src=\"/public/accounts/perso-add.png\" alt=\"perso-add.png\" style=\"float: right; margin: 0 0 1em 1em;\" title=\"perso-add.png, déc. 2009\" /> <img src=\"/public/accounts/default-menu.png\" alt=\"default-menu.png\" style=\"float: right; margin: 0 0 1em 1em;\" title=\"default-menu.png, déc. 2009\" /> First, we create one session linked to a\npersonnal account. In this example I take gmail, but it can be any website :\ntwitter, facebook, flickr, ... whatever! To do so we click on the profile\nselector and get menu on the left and we click on &quot;+ new profiles&quot; and get the\nright's one.</li>\n<li style=\"clear:both\">We are redirected to the homepage URL, where we must\nsign-in for this personnal account: poirot.alex. <img src=\"/public/accounts/.perso-signin_m.jpg\" alt=\"perso-signin.png\" style=\"margin: 0 auto; display: block;\" title=\"perso-signin.png, déc. 2009\" /><br />\nAnd we are now signed in for this &quot;Personnal gmail&quot; session : <img src=\"/public/accounts/.private-signed_m.jpg\" alt=\"private-signed.png\" style=\"margin: 0 auto; display: block;\" title=\"private-signed.png, déc. 2009\" /><br /></li>\n<li style=\"clear:both\"><img src=\"/public/accounts/add-pro.png\" alt=\"add-pro.png\" style=\"float: right; margin: 0 0 1em 1em;\" title=\"add-pro.png, déc. 2009\" /> Then, we do the same for one professional account:\nyoono.test.<br />\n<img src=\"/public/accounts/.header-pro-signin_m.jpg\" alt=\"header-pro-signin.png\" style=\"margin: 0 auto; display: block;\" title=\"header-pro-signin.png, déc. 2009\" /><br />\n<img src=\"/public/accounts/.header-pro-signed_m.jpg\" alt=\"header-pro-signed.png\" style=\"margin: 0 auto; display: block;\" title=\"header-pro-signed.png, déc. 2009\" /><br /></li>\n<li style=\"clear:both\"><img src=\"/public/accounts/home-private.png\" alt=\"home-private.png\" style=\"float: right; margin: 0 0 1em 1em;\" title=\"home-private.png, déc. 2009\" /> Later, we can reopen one of these sessions\ndirectly to the homepage with the profile selector and get automatically signed\nin. The &quot;switch to&quot; link doesn't go to the homepage and only reload the current\ntab with the selected session (very usefull for Facebook connect, sharing,\n...). <img src=\"/public/accounts/.private-signed_m.jpg\" alt=\"private-signed.png\" style=\"margin: 0 auto; display: block;\" title=\"private-signed.png, déc. 2009\" /></li>\n</ol>\n<br />\n<p style=\"text-align: center;font-weight: bold; font-size: 1.2em\">So we can\nopen as many different account in multiple tabs or windows!</p>\n<br />\n<br />\n<h2>Important note:</h2>\nThe current version of Yoono7 doesn't allow custom profile creation. The only\nprofiles you can use is the ones automatically created for each account\nregistered in the yoono's sidebar. But watch for the next minor releases of\nYoono7, we are going to ship all this very soon!<br />\n<br />\n<h2>Another demo of this feature in video:</h2>\n<div class=\"external-media\" style=\"margin: 1em auto; text-align: center;\">\n<object type=\"application/x-shockwave-flash\" data=\"http://www.youtube.com/v/V51S6BxTPiw&amp;hl=en_US&amp;fs=1\" width=\"480\" height=\"385\"><param name=\"movie\" value=\"http://www.youtube.com/v/V51S6BxTPiw&amp;hl=en_US&amp;fs=1\" />\n<param name=\"wmode\" value=\"transparent\" /></object></div>","","session per tab firefox the brand new version yoono yoono7 brings long awaited firefox feature the possibility sign the same website with multiple accounts different tabs windows althought this new feature big technical challenge for the end user really simple and non intrusive this feature only add one simple quot profile quot selector the left the url bar this the default status the selector simply says that the current firefox behavior quot before quot using the same global session for all tabs let look when enable session per tab different profiles when you start the browser open bookmark search enter manually url your request loaded with the default global session quot before quot but when you select profile with this selector the current tab reloaded order use one specific totally independant session futhermore this website open new tab window you click link the new tab window webpage going use the same specific session but let see how use this feature from the beginning first create one session linked personnal account this example take gmail but can any website twitter facebook flickr whatever click the profile selector and get menu the left and click quot new profiles quot and get the right one are redirected the homepage url where must sign for this personnal account poirot alex and are now signed for this quot personnal gmail quot session then the same for one professional account yoono test later can reopen one these sessions directly the homepage with the profile selector and get automatically signed the quot switch quot link doesn the homepage and only reload the current tab with the selected session very usefull for facebook connect sharing can open many different account multiple tabs windows important note the current version yoono7 doesn allow custom profile creation the only profiles you can use the ones automatically created for each account registered the yoono sidebar but watch for the next minor releases yoono7 are going ship all this very soon another demo this feature video","a:1:{s:3:\"tag\";a:3:{i:0;s:7:\"cookies\";i:1;s:15:\"session per tab\";i:2;s:7:\"firefox\";}}","1","0","1","1","4","0","0"
"446443","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18841","2009-10-08 11:10:00","Europe/Paris","2009-10-02 19:19:13","2009-10-08 09:14:47","","post","xhtml","2009/10/08/How-to-setup-a-mozilla-extension-update-server","en","How to setup a mozilla extension update server","","","I've shared in the previous post a command line version of Mccoy.\r\nHere is a new tutorial on how to use it!\r\n<br />\r\n<h3>Prerequisite</h3>\r\n<ul>\r\n <li>a HTTP server</li>\r\n <li>Patched version of mccoy, with command line capabilities : <a href=\"/public/mccoy.tar.gz\">mccoy.tar.gz</a></li>\r\n <li>This start kit : <a href=\"/public/mccoy-test.tar.gz\">mccoy-test.tar.gz</a> which bundle a sample extension and one update.xml file</li>\r\n</ul>\r\n<pre>\r\n$ cd /one/of/your/htdocs/dir\r\n$ wget http://blog.techno-barje.fr/public/mccoy.tar.gz\r\n$ tar zxvf mccoy.tar.gz\r\n$ wget http://blog.techno-barje.fr/public/mccoy-test.tar.gz\r\n$ tar zxvf mccoy-test.tar.gz\r\n$ cd mccoy-test/\r\n$ ls\r\nupdate.xml  workdir  xpis\r\n</pre>\r\n<br/><br/>\r\n<h3>Setup your XPI with valid update information</h3>\r\n<strong>Create a new key in Mccoy</strong>\r\n<pre>\r\nmccoy-test $ cd workdir/\r\nworkdir $ ls\r\nchrome  chrome.manifest  install.rdf\r\nworkdir $ ../../mccoy -createKey myextensionkey\r\nCreating key with name : myextensionkey\r\nPublic key : MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDbV+ZGXs658dOm/+4YtT+VzT5JWzMFYiQ8155fnMkOJCina2yDEBq8Lvi5qF5SyoMDkqaYeO51LR+B4p1g7oWmBW9HbOz3eA9lD/AHUR1SHiJAX7RQq8v9sPSkYta+LyVrCMFgpTmhOWPUXOnwalmL7syGkXyjxHqHCYz+s3d22QIDAQAB\r\nThe key has been successfully created!\r\n</pre>\r\nRemember the name of your key (if you forgot the name, you can later execute <em>mccoy -listKeys</em>)\r\n<br />\r\n<strong>Inject the public key in your extension</strong>\r\n<pre>\r\nworkdir $ ./mccoy -installKey install.rdf -key myextensionkey\r\nPublic key inserted!\r\n</pre>\r\nThis will set the <em>updateKey</em> attribute with the public key.\r\n(you can later retrieve the public key with <em>mccoy -publicKey myextension</em>)\r\n<br />\r\n<strong>Set the updateURL attribute of the install.rdf with the URL of the update.xml file located in mccoy-test/update.xml</strong>\r\n<pre>\r\nworkdir $ vi update.rdf\r\n</pre>\r\n<strong>Build the first xpi</strong>\r\n<pre>\r\n$ zip -r ../xpis/mccoy-test-0.1.xpi .\r\n</pre>\r\n<br />\r\n<strong>&raquo;&raquo; now install this XPI!</strong>\r\nThis sample extension will just display an alert with message <em>\"Mccoy 0.1!\"</em>\r\n<br />\r\n<br />\r\n\r\n<h3>Create a new version of your extension</h3>\r\n\r\n<strong>Alter the sample extension alert message with something new</strong>\r\n<pre>\r\nworkdir $ vi chrome/content/firefoxOverlay.xul\r\n</pre>\r\n<strong>Update the version number with 0.2</strong>\r\n<pre>\r\nworkdir $ vi install.rdf\r\n</pre>\r\n<strong>Build the new xpi</strong>\r\n<pre>\r\nworkdir $ zip -r ../xpis/mccoy-test-0.2.xpi .\r\n</pre>\r\n<strong>Update the update xml file</strong>\r\n<pre>\r\nworkdir $ cd ..\r\nmccoy-test $ vi update.xml\r\n### change version with 0.2\r\n### change updatelink with mccoy-test-0.2.xpi\r\n### change updatehash with result of <em>sha1sum xpis/mccoy-test-0.2.xpi</em>\r\n</pre>\r\n<strong>Sign the update file with mccoy</strong>\r\n<pre>\r\nmccoy-test $ ../mccoy/mccoy -signRDF update.xml -key myextensionkey\r\nSign < update.xml > with key < myextensionkey >\r\nSign addon : urn:mozilla:extension:mccoy-test@techno-barje.fr\r\nFile signed!\r\n</pre>\r\nThis will set the <em>signature</em> attribute with computed with your private key.\r\n<br/>\r\n<br />\r\n<strong>\r\n&raquo;&raquo; You can now force the update in your firefox, relaunch it and voilà!\r\n<br />\r\n<br />\r\n<h3>Some tips for debugging</h3>\r\nEnable this two about:config entries in order to get some message in JS console about update process : <br/>\r\n<pre>\r\nextensions.logging.enabled = true\r\njavascript.options.showInConsole = true\r\n</pre>","I've shared in the previous post a command line version of Mccoy. Here is a new\ntutorial on how to use it!<br />\n<h3>Prerequisite</h3>\n<ul>\n<li>a HTTP server</li>\n<li>Patched version of mccoy, with command line capabilities : <a href=\"/public/mccoy.tar.gz\">mccoy.tar.gz</a></li>\n<li>This start kit : <a href=\"/public/mccoy-test.tar.gz\">mccoy-test.tar.gz</a>\nwhich bundle a sample extension and one update.xml file</li>\n</ul>\n<pre>\n$ cd /one/of/your/htdocs/dir\n$ wget http://blog.techno-barje.fr/public/mccoy.tar.gz\n$ tar zxvf mccoy.tar.gz\n$ wget http://blog.techno-barje.fr/public/mccoy-test.tar.gz\n$ tar zxvf mccoy-test.tar.gz\n$ cd mccoy-test/\n$ ls\nupdate.xml  workdir  xpis\n</pre>\n<br />\n<br />\n<h3>Setup your XPI with valid update information</h3>\n<strong>Create a new key in Mccoy</strong>\n<pre>\nmccoy-test $ cd workdir/\nworkdir $ ls\nchrome  chrome.manifest  install.rdf\nworkdir $ ../../mccoy -createKey myextensionkey\nCreating key with name : myextensionkey\nPublic key : MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDbV+ZGXs658dOm/+4YtT+VzT5JWzMFYiQ8155fnMkOJCina2yDEBq8Lvi5qF5SyoMDkqaYeO51LR+B4p1g7oWmBW9HbOz3eA9lD/AHUR1SHiJAX7RQq8v9sPSkYta+LyVrCMFgpTmhOWPUXOnwalmL7syGkXyjxHqHCYz+s3d22QIDAQAB\nThe key has been successfully created!\n</pre>\nRemember the name of your key (if you forgot the name, you can later execute\n<em>mccoy -listKeys</em>)<br />\n<strong>Inject the public key in your extension</strong>\n<pre>\nworkdir $ ./mccoy -installKey install.rdf -key myextensionkey\nPublic key inserted!\n</pre>\nThis will set the <em>updateKey</em> attribute with the public key. (you can\nlater retrieve the public key with <em>mccoy -publicKey myextension</em>)<br />\n<strong>Set the updateURL attribute of the install.rdf with the URL of the\nupdate.xml file located in mccoy-test/update.xml</strong>\n<pre>\nworkdir $ vi update.rdf\n</pre>\n<strong>Build the first xpi</strong>\n<pre>\n$ zip -r ../xpis/mccoy-test-0.1.xpi .\n</pre>\n<br />\n<strong>»» now install this XPI!</strong> This sample extension will just\ndisplay an alert with message <em>&quot;Mccoy 0.1!&quot;</em><br />\n<br />\n<h3>Create a new version of your extension</h3>\n<strong>Alter the sample extension alert message with something new</strong>\n<pre>\nworkdir $ vi chrome/content/firefoxOverlay.xul\n</pre>\n<strong>Update the version number with 0.2</strong>\n<pre>\nworkdir $ vi install.rdf\n</pre>\n<strong>Build the new xpi</strong>\n<pre>\nworkdir $ zip -r ../xpis/mccoy-test-0.2.xpi .\n</pre>\n<strong>Update the update xml file</strong>\n<pre>\nworkdir $ cd ..\nmccoy-test $ vi update.xml\n### change version with 0.2\n### change updatelink with mccoy-test-0.2.xpi\n### change updatehash with result of <em>sha1sum xpis/mccoy-test-0.2.xpi</em>\n</pre>\n<strong>Sign the update file with mccoy</strong>\n<pre>\nmccoy-test $ ../mccoy/mccoy -signRDF update.xml -key myextensionkey\nSign &lt; update.xml &gt; with key &lt; myextensionkey &gt;\nSign addon : urn:mozilla:extension:mccoy-test@techno-barje.fr\nFile signed!\n</pre>\nThis will set the <em>signature</em> attribute with computed with your private\nkey.<br />\n<br />\n<strong>»» You can now force the update in your firefox, relaunch it and\nvoilà!<br />\n<br /></strong>\n<h3><strong>Some tips for debugging</strong></h3>\nEnable this two about:config entries in order to get some message in JS console\nabout update process :<br />\n<pre>\nextensions.logging.enabled = true\njavascript.options.showInConsole = true\n</pre>","","how setup mozilla extension update server shared the previous post command line version mccoy here new tutorial how use prerequisite http server patched version mccoy with command line capabilities mccoy tar this start kit mccoy test tar which bundle sample extension and one update xml file one your htdocs dir wget http blog techno barje public mccoy tar tar zxvf mccoy tar wget http blog techno barje public mccoy test tar tar zxvf mccoy test tar mccoy test update xml workdir xpis setup your xpi with valid update information create new key mccoy mccoy test workdir workdir chrome chrome manifest install rdf workdir mccoy createkey myextensionkey creating key with name myextensionkey public key migfma0gcsqgsib3dqebaquaa4gnadcbiqkbgqdbv zgxs658dom 4ytt vzt5jwzmfyiq8155fnmkojcina2ydebq8lvi5qf5syomdkqayeo51lr b4p1g7owmbw9hboz3ea9ld ahur1shijax7rqq8v9spskyta lyvrcmfgptmhowpuxonwalml7sygkxyjxhqhcyz s3d22qidaqab the key has been successfully created remember the name your key you forgot the name you can later execute mccoy listkeys inject the public key your extension workdir mccoy installkey install rdf key myextensionkey public key inserted this will set the updatekey attribute with the public key you can later retrieve the public key with mccoy publickey myextension set the updateurl attribute the install rdf with the url the update xml file located mccoy test update xml workdir update rdf build the first xpi zip xpis mccoy test xpi now install this xpi this sample extension will just display alert with message quot mccoy quot create new version your extension alter the sample extension alert message with something new workdir chrome content firefoxoverlay xul update the version number with workdir install rdf build the new xpi workdir zip xpis mccoy test xpi update the update xml file workdir mccoy test update xml change version with change updatelink with mccoy test xpi change updatehash with result sha1sum xpis mccoy test xpi sign the update file with mccoy mccoy test mccoy mccoy signrdf update xml key myextensionkey sign update xml with key myextensionkey sign addon urn mozilla extension mccoy test techno barje file signed this will set the signature attribute with computed with your private key you can now force the update your firefox relaunch and voilà some tips for debugging enable this two about config entries order get some message console about update process extensions logging enabled true javascript options showinconsole true","a:1:{s:3:\"tag\";a:4:{i:0;s:13:\"update server\";i:1;s:7:\"mozilla\";i:2;s:5:\"mccoy\";i:3;s:9:\"extension\";}}","1","0","1","1","6","0","0"
"446442","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18841","2009-10-05 11:02:00","Europe/Paris","2009-10-02 19:18:09","2009-10-05 09:17:29","","post","xhtml","2009/10/05/Mozilla-Mccoy-tool-from-the-command-line","en","Mozilla Mccoy tool from the command line","","","We have seen in the <a href=\"/post/2009/09/30/Headless-xulrunner\" hreflang=\"en\">previous post</a> how to build an headless xulrunner application. <br />\r\nMy first use case was enabling the Mozilla <a href=\"https://developer.mozilla.org/en/McCoy\" hreflang=\"en\">Mccoy</a> application to launch from command line.  That allows me to build a bash script which create nightly builds of a firefox extension automatically updated by Firefox every day!.<br />\r\n<br/>\r\nHere is the resulting Mccoy version :\r\n<ul>\r\n <li><strong>Linux i686 patched build of Mccoy:</strong> <a href=\"/public/mccoy.tar.gz\">mccoy-0.5-command-line.tar.gz</a></li>\r\n <li><strong>Patch based on 0.5 official release:</strong> <a href=\"/public/mccoy-0.5-command-line.patch\">mccoy-0.5-command-line.patch</a></li>\r\n</ul>\r\n<br />\r\n<strong>Now, a summary of each command line arguments :</strong>\r\n<pre>\r\n# Create a new named public/private key\r\n$ ./mccoy -createKey mykey\r\nCreating key with name : mykey\r\nPublic key : MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDbV+ZGXs658dOm/+4YtT+VzT5JWzMFYiQ8155fnMkOJCina2yDEBq8Lvi5qF5SyoMDkqaYeO51LR+B4p1g7oWmBW9HbOz3eA9lD/AHUR1SHiJAX7RQq8v9sPSkYta+LyVrCMFgpTmhOWPUXOnwalmL7syGkXyjxHqHCYz+s3d22QIDAQAB\r\nThe key has been successfully created!\r\n\r\n# List all keys in the current mccoy profile\r\n# /!\ Don't forget to save your profile!\r\n$ ./mccoy -listKeys\r\nRegistered keys :\r\n - mykey\r\n\r\n# Inject the public key in your extension's install.rdf\r\n$ ./mccoy -installRDF myextension_workdir/install.rdf -key myextensionkey\r\nPublic key inserted!\r\n\r\n# Update the signature of the update xml file\r\n$ ./mccoy -signRDF update.xml -key mykey\r\nSign < update.xml > with key < mykey >\r\nSign addon : urn:mozilla:extension:mccoy@techno-barje.fr\r\nFile signed!\r\n\r\n# Check if the update xml file is correctly signed\r\n$ ./mccoy -verifyRDF update.xml -key myextensionkey\r\nCheck rdf : update.xml with key myextensionkey\r\nValid signature!\r\n\r\n</pre>","We have seen in the <a href=\"/post/2009/09/30/Headless-xulrunner\" hreflang=\"en\">previous post</a> how to build an headless xulrunner application.<br />\nMy first use case was enabling the Mozilla <a href=\"https://developer.mozilla.org/en/McCoy\" hreflang=\"en\">Mccoy</a> application to\nlaunch from command line. That allows me to build a bash script which create\nnightly builds of a firefox extension automatically updated by Firefox every\nday!.<br />\n<br />\nHere is the resulting Mccoy version :\n<ul>\n<li><strong>Linux i686 patched build of Mccoy:</strong> <a href=\"/public/mccoy.tar.gz\">mccoy-0.5-command-line.tar.gz</a></li>\n<li><strong>Patch based on 0.5 official release:</strong> <a href=\"/public/mccoy-0.5-command-line.patch\">mccoy-0.5-command-line.patch</a></li>\n</ul>\n<br />\n<strong>Now, a summary of each command line arguments :</strong>\n<pre>\n# Create a new named public/private key\n$ ./mccoy -createKey mykey\nCreating key with name : mykey\nPublic key : MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDbV+ZGXs658dOm/+4YtT+VzT5JWzMFYiQ8155fnMkOJCina2yDEBq8Lvi5qF5SyoMDkqaYeO51LR+B4p1g7oWmBW9HbOz3eA9lD/AHUR1SHiJAX7RQq8v9sPSkYta+LyVrCMFgpTmhOWPUXOnwalmL7syGkXyjxHqHCYz+s3d22QIDAQAB\nThe key has been successfully created!\n\n# List all keys in the current mccoy profile\n# /!\ Don't forget to save your profile!\n$ ./mccoy -listKeys\nRegistered keys :\n - mykey\n\n# Inject the public key in your extension's install.rdf\n$ ./mccoy -installRDF myextension_workdir/install.rdf -key myextensionkey\nPublic key inserted!\n\n# Update the signature of the update xml file\n$ ./mccoy -signRDF update.xml -key mykey\nSign &lt; update.xml &gt; with key &lt; mykey &gt;\nSign addon : urn:mozilla:extension:mccoy@techno-barje.fr\nFile signed!\n\n# Check if the update xml file is correctly signed\n$ ./mccoy -verifyRDF update.xml -key myextensionkey\nCheck rdf : update.xml with key myextensionkey\nValid signature!\n\n</pre>","","mozilla mccoy tool from the command line have seen the previous post how build headless xulrunner application first use case was enabling the mozilla mccoy application launch from command line that allows build bash script which create nightly builds firefox extension automatically updated firefox every day here the resulting mccoy version linux i686 patched build mccoy mccoy command line tar patch based official release mccoy command line patch now summary each command line arguments create new named public private key mccoy createkey mykey creating key with name mykey public key migfma0gcsqgsib3dqebaquaa4gnadcbiqkbgqdbv zgxs658dom 4ytt vzt5jwzmfyiq8155fnmkojcina2ydebq8lvi5qf5syomdkqayeo51lr b4p1g7owmbw9hboz3ea9ld ahur1shijax7rqq8v9spskyta lyvrcmfgptmhowpuxonwalml7sygkxyjxhqhcyz s3d22qidaqab the key has been successfully created list all keys the current mccoy profile don forget save your profile mccoy listkeys registered keys mykey inject the public key your extension install rdf mccoy installrdf myextension workdir install rdf key myextensionkey public key inserted update the signature the update xml file mccoy signrdf update xml key mykey sign update xml with key mykey sign addon urn mozilla extension mccoy techno barje file signed check the update xml file correctly signed mccoy verifyrdf update xml key myextensionkey check rdf update xml with key myextensionkey valid signature","a:1:{s:3:\"tag\";a:3:{i:0;s:10:\"update.rdf\";i:1;s:5:\"mccoy\";i:2;s:12:\"command line\";}}","1","0","1","1","4","0","0"
"552060","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","44812","2010-10-05 19:10:00","Europe/Paris","2010-10-04 16:08:40","2010-10-05 17:14:07","","post","xhtml","2010/10/04/UIWebView-secrets-part2-leaks-on-release","fr","UIWebView secrets - part2 - leaks on release","","","<p>\r\nContinue on iphone with leaks around UIWebView!\r\nHere is another big one with no apparent solution. When we try to release a UIWebView component, very few memory is freed. So any application using this object to display webpages is going to crash quickly with Low memory exception :(\r\n</p>\r\n\r\n<br/>\r\n\r\nI think this memory usage graph gives an idea on how big is this new king of leak:\r\n<img src=\"/public/iphone-sdk/profile-uiwebview-leak-onrelease.png\" alt=\"memory usage\" style=\"margin: 0 auto; display: block;\" title=\"memory usage\" />\r\n<ol>\r\n<li>Create a UIWebView</li>\r\n<li>Load http://www.google.com/</li>\r\n<li>Release the webview (UIWebView dealloc is correctly called!) <br/> Look how so few memory is freed :/</li>\r\n</ol>\r\n<p style=\"text-align: center\">\r\n  <a href=\"/public/iphone-sdk/UIWebViewLeaks2.zip\">Test Application</a>\r\n</p>\r\n\r\n<p>\r\nThe leak is all but tiny! Before the loading of the webpage, the application was using 630kB of memory,\r\nand after the release of the UIWebview, 1150kB! So we have a 500KB leak in order to simply display the home of Google.com!\r\n</p>\r\n\r\n<p>\r\nThis time, I didn't manage to find any hack to solve this bug. <br/>\r\nSo if you have any tips to fix this, don't hesitate to post a comment!\r\n</p>\r\n\r\nI've tried a lot of differents hacks to free more memory (or use less), like:\r\n<pre>\r\n  // Setup the webview to disable some fancy effect on phone number, but doesn't change anything on memory released ...\r\n  webview.dataDetectorTypes = UIDataDetectorTypeNone;\r\n  webview.allowsInlineMediaPlayback = NO;\r\n</pre>\r\nor \r\n<pre>\r\n  // Remove and disable all URL Cache, but doesn't seem to affect the memory\r\n  [[NSURLCache sharedURLCache] removeAllCachedResponses];\r\n  [[NSURLCache sharedURLCache] setDiskCapacity:0];\r\n  [[NSURLCache sharedURLCache] setMemoryCapacity:0];\r\n</pre>\r\nor\r\n<pre>\r\n  // Remove all credential on release, but memory used doesn't move!\r\n  NSURLCredentialStorage *credentialsStorage = [NSURLCredentialStorage sharedCredentialStorage];\r\n  NSDictionary *allCredentials = [credentialsStorage allCredentials];\r\n  for (NSURLProtectionSpace *protectionSpace in allCredentials) {\r\n    NSDictionary *credentials = [credentialsStorage credentialsForProtectionSpace:protectionSpace];\r\n    for (NSString *credentialKey in credentials) {\r\n      [credentialsStorage removeCredential:[credentials objectForKey:credentialKey] forProtectionSpace:protectionSpace];\r\n    }\r\n  }\r\n</pre>\r\nor\r\n<pre>\r\n  // Cleanup the HTML document by removing all content\r\n  // This time, this hack free some additional memory on some websites, mainly big ones with a lot of content\r\n  [webview stringByEvaluatingJavaScriptFromString:@\"document.body.innerHTML='';\"];\r\n</pre>\r\n<br/><br/>\r\nBut I never reach complete release of memory used by the web component :(","<p>Continue on iphone with leaks around UIWebView! Here is another big one with\nno apparent solution. When we try to release a UIWebView component, very few\nmemory is freed. So any application using this object to display webpages is\ngoing to crash quickly with Low memory exception :(</p>\n<br />\nI think this memory usage graph gives an idea on how big is this new king of\nleak: <img src=\"/public/iphone-sdk/profile-uiwebview-leak-onrelease.png\" alt=\"memory usage\" style=\"margin: 0 auto; display: block;\" title=\"memory usage\" />\n<ol>\n<li>Create a UIWebView</li>\n<li>Load http://www.google.com/</li>\n<li>Release the webview (UIWebView dealloc is correctly called!)<br />\nLook how so few memory is freed :/</li>\n</ol>\n<p style=\"text-align: center\"><a href=\"/public/iphone-sdk/UIWebViewLeaks2.zip\">Test Application</a></p>\n<p>The leak is all but tiny! Before the loading of the webpage, the application\nwas using 630kB of memory, and after the release of the UIWebview, 1150kB! So\nwe have a 500KB leak in order to simply display the home of Google.com!</p>\n<p>This time, I didn't manage to find any hack to solve this bug.<br />\nSo if you have any tips to fix this, don't hesitate to post a comment!</p>\nI've tried a lot of differents hacks to free more memory (or use less), like:\n<pre>\n  // Setup the webview to disable some fancy effect on phone number, but doesn't change anything on memory released ...\n  webview.dataDetectorTypes = UIDataDetectorTypeNone;\n  webview.allowsInlineMediaPlayback = NO;\n</pre>\nor\n<pre>\n  // Remove and disable all URL Cache, but doesn't seem to affect the memory\n  [[NSURLCache sharedURLCache] removeAllCachedResponses];\n  [[NSURLCache sharedURLCache] setDiskCapacity:0];\n  [[NSURLCache sharedURLCache] setMemoryCapacity:0];\n</pre>\nor\n<pre>\n  // Remove all credential on release, but memory used doesn't move!\n  NSURLCredentialStorage *credentialsStorage = [NSURLCredentialStorage sharedCredentialStorage];\n  NSDictionary *allCredentials = [credentialsStorage allCredentials];\n  for (NSURLProtectionSpace *protectionSpace in allCredentials) {\n    NSDictionary *credentials = [credentialsStorage credentialsForProtectionSpace:protectionSpace];\n    for (NSString *credentialKey in credentials) {\n      [credentialsStorage removeCredential:[credentials objectForKey:credentialKey] forProtectionSpace:protectionSpace];\n    }\n  }\n</pre>\nor\n<pre>\n  // Cleanup the HTML document by removing all content\n  // This time, this hack free some additional memory on some websites, mainly big ones with a lot of content\n  [webview stringByEvaluatingJavaScriptFromString:@&quot;document.body.innerHTML='';&quot;];\n</pre>\n<br />\n<br />\nBut I never reach complete release of memory used by the web component :(","","uiwebview secrets part2 leaks release continue iphone with leaks around uiwebview here another big one with apparent solution when try release uiwebview component very few memory freed any application using this object display webpages going crash quickly with low memory exception think this memory usage graph gives idea how big this new king leak create uiwebview load http www google com release the webview uiwebview dealloc correctly called look how few memory freed test application the leak all but tiny before the loading the webpage the application was using 630kb memory and after the release the uiwebview 1150kb have 500kb leak order simply display the home google com this time didn manage find any hack solve this bug you have any tips fix this don hesitate post comment tried lot differents hacks free more memory use less like setup the webview disable some fancy effect phone number but doesn change anything memory released webview datadetectortypes uidatadetectortypenone webview allowsinlinemediaplayback remove and disable all url cache but doesn seem affect the memory nsurlcache sharedurlcache removeallcachedresponses nsurlcache sharedurlcache setdiskcapacity nsurlcache sharedurlcache setmemorycapacity remove all credential release but memory used doesn move nsurlcredentialstorage credentialsstorage nsurlcredentialstorage sharedcredentialstorage nsdictionary allcredentials credentialsstorage allcredentials for nsurlprotectionspace protectionspace allcredentials nsdictionary credentials credentialsstorage credentialsforprotectionspace protectionspace for nsstring credentialkey credentials credentialsstorage removecredential credentials objectforkey credentialkey forprotectionspace protectionspace cleanup the html document removing all content this time this hack free some additional memory some websites mainly big ones with lot content webview stringbyevaluatingjavascriptfromstring quot document body innerhtml quot but never reach complete release memory used the web component","a:1:{s:3:\"tag\";a:2:{i:0;s:4:\"leak\";i:1;s:9:\"UIWebView\";}}","1","0","1","1","6","0","0"
"456517","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18841","2009-11-06 19:38:00","Europe/Paris","2009-10-31 00:11:14","2009-11-06 18:42:31","","post","xhtml","2009/11/06/Yoono-Desktop-Portable","fr","Yoono Desktop Portable","","","Here is a new Yoono feature that really need some emphasis!\r\n<p style=\"text-align: center\"><a href=\"http://blog.yoono.com/2009/10/get-yoono-desktop-to-go/\" style=\"font-size: 1.5em\">\r\nYoono Desktop Portable</a></p>\r\n<p>\r\nThis new version allows you to launch the Yoono's social network aggregation tool directly from a usb key. And the most important point is that your profile is saved on it, so no personal data is saved in the computer you're using and all your settings and socials updates travel with you.<br />\r\nThe icing on the cake is that it's even more \"portable\" than just that! You can even launch this application on Windows <ins>AND</ins> MacOS!!!\r\n</p>\r\n<p>\r\n<strong>Only two steps to test this :</strong>\r\n<ul>\r\n <li>Unzip <a href=\"http://cache.yoono.com/download/desktop/yoono-desktop-portable.zip\">yoono-desktop-portable.zip</a> somewhere on a usbkey</li>\r\n <li>On windows, launch <em>\"Yoono Desktop Portable.exe\"</em></li>\r\n <li>On macos, launch <em>\"Yoono Desktop Portable\"</em></li>\r\n</ul>\r\n</p>\r\n\r\n<img src=\"/public/YoonoDesktopShort.png\" alt=\"YoonoDesktopShort.png\" style=\"margin: 0 auto; display: block;\" title=\"YoonoDesktopShort.png, nov. 2009\" />\r\n\r\n<p>\r\nThe only drawback is usb drive read/write performance. Depending on drive model Yoono Desktop appears to take long time to load. But we are going to gain a huge speed up with <a href=\"http://autonome.wordpress.com/tag/performance/\">current work</a> on mozilla platform about startup performance. So don't forget to check out yoono desktop portable when Firefox 3.6 is out! (release planned before the end of the year)\r\n</p>","Here is a new Yoono feature that really need some emphasis!\n<p style=\"text-align: center\"><a href=\"http://blog.yoono.com/2009/10/get-yoono-desktop-to-go/\" style=\"font-size: 1.5em\">Yoono Desktop Portable</a></p>\n<p>This new version allows you to launch the Yoono's social network aggregation\ntool directly from a usb key. And the most important point is that your profile\nis saved on it, so no personal data is saved in the computer you're using and\nall your settings and socials updates travel with you.<br />\nThe icing on the cake is that it's even more &quot;portable&quot; than just that! You can\neven launch this application on Windows <ins>AND</ins> MacOS!!!</p>\n<p><strong>Only two steps to test this :</strong></p>\n<ul>\n<li>Unzip <a href=\"http://cache.yoono.com/download/desktop/yoono-desktop-portable.zip\">yoono-desktop-portable.zip</a>\nsomewhere on a usbkey</li>\n<li>On windows, launch <em>&quot;Yoono Desktop Portable.exe&quot;</em></li>\n<li>On macos, launch <em>&quot;Yoono Desktop Portable&quot;</em></li>\n</ul>\n<img src=\"/public/YoonoDesktopShort.png\" alt=\"YoonoDesktopShort.png\" style=\"margin: 0 auto; display: block;\" title=\"YoonoDesktopShort.png, nov. 2009\" />\n<p>The only drawback is usb drive read/write performance. Depending on drive\nmodel Yoono Desktop appears to take long time to load. But we are going to gain\na huge speed up with <a href=\"http://autonome.wordpress.com/tag/performance/\">current work</a> on mozilla\nplatform about startup performance. So don't forget to check out yoono desktop\nportable when Firefox 3.6 is out! (release planned before the end of the\nyear)</p>","","yoono desktop portable here new yoono feature that really need some emphasis yoono desktop portable this new version allows you launch the yoono social network aggregation tool directly from usb key and the most important point that your profile saved personal data saved the computer you using and all your settings and socials updates travel with you the icing the cake that even more quot portable quot than just that you can even launch this application windows and macos only two steps test this unzip yoono desktop portable zip somewhere usbkey windows launch quot yoono desktop portable exe quot macos launch quot yoono desktop portable quot the only drawback usb drive read write performance depending drive model yoono desktop appears take long time load but are going gain huge speed with current work mozilla platform about startup performance don forget check out yoono desktop portable when firefox out release planned before the end the year","a:1:{s:3:\"tag\";a:4:{i:0;s:5:\"yoono\";i:1;s:9:\"xulrunner\";i:2;s:8:\"portable\";i:3;s:7:\"mozilla\";}}","1","0","1","1","4","0","0"
"459004","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18841","2009-11-10 12:25:00","Europe/Paris","2009-11-10 11:25:10","2009-11-10 15:40:37","","post","xhtml","2009/11/10/Google-Chrome-vs-Mozilla-Firefox(with-Jetpack)","fr","Hackability test : Google Chrome vs Mozilla Firefox (with Jetpack)","","","Here is a small summary of what we are able to extend in Chrome and Firefox(with Jetpack).\r\n<br/><br/><br/>\r\n<h1>How to add a new item in context menu (right click menu)</h1>\r\n<strong>In Chrome</strong>\r\n<p>You just can't, <a href=\"http://www.google.com/support/forum/p/Chrome/thread?tid=375371626e2ba749&hl=en\">see here</a>.</p>\r\n<strong>In Firefox, with Jetpack</strong>\r\n<pre>\r\njetpack.future.import(\"menu\");\r\njetpack.future.import(\"selection\");\r\n\r\njetpack.menu.context.page.add(function(context)({\r\n   label: \"My context menu item\",\r\n   command: function(target) {\r\n     \r\n     // Do something fun with this selection\r\n     jetpack.notifications.show( \"Current selection : \"+jetpack.selection.text );\r\n     \r\n   }\r\n }));\r\n</pre>\r\n<img src=\"/public/jetpack-context.png\" alt=\"jetpack-context.png\" style=\"margin: 0 auto; display: block; border: 1px solid black\" title=\"jetpack-context.png, nov. 2009\" />\r\n<a href=\"https://wiki.mozilla.org/Labs/Jetpack/JEP/14\">A lot more information here</a>\r\n<br/><br/><br/>\r\n\r\n<h1>How to add a sidebar ?</h1>\r\n<strong>In Chrome</strong>\r\n<p>You just can't, it's a well known limitation, but nobody say it loud.</p>\r\n<strong>In Firefox, with Jetpack</strong>\r\n<pre>\r\njetpack.future.import(\"slideBar\");\r\njetpack.slideBar.append({\r\n   url: \"about:blank\",\r\n   width: 220,\r\n   persist: true,\r\n   autoReload: false,\r\n   onReady: function(slide){\r\n\r\n     // Do something fun with this sidebar\r\n     var doc = slide.contentDocument;\r\n     doc.body.innerHTML=\"Hello world from techno-barje!\"\r\n\r\n   }\r\n });\r\n</pre>\r\n<img src=\"/public/.jetpack-slidebar_m.jpg\" alt=\"jetpack-slidebar.png\" style=\"margin: 0 auto; display: block; border: 1px solid black\" title=\"jetpack-slidebar.png, nov. 2009\" />\r\n<a href=\"https://wiki.mozilla.org/Labs/Jetpack/JEP/16\">More details here</a>\r\n<br/><br/><br/>\r\n\r\n<h1>How to have settings and display them to users ?</h1>\r\n<strong>In Chrome</strong>\r\n<p>\r\nYou have to add custom menu somewhere, as you want. \r\nSo each extension may display a different way to fill up their settings ...\r\n</p>\r\n<strong>In Firefox, with Jetpack</strong>\r\n<pre>\r\nvar manifest = {\r\n  settings: [\r\n    {\r\n      name: \"twitter\",\r\n      type: \"group\",\r\n      label: \"Twitter\",\r\n      settings: [\r\n        { name: \"username\", type: \"text\", label: \"Username\" },\r\n        { name: \"password\", type: \"password\", label: \"Password\" }\r\n      ]\r\n    },\r\n    {\r\n      name: \"facebook\",\r\n      type: \"group\",\r\n      label: \"Facebook\",\r\n      settings: [\r\n        { name: \"username\", type: \"text\", label: \"Username\", default: \"jdoe\" },\r\n        { name: \"password\", type: \"password\", label: \"Secret\" }\r\n      ]\r\n    },\r\n    { name: \"music\", type: \"boolean\", label: \"Music\", default: true },\r\n    { name: \"volume\", type: \"range\", label: \"Volume\", min: 0, max: 10, default: 5 },\r\n    { name: \"size\", type: \"number\", label: \"Size\" },\r\n    { name: \"mood\", type: \"member\", label: \"Mood\", set: [\"happy\", \"sad\", \"nonchalant\"] }\r\n  ]\r\n};\r\n</pre>\r\n<img src=\"/public/.jetpack-settings_m.jpg\" alt=\"jetpack-settings.png\" style=\"margin: 0 auto; display: block; border: 1px solid black\" title=\"jetpack-settings.png, nov. 2009\" />\r\n<a href=\"https://wiki.mozilla.org/Labs/Jetpack/JEP/24\">Full planned API</a>(work in progress) <br />\r\n<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=511764\">You can track progress here</a><br />\r\n<a href=\"http://mykzilla.org/jetpack/settings-test.html\">Jetpack demo here</a>\r\n<br/><br/><br/>\r\n\r\n<h1>How to display a system notification (or something like) ?</h1>\r\n<strong>In Chrome</strong>\r\n<p>You may display a custom HTML popup, but you will have to handle youself display/hide of this popup, his style and each extension will have his notification system ...</p>\r\n<strong>In Firefox, with Jetpack</strong>\r\n<pre>\r\njetpack.notifications.show({title: 'hai2u', body: 'o hai.', icon: 'http://www.mozilla.org/favicon.ico'}); \r\n</pre>\r\n<img src=\"/public/jetpack-notifications.png\" alt=\"jetpack-notifications.png\" style=\"margin: 0 auto; display: block; border: 1px solid black\" title=\"jetpack-notifications.png, nov. 2009\" />\r\n<a href=\"https://jetpack.mozillalabs.com/api.html\">More info here</a>\r\n<br/><br/><br/>","Here is a small summary of what we are able to extend in Chrome and\nFirefox(with Jetpack).<br />\n<br />\n<br />\n<h1>How to add a new item in context menu (right click menu)</h1>\n<strong>In Chrome</strong>\n<p>You just can't, <a href=\"http://www.google.com/support/forum/p/Chrome/thread?tid=375371626e2ba749&amp;hl=en\">\nsee here</a>.</p>\n<strong>In Firefox, with Jetpack</strong>\n<pre>\njetpack.future.import(&quot;menu&quot;);\njetpack.future.import(&quot;selection&quot;);\n\njetpack.menu.context.page.add(function(context)({\n   label: &quot;My context menu item&quot;,\n   command: function(target) {\n     \n     // Do something fun with this selection\n     jetpack.notifications.show( &quot;Current selection : &quot;+jetpack.selection.text );\n     \n   }\n }));\n</pre>\n<img src=\"/public/jetpack-context.png\" alt=\"jetpack-context.png\" style=\"margin: 0 auto; display: block; border: 1px solid black\" title=\"jetpack-context.png, nov. 2009\" /> <a href=\"https://wiki.mozilla.org/Labs/Jetpack/JEP/14\">A lot more information\nhere</a><br />\n<br />\n<br />\n<h1>How to add a sidebar ?</h1>\n<strong>In Chrome</strong>\n<p>You just can't, it's a well known limitation, but nobody say it loud.</p>\n<strong>In Firefox, with Jetpack</strong>\n<pre>\njetpack.future.import(&quot;slideBar&quot;);\njetpack.slideBar.append({\n   url: &quot;about:blank&quot;,\n   width: 220,\n   persist: true,\n   autoReload: false,\n   onReady: function(slide){\n\n     // Do something fun with this sidebar\n     var doc = slide.contentDocument;\n     doc.body.innerHTML=&quot;Hello world from techno-barje!&quot;\n\n   }\n });\n</pre>\n<img src=\"/public/.jetpack-slidebar_m.jpg\" alt=\"jetpack-slidebar.png\" style=\"margin: 0 auto; display: block; border: 1px solid black\" title=\"jetpack-slidebar.png, nov. 2009\" /> <a href=\"https://wiki.mozilla.org/Labs/Jetpack/JEP/16\">More details here</a><br />\n<br />\n<br />\n<h1>How to have settings and display them to users ?</h1>\n<strong>In Chrome</strong>\n<p>You have to add custom menu somewhere, as you want. So each extension may\ndisplay a different way to fill up their settings ...</p>\n<strong>In Firefox, with Jetpack</strong>\n<pre>\nvar manifest = {\n  settings: [\n    {\n      name: &quot;twitter&quot;,\n      type: &quot;group&quot;,\n      label: &quot;Twitter&quot;,\n      settings: [\n        { name: &quot;username&quot;, type: &quot;text&quot;, label: &quot;Username&quot; },\n        { name: &quot;password&quot;, type: &quot;password&quot;, label: &quot;Password&quot; }\n      ]\n    },\n    {\n      name: &quot;facebook&quot;,\n      type: &quot;group&quot;,\n      label: &quot;Facebook&quot;,\n      settings: [\n        { name: &quot;username&quot;, type: &quot;text&quot;, label: &quot;Username&quot;, default: &quot;jdoe&quot; },\n        { name: &quot;password&quot;, type: &quot;password&quot;, label: &quot;Secret&quot; }\n      ]\n    },\n    { name: &quot;music&quot;, type: &quot;boolean&quot;, label: &quot;Music&quot;, default: true },\n    { name: &quot;volume&quot;, type: &quot;range&quot;, label: &quot;Volume&quot;, min: 0, max: 10, default: 5 },\n    { name: &quot;size&quot;, type: &quot;number&quot;, label: &quot;Size&quot; },\n    { name: &quot;mood&quot;, type: &quot;member&quot;, label: &quot;Mood&quot;, set: [&quot;happy&quot;, &quot;sad&quot;, &quot;nonchalant&quot;] }\n  ]\n};\n</pre>\n<img src=\"/public/.jetpack-settings_m.jpg\" alt=\"jetpack-settings.png\" style=\"margin: 0 auto; display: block; border: 1px solid black\" title=\"jetpack-settings.png, nov. 2009\" /> <a href=\"https://wiki.mozilla.org/Labs/Jetpack/JEP/24\">Full planned API</a>(work in\nprogress)<br />\n<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=511764\">You can track\nprogress here</a><br />\n<a href=\"http://mykzilla.org/jetpack/settings-test.html\">Jetpack demo\nhere</a><br />\n<br />\n<br />\n<h1>How to display a system notification (or something like) ?</h1>\n<strong>In Chrome</strong>\n<p>You may display a custom HTML popup, but you will have to handle youself\ndisplay/hide of this popup, his style and each extension will have his\nnotification system ...</p>\n<strong>In Firefox, with Jetpack</strong>\n<pre>\njetpack.notifications.show({title: 'hai2u', body: 'o hai.', icon: 'http://www.mozilla.org/favicon.ico'}); \n</pre>\n<img src=\"/public/jetpack-notifications.png\" alt=\"jetpack-notifications.png\" style=\"margin: 0 auto; display: block; border: 1px solid black\" title=\"jetpack-notifications.png, nov. 2009\" /> <a href=\"https://jetpack.mozillalabs.com/api.html\">More info here</a><br />\n<br />\n<br />","","hackability test google chrome mozilla firefox with jetpack here small summary what are able extend chrome and firefox with jetpack how add new item context menu right click menu chrome you just can see here firefox with jetpack jetpack future import quot menu quot jetpack future import quot selection quot jetpack menu context page add function context label quot context menu item quot command function target something fun with this selection jetpack notifications show quot current selection quot jetpack selection text lot more information here how add sidebar chrome you just can well known limitation but nobody say loud firefox with jetpack jetpack future import quot slidebar quot jetpack slidebar append url quot about blank quot width 220 persist true autoreload false onready function slide something fun with this sidebar var doc slide contentdocument doc body innerhtml quot hello world from techno barje quot more details here how have settings and display them users chrome you have add custom menu somewhere you want each extension may display different way fill their settings firefox with jetpack var manifest settings name quot twitter quot type quot group quot label quot twitter quot settings name quot username quot type quot text quot label quot username quot name quot password quot type quot password quot label quot password quot name quot facebook quot type quot group quot label quot facebook quot settings name quot username quot type quot text quot label quot username quot default quot jdoe quot name quot password quot type quot password quot label quot secret quot name quot music quot type quot boolean quot label quot music quot default true name quot volume quot type quot range quot label quot volume quot min max default name quot size quot type quot number quot label quot size quot name quot mood quot type quot member quot label quot mood quot set quot happy quot quot sad quot quot nonchalant quot full planned api work progress you can track progress here jetpack demo here how display system notification something like chrome you may display custom html popup but you will have handle youself display hide this popup his style and each extension will have his notification system firefox with jetpack jetpack notifications show title hai2u body hai icon http www mozilla org favicon ico more info here","a:1:{s:3:\"tag\";a:3:{i:0;s:6:\"chrome\";i:1;s:7:\"jetpack\";i:2;s:7:\"firefox\";}}","1","0","1","1","4","0","0"
"552586","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","44812","2010-10-11 18:28:00","Europe/Paris","2010-10-06 17:02:38","2010-10-11 16:39:00","","post","xhtml","2010/10/06/UIWebView-secrets-part3-How-to-properly-call-ObjectiveC-from-Javascript","fr","UIWebView secrets - part3 - How to properly call ObjectiveC from Javascript","","","Let's change the subject: this time no more talks about memory but always on UIWebView component.\r\nWhen we use this component for something else than just displaying webpages, like building UI with HTML, Javascript, ... We often want to call Javascript functions from objective C and the opposite. \r\n<br/> <br/>\r\n\r\n<h2>Call Javascript function from Objective-C:</h2>\r\nThe first move is easily done with the following piece of code:\r\n<pre>\r\n  // In your Javascript files:\r\n    function myJavascriptFunction () {\r\n    \r\n      // Do whatever your want!\r\n    \r\n    }\r\n  \r\n  // -----------------------------------\r\n  \r\n  // And in your Objective-C code:\r\n  // Call Javascript function from Objective-C:\r\n    [webview stringByEvaluatingJavaScriptFromString:@\"myJavascriptFunction()\"];\r\n</pre>\r\n<br /> <br/>\r\n\r\n<h2>Call Objective-C function from Javascript:</h2>\r\nBut calling objective-c from a Javascript function is not easy as Iphone SDK doesn't offer any native way to do this! So we have to use any king of hack to do this ... <br/>\r\nThe most known, used <ins>and buggy</ins>&nbsp;practice is to register a <em>UIWebViewDelegate</em> on your web view and &laquo; catch-and-immediatly-cancel &raquo; a location change done in javascript.\r\n<p style=\"text-align:right\">\r\n(a <a href=\"http://stackoverflow.com/questions/3275093/call-objective-c-method-from-javascript-with-parameter\">very</a>\r\n<a href=\"http://stackoverflow.com/questions/243459/uiwebview-expose-objective-c-to-javascript\">extremely</a>\r\n<a href=\"http://stackoverflow.com/questions/2767902/what-are-some-methods-to-debug-javascript-inside-of-a-uiwebview\">plenty</a>\r\n<a href=\"http://tetontech.wordpress.com/2008/08/14/calling-objective-c-from-javascript-in-an-iphone-uiwebview/\">much</a>\r\n<a href=\"http://www.iphonedevsdk.com/forum/iphone-sdk-development/14501-javascript-interaction-uiwebview-app.html\">advised</a> practice!)\r\n</p>\r\n\r\n<pre>\r\n  // In Objective-C\r\n  - someFunctionOnInit {\r\n    \r\n    webView = [[UIWebView alloc] init];\r\n    // Register the UIWebViewDelegate in order to shouldStartLoadWithRequest to be called (next function)\r\n    webView.delegate = self;  \r\n    \r\n  }\r\n  \r\n  // This function is called on all location change :\r\n  - (BOOL)webView:(UIWebView *)webView2 \r\n          shouldStartLoadWithRequest:(NSURLRequest *)request \r\n          navigationType:(UIWebViewNavigationType)navigationType {\r\n    \r\n    // Intercept custom location change, URL begins with \"js-call:\"\r\n    if ([[[request URL] absoluteString] hasPrefix:@\"js-call:\"]) {\r\n      \r\n      // Extract the selector name from the URL\r\n      NSArray *components = [requestString componentsSeparatedByString:@\":\"];\r\n      NSString *function = [components objectAtIndex:1];\r\n      \r\n      // Call the given selector\r\n      [self performSelector:NSSelectorFromString(functionName)];\r\n      \r\n      // Cancel the location change\r\n      return NO;\r\n    }\r\n    \r\n    // Accept this location change\r\n    return YES;\r\n    \r\n  }\r\n  \r\n  - (void)myObjectiveCFunction {\r\n    \r\n    // Do whatever you want!\r\n   \r\n  }\r\n\r\n  // -----------------------------------\r\n  \r\n  // Now in your javascript simply do this to call your objective-c function:\r\n  // /!\ But for those who just read title and code, take care, this is a buggy practice /!\\r\n  window.location = \"js-call:myObjectiveCFunction\";\r\n\r\n</pre>\r\n<br/><br/>\r\n<h2>What's wrong with UIWebViewDelegate, shouldStartLoadWithRequest and location change ?</h2>\r\nThere is weird but apprehensible bugs with this practice: <br/>\r\na lot of javascript/html stuff get broken when we cancel a location change:\r\n<ul>\r\n  <li>All setInterval and setTimeout immediatly stop on location change</li>\r\n  <li>Every innerHTML won't work after a canceled location change!</li>\r\n  <li>You may get other really weird bugs, really hard to diagnose ...</li>\r\n</ul>\r\n<p style=\"text-align: center\">\r\n  <a href=\"/public/iphone-sdk/NativeBridge/NativeBridge-bug.zip\" style=\"font-size:2em\">Sample application highlighting these bugs</a>\r\n</p>\r\nKey files of this example:\r\n<ul>\r\n<li><strong>MyWebview.m:</strong> Objective-c part, that inherit from UIWebView. Set the UIWebViewDelegate and catch requests in shouldStartLoadWithRequest selector.</li>\r\n<li><strong>NativeBridge.js:</strong> Tiny javascript library in order to change the location and offer a way to send arguments and receive a response.</li>\r\n<li><strong>webview-script.js:</strong> Test case script, that highlight these bugs.</li>\r\n</ul>\r\n\r\nIn webview-script.js: InnerHTML stop working whereas textContent continues to ...\r\n<pre>\r\n  document.getElementById(\"count\").innerHTML = i;\r\n  document.getElementById(\"count2\").textContent = i;\r\n</pre>\r\n<br/>\r\n\r\nBut we can't charge Apple on this bug. I mean we try to load another location in the document we are working on! The webview component may start doing stuff before the delegate call, which cancel the load ... <br/>\r\nWe have to find alternative way to communicate with the native code!\r\n\r\n<br />\r\n<br/>\r\n\r\n<h2>Better way to call Objective-C</h2>\r\nThe only thing we have to change is in Javascript code. Instead of changing the document location,\r\nwe create an IFrame and set its location to a value that trigger the shouldStartLoadWithRequest method. <br/>\r\nAnd voilà!\r\n<pre>\r\n  var iframe = document.createElement(\"IFRAME\");\r\n  iframe.setAttribute(\"src\", \"js-frame:myObjectiveCFunction\";\r\n  document.documentElement.appendChild(iframe);\r\n  iframe.parentNode.removeChild(iframe);\r\n  iframe = null;\r\n</pre>\r\nHere is another sample application, with exactly the same structures and test file.<br/>\r\nBut this time you are going to see innerHTML and setTimeout working!\r\nAgain, this demo contains a library (NativeBridge.js) that allow to send arguments to native code and get back a result in javascript asynchronously, with a callback function.\r\n<p style=\"text-align: center\">\r\n  <a href=\"/public/iphone-sdk/NativeBridge/NativeBridge-non-buggy.zip\" style=\"font-size:2em;\">Best practice example!</a>\r\n</p>\r\n\r\n<br/><br/>\r\n<h2>Free Objective-C<->Javascript library</h2>\r\n\r\nFinally I provide the communication library under LGPL licence so it can ease your work on iphone platform! \r\nAs I know that it's really not easy ;-)<br />\r\n<ul>\r\n<li><a href=\"http://github.com/ochameau/NativeBridge/blob/master/MyWebView.m\" style=\"font-weight:bold;\">MyWebView.m</a>: ObjectiveC part,</li>\r\n<li><a href=\"http://github.com/ochameau/NativeBridge/blob/master/NativeBridge.js\" style=\"font-weight:bold;\">NativeBridge.js</a>: Javascript side.</li>\r\n</ul>\r\nThe code is full of comment, so you may easily use and tweak it!\r\n<p style=\"text-align: center\">\r\n  <a href=\"http://github.com/ochameau/NativeBridge\">Github repo</a>\r\n</p>","Let's change the subject: this time no more talks about memory but always on\nUIWebView component. When we use this component for something else than just\ndisplaying webpages, like building UI with HTML, Javascript, ... We often want\nto call Javascript functions from objective C and the opposite.<br />\n<br />\n<h2>Call Javascript function from Objective-C:</h2>\nThe first move is easily done with the following piece of code:\n<pre>\n  // In your Javascript files:\n    function myJavascriptFunction () {\n    \n      // Do whatever your want!\n    \n    }\n  \n  // -----------------------------------\n  \n  // And in your Objective-C code:\n  // Call Javascript function from Objective-C:\n    [webview stringByEvaluatingJavaScriptFromString:@&quot;myJavascriptFunction()&quot;];\n</pre>\n<br />\n<br />\n<h2>Call Objective-C function from Javascript:</h2>\nBut calling objective-c from a Javascript function is not easy as Iphone SDK\ndoesn't offer any native way to do this! So we have to use any king of hack to\ndo this ...<br />\nThe most known, used <ins>and buggy</ins> practice is to register a\n<em>UIWebViewDelegate</em> on your web view and « catch-and-immediatly-cancel »\na location change done in javascript.\n<p style=\"text-align:right\">(a <a href=\"http://stackoverflow.com/questions/3275093/call-objective-c-method-from-javascript-with-parameter\">\nvery</a> <a href=\"http://stackoverflow.com/questions/243459/uiwebview-expose-objective-c-to-javascript\">\nextremely</a> <a href=\"http://stackoverflow.com/questions/2767902/what-are-some-methods-to-debug-javascript-inside-of-a-uiwebview\">\nplenty</a> <a href=\"http://tetontech.wordpress.com/2008/08/14/calling-objective-c-from-javascript-in-an-iphone-uiwebview/\">\nmuch</a> <a href=\"http://www.iphonedevsdk.com/forum/iphone-sdk-development/14501-javascript-interaction-uiwebview-app.html\">\nadvised</a> practice!)</p>\n<pre>\n  // In Objective-C\n  - someFunctionOnInit {\n    \n    webView = [[UIWebView alloc] init];\n    // Register the UIWebViewDelegate in order to shouldStartLoadWithRequest to be called (next function)\n    webView.delegate = self;  \n    \n  }\n  \n  // This function is called on all location change :\n  - (BOOL)webView:(UIWebView *)webView2 \n          shouldStartLoadWithRequest:(NSURLRequest *)request \n          navigationType:(UIWebViewNavigationType)navigationType {\n    \n    // Intercept custom location change, URL begins with &quot;js-call:&quot;\n    if ([[[request URL] absoluteString] hasPrefix:@&quot;js-call:&quot;]) {\n      \n      // Extract the selector name from the URL\n      NSArray *components = [requestString componentsSeparatedByString:@&quot;:&quot;];\n      NSString *function = [components objectAtIndex:1];\n      \n      // Call the given selector\n      [self performSelector:NSSelectorFromString(functionName)];\n      \n      // Cancel the location change\n      return NO;\n    }\n    \n    // Accept this location change\n    return YES;\n    \n  }\n  \n  - (void)myObjectiveCFunction {\n    \n    // Do whatever you want!\n   \n  }\n\n  // -----------------------------------\n  \n  // Now in your javascript simply do this to call your objective-c function:\n  // /!\ But for those who just read title and code, take care, this is a buggy practice /!\\n  window.location = &quot;js-call:myObjectiveCFunction&quot;;\n\n</pre>\n<br />\n<br />\n<h2>What's wrong with UIWebViewDelegate, shouldStartLoadWithRequest and\nlocation change ?</h2>\nThere is weird but apprehensible bugs with this practice:<br />\na lot of javascript/html stuff get broken when we cancel a location change:\n<ul>\n<li>All setInterval and setTimeout immediatly stop on location change</li>\n<li>Every innerHTML won't work after a canceled location change!</li>\n<li>You may get other really weird bugs, really hard to diagnose ...</li>\n</ul>\n<p style=\"text-align: center\"><a href=\"/public/iphone-sdk/NativeBridge/NativeBridge-bug.zip\" style=\"font-size:2em\">Sample application highlighting these bugs</a></p>\nKey files of this example:\n<ul>\n<li><strong>MyWebview.m:</strong> Objective-c part, that inherit from\nUIWebView. Set the UIWebViewDelegate and catch requests in\nshouldStartLoadWithRequest selector.</li>\n<li><strong>NativeBridge.js:</strong> Tiny javascript library in order to\nchange the location and offer a way to send arguments and receive a\nresponse.</li>\n<li><strong>webview-script.js:</strong> Test case script, that highlight these\nbugs.</li>\n</ul>\nIn webview-script.js: InnerHTML stop working whereas textContent continues to\n...\n<pre>\n  document.getElementById(&quot;count&quot;).innerHTML = i;\n  document.getElementById(&quot;count2&quot;).textContent = i;\n</pre>\n<br />\nBut we can't charge Apple on this bug. I mean we try to load another location\nin the document we are working on! The webview component may start doing stuff\nbefore the delegate call, which cancel the load ...<br />\nWe have to find alternative way to communicate with the native code!<br />\n<br />\n<h2>Better way to call Objective-C</h2>\nThe only thing we have to change is in Javascript code. Instead of changing the\ndocument location, we create an IFrame and set its location to a value that\ntrigger the shouldStartLoadWithRequest method.<br />\nAnd voilà!\n<pre>\n  var iframe = document.createElement(&quot;IFRAME&quot;);\n  iframe.setAttribute(&quot;src&quot;, &quot;js-frame:myObjectiveCFunction&quot;;\n  document.documentElement.appendChild(iframe);\n  iframe.parentNode.removeChild(iframe);\n  iframe = null;\n</pre>\nHere is another sample application, with exactly the same structures and test\nfile.<br />\nBut this time you are going to see innerHTML and setTimeout working! Again,\nthis demo contains a library (NativeBridge.js) that allow to send arguments to\nnative code and get back a result in javascript asynchronously, with a callback\nfunction.\n<p style=\"text-align: center\"><a href=\"/public/iphone-sdk/NativeBridge/NativeBridge-non-buggy.zip\" style=\"font-size:2em;\">Best practice example!</a></p>\n<br />\n<br />\n<h2>Free Objective-C&lt;-&gt;Javascript library</h2>\nFinally I provide the communication library under LGPL licence so it can ease\nyour work on iphone platform! As I know that it's really not easy ;-)<br />\n<ul>\n<li><a href=\"http://github.com/ochameau/NativeBridge/blob/master/MyWebView.m\" style=\"font-weight:bold;\">MyWebView.m</a>: ObjectiveC part,</li>\n<li><a href=\"http://github.com/ochameau/NativeBridge/blob/master/NativeBridge.js\" style=\"font-weight:bold;\">NativeBridge.js</a>: Javascript side.</li>\n</ul>\nThe code is full of comment, so you may easily use and tweak it!\n<p style=\"text-align: center\"><a href=\"http://github.com/ochameau/NativeBridge\">Github repo</a></p>","","uiwebview secrets part3 how properly call objectivec from javascript let change the subject this time more talks about memory but always uiwebview component when use this component for something else than just displaying webpages like building with html javascript often want call javascript functions from objective and the opposite call javascript function from objective the first move easily done with the following piece code your javascript files function myjavascriptfunction whatever your want and your objective code call javascript function from objective webview stringbyevaluatingjavascriptfromstring quot myjavascriptfunction quot call objective function from javascript but calling objective from javascript function not easy iphone sdk doesn offer any native way this have use any king hack this the most known used and buggy practice register uiwebviewdelegate your web view and catch and immediatly cancel location change done javascript very extremely plenty much advised practice objective somefunctiononinit webview uiwebview alloc init register the uiwebviewdelegate order shouldstartloadwithrequest called next function webview delegate self this function called all location change bool webview uiwebview webview2 shouldstartloadwithrequest nsurlrequest request navigationtype uiwebviewnavigationtype navigationtype intercept custom location change url begins with quot call quot request url absolutestring hasprefix quot call quot extract the selector name from the url nsarray components requeststring componentsseparatedbystring quot quot nsstring function components objectatindex call the given selector self performselector nsselectorfromstring functionname cancel the location change return accept this location change return yes void myobjectivecfunction whatever you want now your javascript simply this call your objective function but for those who just read title and code take care this buggy practice window location quot call myobjectivecfunction quot what wrong with uiwebviewdelegate shouldstartloadwithrequest and location change there weird but apprehensible bugs with this practice lot javascript html stuff get broken when cancel location change all setinterval and settimeout immediatly stop location change every innerhtml won work after canceled location change you may get other really weird bugs really hard diagnose sample application highlighting these bugs key files this example mywebview objective part that inherit from uiwebview set the uiwebviewdelegate and catch requests shouldstartloadwithrequest selector nativebridge tiny javascript library order change the location and offer way send arguments and receive response webview script test case script that highlight these bugs webview script innerhtml stop working whereas textcontent continues document getelementbyid quot count quot innerhtml document getelementbyid quot count2 quot textcontent but can charge apple this bug mean try load another location the document are working the webview component may start doing stuff before the delegate call which cancel the load have find alternative way communicate with the native code better way call objective the only thing have change javascript code instead changing the document location create iframe and set its location value that trigger the shouldstartloadwithrequest method and voilà var iframe document createelement quot iframe quot iframe setattribute quot src quot quot frame myobjectivecfunction quot document documentelement appendchild iframe iframe parentnode removechild iframe iframe null here another sample application with exactly the same structures and test file but this time you are going see innerhtml and settimeout working again this demo contains library nativebridge that allow send arguments native code and get back result javascript asynchronously with callback function best practice example free objective javascript library finally provide the communication library under lgpl licence can ease your work iphone platform know that really not easy mywebview objectivec part nativebridge javascript side the code full comment you may easily use and tweak github repo","a:1:{s:3:\"tag\";a:2:{i:0;s:10:\"objectivec\";i:1;s:10:\"javascript\";}}","1","0","1","1","5","0","0"
"462469","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18841","2009-11-26 09:02:00","Europe/Paris","2009-11-25 21:57:42","2009-11-26 08:02:15","","post","xhtml","2009/11/26/Mozilla-memory-profiling,-part-2","en","Mozilla memory profiling, part 2: a working tool","","","Here is another part of my work on memory analysis in Mozilla : \r\n<p style=\"text-align: center\">\r\n  <a href=\"/public/another-profiler/another-profiler_techno-barje.fr.xpi\" style=\"font-size: 2em;\">another-profiler_techno-barje.fr.xpi</a>\r\n</p>\r\n<br />\r\nThis new version of \"Another memory profiler\" is now an effective tool, which display a lot of information about all objects living in your Firefox instance!\r\nBy <em>all</em> I mean not only website javascript objects, but all objects used by Firefox in its windows, sidebars, extensions, all tabs, iframes, etc.\r\nThe previous version allowed you only to select one component : a DOM window(website, sub-iframe or any XUL window), a XPCOM service or a JS Module : <br /><br />\r\n<img src=\"/public/another-profiler/.another-components-list_m.jpg\" alt=\"another-components-list.png\" style=\"margin: 0 auto; display: block; border: 1px solid black\" title=\"another-components-list.png, nov. 2009\" />\r\n<div style=\"text-align: center; font-weight: bold\">Component selection</div>\r\n<br />\r\n\r\nNow you can get a report about currently living objects : the ones that are still used because there is at least one reference to each of them.\r\nThis report first display all javascript files involved in your component : \r\n<br /><br />\r\n<img src=\"/public/another-profiler/.another-lines-browser_m.jpg\" alt=\"another-lines-browser.png\" style=\"margin: 0 auto; display: block; border: 1px solid black\" title=\"another-lines-browser.png, nov. 2009\" />\r\n<div style=\"text-align: center; font-weight: bold\">File selection</div>\r\n<br />\r\n\r\nBy selecting one file, you are seeing the number of living object sorted by there instantiation line :<br /><br />\r\n<img src=\"/public/another-profiler/.another-objects-browser_m.jpg\" alt=\"another-objects-browser.png\" style=\"margin: 0 auto; display: block;\" title=\"another-objects-browser.png, nov. 2009\" />\r\n<div style=\"text-align: center; font-weight: bold\">Living objects information</div>\r\n<br />\r\nFinally, this tool display objects counts for each line sorted by there type.\r\nBut Javascript is not a strongly typed language, so it's not really easy to sort its objects by a type! That's why there are several way to describe a JS object :\r\n<ul>\r\n<li>Define a JS object by its attributes, like Atul Varma is doing in <a href=\"http://www.toolness.com/wp/?p=709\">its current work</a>, </li>\r\n<li>By its JS Prototype name, very usefull \"typing\" when you are using Prototype and build Object-Oriented JS,</li>\r\n<li>We are facing some specialized objects like all DOM objects : HTMLFormElement, HTMLDivElement, ... </li>\r\n<li>And finally all native types, like Array, String, Date, RegExp, ... etc.</li>\r\n</ul>\r\n<br/><br/>\r\nFinally, let's see how to make this extension work :\r\n<ul>\r\n<li><strong>First</strong> It contains a binary component which is only built for Firefox 3.5 and 3.6 for Windows and Linux-32.</li>\r\n<li><strong>Secondly</strong> The memory profiling component is a patched version of the Mozilla Jetpack's one, so take care to disable Jetpack, before testing this!</li>\r\n<li><strong>Then</strong>\r\nIn order to get the maximum information about your living JS object, I strongly encourage you to set these two prefs to false :\r\n<pre>\r\njavascript.options.jit.content = false\r\njavascript.options.jit.chrome = false\r\n</pre>\r\n(That's because Tracemonkey optimise loops and seems to embed empty stack frame information on these loop's execution ...)\r\n</li>\r\n<li>That being said, you just have to install this extension <a href=\"/public/another-profiler/another-profiler_techno-barje.fr.xpi\">another-profiler_techno-barje.fr.xpi</a>, go to your Tools menu and click on \"Open another memory profiler\".</li>\r\n</ul>\r\n<br/><br/>\r\n<strong>Come back for the next post for some more explanation on displayed results with simple scripts examples.</strong>","Here is another part of my work on memory analysis in Mozilla :\n<p style=\"text-align: center\"><a href=\"/public/another-profiler/another-profiler_techno-barje.fr.xpi\" style=\"font-size: 2em;\">another-profiler_techno-barje.fr.xpi</a></p>\n<br />\nThis new version of &quot;Another memory profiler&quot; is now an effective tool, which\ndisplay a lot of information about all objects living in your Firefox instance!\nBy <em>all</em> I mean not only website javascript objects, but all objects\nused by Firefox in its windows, sidebars, extensions, all tabs, iframes, etc.\nThe previous version allowed you only to select one component : a DOM\nwindow(website, sub-iframe or any XUL window), a XPCOM service or a JS Module\n:<br />\n<br />\n<img src=\"/public/another-profiler/.another-components-list_m.jpg\" alt=\"another-components-list.png\" style=\"margin: 0 auto; display: block; border: 1px solid black\" title=\"another-components-list.png, nov. 2009\" />\n<div style=\"text-align: center; font-weight: bold\">Component selection</div>\n<br />\nNow you can get a report about currently living objects : the ones that are\nstill used because there is at least one reference to each of them. This report\nfirst display all javascript files involved in your component :<br />\n<br />\n<img src=\"/public/another-profiler/.another-lines-browser_m.jpg\" alt=\"another-lines-browser.png\" style=\"margin: 0 auto; display: block; border: 1px solid black\" title=\"another-lines-browser.png, nov. 2009\" />\n<div style=\"text-align: center; font-weight: bold\">File selection</div>\n<br />\nBy selecting one file, you are seeing the number of living object sorted by\nthere instantiation line :<br />\n<br />\n<img src=\"/public/another-profiler/.another-objects-browser_m.jpg\" alt=\"another-objects-browser.png\" style=\"margin: 0 auto; display: block;\" title=\"another-objects-browser.png, nov. 2009\" />\n<div style=\"text-align: center; font-weight: bold\">Living objects\ninformation</div>\n<br />\nFinally, this tool display objects counts for each line sorted by there type.\nBut Javascript is not a strongly typed language, so it's not really easy to\nsort its objects by a type! That's why there are several way to describe a JS\nobject :\n<ul>\n<li>Define a JS object by its attributes, like Atul Varma is doing in <a href=\"http://www.toolness.com/wp/?p=709\">its current work</a>,</li>\n<li>By its JS Prototype name, very usefull &quot;typing&quot; when you are using\nPrototype and build Object-Oriented JS,</li>\n<li>We are facing some specialized objects like all DOM objects :\nHTMLFormElement, HTMLDivElement, ...</li>\n<li>And finally all native types, like Array, String, Date, RegExp, ...\netc.</li>\n</ul>\n<br />\n<br />\nFinally, let's see how to make this extension work :\n<ul>\n<li><strong>First</strong> It contains a binary component which is only built\nfor Firefox 3.5 and 3.6 for Windows and Linux-32.</li>\n<li><strong>Secondly</strong> The memory profiling component is a patched\nversion of the Mozilla Jetpack's one, so take care to disable Jetpack, before\ntesting this!</li>\n<li><strong>Then</strong> In order to get the maximum information about your\nliving JS object, I strongly encourage you to set these two prefs to false :\n<pre>\njavascript.options.jit.content = false\njavascript.options.jit.chrome = false\n</pre>\n(That's because Tracemonkey optimise loops and seems to embed empty stack frame\ninformation on these loop's execution ...)</li>\n<li>That being said, you just have to install this extension <a href=\"/public/another-profiler/another-profiler_techno-barje.fr.xpi\">another-profiler_techno-barje.fr.xpi</a>,\ngo to your Tools menu and click on &quot;Open another memory profiler&quot;.</li>\n</ul>\n<br />\n<br />\n<strong>Come back for the next post for some more explanation on displayed\nresults with simple scripts examples.</strong>","","mozilla memory profiling part working tool here another part work memory analysis mozilla another profiler techno barje xpi this new version quot another memory profiler quot now effective tool which display lot information about all objects living your firefox instance all mean not only website javascript objects but all objects used firefox its windows sidebars extensions all tabs iframes etc the previous version allowed you only select one component dom window website sub iframe any xul window xpcom service module component selection now you can get report about currently living objects the ones that are still used because there least one reference each them this report first display all javascript files involved your component file selection selecting one file you are seeing the number living object sorted there instantiation line living objects information finally this tool display objects counts for each line sorted there type but javascript not strongly typed language not really easy sort its objects type that why there are several way describe object define object its attributes like atul varma doing its current work its prototype name very usefull quot typing quot when you are using prototype and build object oriented are facing some specialized objects like all dom objects htmlformelement htmldivelement and finally all native types like array string date regexp etc finally let see how make this extension work first contains binary component which only built for firefox and for windows and linux secondly the memory profiling component patched version the mozilla jetpack one take care disable jetpack before testing this then order get the maximum information about your living object strongly encourage you set these two prefs false javascript options jit content false javascript options jit chrome false that because tracemonkey optimise loops and seems embed empty stack frame information these loop execution that being said you just have install this extension another profiler techno barje xpi your tools menu and click quot open another memory profiler quot come back for the next post for some more explanation displayed results with simple scripts examples","a:1:{s:3:\"tag\";a:3:{i:0;s:9:\"profiling\";i:1;s:6:\"memory\";i:2;s:7:\"mozilla\";}}","1","0","1","1","4","0","0"
"187762","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","","2007-12-21 18:06:00","Europe/Paris","2007-12-21 17:06:48","2007-12-21 17:16:18","","post","wiki","2007/12/21/lets-go","fr","let's go","","","Bon aller, je me lance!%%%\r\nRien de bien original en cette fin d'année 2007 à lancer un blog, néanmoins, j'espère l'agrémenter régulièrement de contenu passionné afin de promouvoir ma vision très personnelle de l'informatique.\r\n\r\nAinsi, je vous invite vivement à passer dans le coin si vous êtes intéressés soit par les technologies employées par __[Mozilla|tag:Mozilla]__ : xul, html, xbl, rdf, xpcom, svg, …, ou si, à l'opposé de l'univers du développement logiciel, vous voyez dans le langage __[OCaml|tag:OCaml]__ de grands espoirs. \r\n\r\nEn effet, je vous montrerais par le biais de projets personnels ou professionnels le potentiel, la viabilité, les défauts et les qualités de ces technologies.\r\n\r\n\r\n\r\nPS : le thème n'est pas super, mais un tout beau arrive, merci Takyon!","<p>Bon aller, je me lance!<br />\nRien de bien original en cette fin d'année 2007 à lancer un blog, néanmoins,\nj'espère l'agrémenter régulièrement de contenu passionné afin de promouvoir ma\nvision très personnelle de l'informatique.</p>\n<p>Ainsi, je vous invite vivement à passer dans le coin si vous êtes intéressés\nsoit par les technologies employées par <strong><a href=\"/tag/Mozilla\">Mozilla</a></strong> : xul, html, xbl, rdf, xpcom, svg, …,\nou si, à l'opposé de l'univers du développement logiciel, vous voyez dans le\nlangage <strong><a href=\"/tag/OCaml\">OCaml</a></strong> de grands espoirs.</p>\n<p>En effet, je vous montrerais par le biais de projets personnels ou\nprofessionnels le potentiel, la viabilité, les défauts et les qualités de ces\ntechnologies.</p>\n<p>PS : le thème n'est pas super, mais un tout beau arrive, merci\nTakyon!</p>","","let bon aller lance rien bien original cette fin année 2007 lancer blog néanmoins espère agrémenter régulièrement contenu passionné afin promouvoir vision très personnelle informatique ainsi vous invite vivement passer dans coin vous êtes intéressés soit par les technologies employées par mozilla xul html xbl rdf xpcom svg opposé univers développement logiciel vous voyez dans langage ocaml grands espoirs effet vous montrerais par biais projets personnels professionnels potentiel viabilité les défauts les qualités ces technologies thème est pas super mais tout beau arrive merci takyon","a:1:{s:3:\"tag\";a:2:{i:0;s:7:\"Mozilla\";i:1;s:5:\"OCaml\";}}","1","0","1","1","2","0","0"
"216820","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18842","2008-03-04 23:38:00","Europe/Paris","2008-03-04 22:38:52","2008-03-07 15:48:57","","post","wiki","2008/03/04/OCaml-embarque-et-flash","fr","OCaml, embarqué et flash","","","Qu'on le veuille ou non, OCaml est utilisable dans l'embarqué!\r\n\r\n!!!! Chumby \r\nCette sorte de nabaztag en forme de radio reveil propose de développer des interfaces/widgets en flash, à l'aide du compilateur ActionScript de Motion twin : [MTASC|http://www.mtasc.org/|en] %%%\r\nDonc l'équipe a intégré dans son sdk le compilateur MTASC et ... le compilateur OCaml puisqu'il est lui même écrit en caml! %%%\r\n[Chumby|http://www.chumby.com/|fr]%%%\r\n[Annonce sur le forum chumby|http://forum.chumby.com/viewtopic.php?pid=9801#9801|fr]\r\n\r\n!!!! Ming\r\nTant que nous parlons de flash, il faut noter l'existence d'un binding pour la librairie ming pour générer des animations flash :%%%\r\n[Binding ming|http://www.linux-nantes.org/~fmonnier/OCaml/ming/|en] %%%\r\n[Exemple d'animation|http://www.linux-nantes.org/~fmonnier/OCaml/ming/set_line.ml.php|en]\r\n\r\n!!!! IPhone\r\nL'interpréteur caml est aussi cross compilable pour l'iphone.%%%\r\n[Patch et guide tutorial de compilation|http://web.yl.is.s.u-tokyo.ac.jp/~tosh/ocaml-on-iphone/|en]","<p>Qu'on le veuille ou non, OCaml est utilisable dans l'embarqué!</p>\n<h2>Chumby</h2>\n<p>Cette sorte de nabaztag en forme de radio reveil propose de développer des\ninterfaces/widgets en flash, à l'aide du compilateur ActionScript de Motion\ntwin : <a href=\"http://www.mtasc.org/\" hreflang=\"en\">MTASC</a><br />\nDonc l'équipe a intégré dans son sdk le compilateur MTASC et ... le compilateur\nOCaml puisqu'il est lui même écrit en caml!<br />\n<a href=\"http://www.chumby.com/\" hreflang=\"fr\">Chumby</a><br />\n<a href=\"http://forum.chumby.com/viewtopic.php?pid=9801#9801\" hreflang=\"fr\">Annonce sur le forum chumby</a></p>\n<h2>Ming</h2>\n<p>Tant que nous parlons de flash, il faut noter l'existence d'un binding pour\nla librairie ming pour générer des animations flash :<br />\n<a href=\"http://www.linux-nantes.org/~fmonnier/OCaml/ming/\" hreflang=\"en\">Binding ming</a><br />\n<a href=\"http://www.linux-nantes.org/~fmonnier/OCaml/ming/set_line.ml.php\" hreflang=\"en\">Exemple d'animation</a></p>\n<h2>IPhone</h2>\n<p>L'interpréteur caml est aussi cross compilable pour l'iphone.<br />\n<a href=\"http://web.yl.is.s.u-tokyo.ac.jp/~tosh/ocaml-on-iphone/\" hreflang=\"en\">Patch et guide tutorial de compilation</a></p>","","ocaml embarqué flash veuille non ocaml est utilisable dans embarqué chumby cette sorte nabaztag forme radio reveil propose développer des interfaces widgets flash aide compilateur actionscript motion twin mtasc donc équipe intégré dans son sdk compilateur mtasc compilateur ocaml puisqu est lui même écrit caml chumby annonce sur forum chumby ming tant que nous parlons flash faut noter existence binding pour librairie ming pour générer des animations flash binding ming exemple animation iphone interpréteur caml est aussi cross compilable pour iphone patch guide tutorial compilation","a:1:{s:3:\"tag\";a:7:{i:0;s:9:\"embarqué\";i:1;s:5:\"mtasc\";i:2;s:17:\"cross compilation\";i:3;s:5:\"ocaml\";i:4;s:4:\"ming\";i:5;s:6:\"iphone\";i:6;s:6:\"chumby\";}}","1","0","1","1","1","0","0"
"202307","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18842","2008-01-29 23:43:00","Europe/Paris","2008-01-29 22:43:53","2008-01-29 23:18:26","","post","wiki","2008/01/29/La-3D-et-le-fonctionnel","fr","La 3D et le fonctionnel","","","!!! [Tim sweeney|http://en.wikipedia.org/wiki/Tim_Sweeney_(game_developer)|en] - [unreal|tag:unreal] engine - pourquoi utiliser le fonctionnel ?\r\nCe cher monsieur intitule sa présentation : [The Next Mainstream Programming Language|http://www.st.cs.uni-sb.de/edu/seminare/2005/advanced-fp/docs/sweeny.pdf?reredd|en],\r\nen citant à maintes reprises Haskell comme exemple à reproduire pour son langage spécialisé dans le développement de moteur 3D qui sera à même d'exploiter les multiples coeurs des processeurs graphiques.\r\nOn pourra rapidement faire le lien avec le [billet précédent|http://blog.techno-barje.fr/post/2008/01/07/Le-fonctionnel-arrive|fr] et intel ... les raisons d'utiliser le fonctionnel pour la 3D et les processeurs mutli-core sont les mêmes.\r\n%%%\r\n\r\n!!! [Ocaml|tag:Ocaml] + [SDL|tag:SDL] + [OpenGL|tag:OpenGL] \r\nC'est possible, et cela a l'air de marcher plutôt bien : \r\n[Compiler le triplet sous windows|http://itmmetelko.com/blog/2008/01/07/compiling-ocaml-sdl-and-opengl-on-windows-mini-tutorial/|en]\r\n[Exemple 1|http://itmmetelko.com/blog/2008/01/13/ocaml-mini-sdl-example-2/|en]\r\n[Exemple 2|http://itmmetelko.com/blog/2008/01/24/ocaml-mini-sdl-example-v3/|en]\r\n%%%\r\n\r\n!!! Des jeux 3D en OCaml ?\r\nOui, cela existe aussi : [Freetennis|http://freetennis.sourceforge.net/|en].\r\nIl y'a même des étudiants qui ont réalisé un jeu pour enfants : [Rigobot|http://www.nongnu.org/rigobot/]\r\noù ils pourront programmer des robots dans un univers en 3D!","<h3><a href=\"http://en.wikipedia.org/wiki/Tim_Sweeney_(game_developer)\" hreflang=\"en\">Tim sweeney</a> - <a href=\"/tag/unreal\">unreal</a> engine -\npourquoi utiliser le fonctionnel ?</h3>\n<p>Ce cher monsieur intitule sa présentation : <a href=\"http://www.st.cs.uni-sb.de/edu/seminare/2005/advanced-fp/docs/sweeny.pdf?reredd\" hreflang=\"en\">The Next Mainstream Programming Language</a>, en citant à maintes\nreprises Haskell comme exemple à reproduire pour son langage spécialisé dans le\ndéveloppement de moteur 3D qui sera à même d'exploiter les multiples coeurs des\nprocesseurs graphiques. On pourra rapidement faire le lien avec le <a href=\"http://blog.techno-barje.fr/post/2008/01/07/Le-fonctionnel-arrive\" hreflang=\"fr\">billet précédent</a> et intel ... les raisons d'utiliser le fonctionnel\npour la 3D et les processeurs mutli-core sont les mêmes.<br /></p>\n<h3><a href=\"/tag/Ocaml\">Ocaml</a> + <a href=\"/tag/SDL\">SDL</a> + <a href=\"/tag/OpenGL\">OpenGL</a></h3>\n<p>C'est possible, et cela a l'air de marcher plutôt bien : <a href=\"http://itmmetelko.com/blog/2008/01/07/compiling-ocaml-sdl-and-opengl-on-windows-mini-tutorial/\" hreflang=\"en\">Compiler le triplet sous windows</a> <a href=\"http://itmmetelko.com/blog/2008/01/13/ocaml-mini-sdl-example-2/\" hreflang=\"en\">Exemple 1</a> <a href=\"http://itmmetelko.com/blog/2008/01/24/ocaml-mini-sdl-example-v3/\" hreflang=\"en\">Exemple 2</a><br /></p>\n<h3>Des jeux 3D en OCaml ?</h3>\n<p>Oui, cela existe aussi : <a href=\"http://freetennis.sourceforge.net/\" hreflang=\"en\">Freetennis</a>. Il y'a même des étudiants qui ont réalisé un jeu\npour enfants : <a href=\"http://www.nongnu.org/rigobot/\">Rigobot</a> où ils\npourront programmer des robots dans un univers en 3D!</p>","","fonctionnel tim sweeney unreal engine pourquoi utiliser fonctionnel cher monsieur intitule présentation the next mainstream programming language citant maintes reprises haskell comme exemple reproduire pour son langage spécialisé dans développement moteur qui sera même exploiter les multiples coeurs des processeurs graphiques pourra rapidement faire lien avec billet précédent intel les raisons utiliser fonctionnel pour les processeurs mutli core sont les mêmes ocaml sdl opengl est possible cela air marcher plutôt bien compiler triplet sous windows exemple exemple des jeux ocaml oui cela existe aussi freetennis même des étudiants qui ont réalisé jeu pour enfants rigobot ils pourront programmer des robots dans univers","a:1:{s:3:\"tag\";a:5:{i:0;s:11:\"Tim sweeney\";i:1;s:6:\"unreal\";i:2;s:6:\"OpenGL\";i:3;s:3:\"SDL\";i:4;s:5:\"Ocaml\";}}","1","0","1","1","0","0","0"
"195200","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18842","2008-01-07 22:16:00","Europe/Paris","2008-01-07 21:16:26","2008-01-09 13:40:07","","post","wiki","2008/01/07/OCaml-est-la","fr","OCaml est là","","","[Ocaml|tag:Ocaml] et la [programmation fonctionnelle|tag:programmation fonctionnelle] sont déjà parmis nous!\r\n\r\n* [MediaWiki|http://fr.wikipedia.org/wiki/MediaWiki#Le_contenu_.C3.A9labor.C3.A9|fr] (le logiciel faisant tourner wikipedia) utilise ocaml pour afficher ses formules mathématiques!\r\n\r\n* KDE fait de même avec son application de tableau périodique des elements chimiques : [kalzium|http://www.framasoft.net/article4052.html|fr], pour résoudre des équations chimiques!\r\n> a CH3CH2OH + b O2 -> c H2O + d CO2 => 1 CH3CH2OH + 3 O2 -> 3 H2O + 2 CO2 %%%\r\n> [Code sources|http://websvn.kde.org/trunk/KDE/kdeedu/kalzium/src/solver/README?revision=437725&view=markup|en]\r\n\r\n* [XSLT|http://fr.wikipedia.org/wiki/XSLT|fr] __est__ une langage fonctionnel décrit en XML!\r\n\r\n* Enfin, un phénomène majeur est l'adoption massive des libraries ''ajax'' comme [jQuery|http://jquery.com/|en].\r\nFigurez vous que ces libraries utilisent fortement les aspects fonctionnels de javascript.%%%\r\nExamples avec jQuery :\r\n\r\n      $('#myButton').bind('click', function() {\r\n          // 'this' is the DOM element that triggered the event\r\n          alert(this.id == 'myButton');\r\n      });\r\n\r\n      $('div').each(function() {\r\n          // 'this' is a DOM element\r\n          alert(this.tagName.toLowerCase() == 'div');\r\n      });","<p><a href=\"/tag/Ocaml\">Ocaml</a> et la <a href=\"/tag/programmation%20fonctionnelle\">programmation fonctionnelle</a> sont déjà\nparmis nous!</p>\n<ul>\n<li><a href=\"http://fr.wikipedia.org/wiki/MediaWiki#Le_contenu_.C3.A9labor.C3.A9\" hreflang=\"fr\">MediaWiki</a> (le logiciel faisant tourner wikipedia) utilise ocaml pour\nafficher ses formules mathématiques!</li>\n</ul>\n<ul>\n<li>KDE fait de même avec son application de tableau périodique des elements\nchimiques : <a href=\"http://www.framasoft.net/article4052.html\" hreflang=\"fr\">kalzium</a>, pour résoudre des équations chimiques!</li>\n</ul>\n<blockquote>\n<p>a CH3CH2OH + b O2 -&gt; c H2O + d CO2 =&gt; 1 CH3CH2OH + 3 O2 -&gt; 3 H2O +\n2 CO2<br />\n<a href=\"http://websvn.kde.org/trunk/KDE/kdeedu/kalzium/src/solver/README?revision=437725&amp;view=markup\" hreflang=\"en\">Code sources</a></p>\n</blockquote>\n<ul>\n<li><a href=\"http://fr.wikipedia.org/wiki/XSLT\" hreflang=\"fr\">XSLT</a>\n<strong>est</strong> une langage fonctionnel décrit en XML!</li>\n</ul>\n<ul>\n<li>Enfin, un phénomène majeur est l'adoption massive des libraries\n<em>ajax</em> comme <a href=\"http://jquery.com/\" hreflang=\"en\">jQuery</a>.</li>\n</ul>\n<p>Figurez vous que ces libraries utilisent fortement les aspects fonctionnels\nde javascript.<br />\nExamples avec jQuery :</p>\n<pre>\n     $('#myButton').bind('click', function() {\n         // 'this' is the DOM element that triggered the event\n         alert(this.id == 'myButton');\n     });\n</pre>\n<pre>\n     $('div').each(function() {\n         // 'this' is a DOM element\n         alert(this.tagName.toLowerCase() == 'div');\n     });\n</pre>","","ocaml est ocaml programmation fonctionnelle sont déjà parmis nous mediawiki logiciel faisant tourner wikipedia utilise ocaml pour afficher ses formules mathématiques kde fait même avec son application tableau périodique des elements chimiques kalzium pour résoudre des équations chimiques ch3ch2oh h2o co2 ch3ch2oh h2o co2 code sources xslt est une langage fonctionnel décrit xml enfin phénomène majeur est adoption massive des libraries ajax comme jquery figurez vous que ces libraries utilisent fortement les aspects fonctionnels javascript examples avec jquery mybutton bind click function this the dom element that triggered the event alert this mybutton div each function this dom element alert this tagname tolowercase div","a:1:{s:3:\"tag\";a:4:{i:0;s:5:\"OCaml\";i:1;s:6:\"jquery\";i:2;s:9:\"mediawiki\";i:3;s:27:\"programmation fonctionnelle\";}}","1","0","1","1","0","0","0"
"559339","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","45328","2010-11-04 18:18:00","Europe/Paris","2010-11-04 17:18:03","2010-11-05 15:54:29","","post","xhtml","2010/11/04/Google-maps-hacks-part2-cool-function-to-power-up-route,-directions","fr","Google maps hacks part2 - cool function to power up route, directions","","","Another day, another library!<br/>\r\nThis new library brings some usefull functions and one of them is just awesome :)<br/>\r\nStart with these usefull functions:\r\n<ul>\r\n<li>return the distance between two points,</li>\r\n<li>retrieve the a point at a given distance between two another,</li>\r\n<li>compute the square box with a given size around a point</li>\r\n</ul>\r\nAnd the awesome function allows you to find the point at a given duration on a direction computed by google maps API. For example, you may retrieve the precive point where you are going to be after 1hour driving on the road from Paris to Berlin!\r\n<br />\r\nFor more information, I suggest you to check at the README available on github:\r\n<a href=\"https://github.com/ochameau/google-map-api-path-tools\">https://github.com/ochameau/google-map-api-path-tools</a><br/>\r\nAs usual, source code is available under LGPL Licence.","Another day, another library!<br />\nThis new library brings some usefull functions and one of them is just awesome\n:)<br />\nStart with these usefull functions:\n<ul>\n<li>return the distance between two points,</li>\n<li>retrieve the a point at a given distance between two another,</li>\n<li>compute the square box with a given size around a point</li>\n</ul>\nAnd the awesome function allows you to find the point at a given duration on a\ndirection computed by google maps API. For example, you may retrieve the\nprecive point where you are going to be after 1hour driving on the road from\nParis to Berlin!<br />\nFor more information, I suggest you to check at the README available on github:\n<a href=\"https://github.com/ochameau/google-map-api-path-tools\">https://github.com/ochameau/google-map-api-path-tools</a><br />\n\nAs usual, source code is available under LGPL Licence.","","google maps hacks part2 cool function power route directions another day another library this new library brings some usefull functions and one them just awesome start with these usefull functions return the distance between two points retrieve the point given distance between two another compute the square box with given size around point and the awesome function allows you find the point given duration direction computed google maps api for example you may retrieve the precive point where you are going after 1hour driving the road from paris berlin for more information suggest you check the readme available github https github com ochameau google map api path tools usual source code available under lgpl licence","a:1:{s:3:\"tag\";a:1:{i:0;s:15:\"google maps api\";}}","1","0","1","1","0","0","0"
"195229","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18842","2008-01-29 23:29:00","Europe/Paris","2008-01-07 22:01:30","2008-01-29 22:28:19","","post","wiki","2008/01/07/Le-fonctionnel-arrive","fr","Le fonctionnel arrive","","","!!! [F#|tag:F#]\r\nLe tout dernier langage de Microsoft, F# est basé à 80% sur Ocaml!%%%\r\n[Détail des différences entre ocaml et F#|http://research.microsoft.com/fsharp/manual/ml-compat.aspx|en]\r\n%%%\r\n\r\n!!! [Haskell|tag:Haskell], [HOP|tag:HOP] et l'INRIA dans la presse du monde php/java\r\nLes magazines de vulgarisation se mettent à parler d'[Haskell|http://fr.wikipedia.org/wiki/Haskell|fr] (langage fonctionnel pur)%%%\r\n[Introduction sur programmez.com|http://www.programmez.com/magazine_articles.php?id_article=980&&titre=Introduction%20%C3%A0%20la%20programmation%20fonctionnelle%20avec%20Haskell|fr]\r\n\r\nIl vont même jusqu'à parler de [HOP|http://hop.inria.fr/|fr], un projet de l'inria qui propose un framework de développement d'applications web (html/js) avec un langage basé en grande partie sur Scheme.\r\nEt pour ceux qui ne le savent pas, [Scheme|http://fr.wikipedia.org/wiki/Scheme|fr] est un autre langage fonctionnel!%%%\r\n[Intro de l'article sur HOP|http://www.programmez.com/magazine_articles.php?id_article=974&&titre=Hop,%20un%20langage%20de%20programmation%20pour%20le%20Web%20(1re%20partie)|fr]\r\n%%%\r\n\r\n\r\n!!! [Intel|tag:Intel] et [Ct|tag:Ct]\r\nIntel planche sur le calcul parallèle (il y'a effectivement de quoi faire avec les multi core!) et a créé un nouveau langage :\r\n''[Ct|http://fr.wikipedia.org/wiki/Intel_Ct|fr] is strict and purely functional''   ([description très détaillée de Ct|http://techresearch.intel.com/articles/Tera-Scale/1514.htm|en])%%%\r\nC'est un langage pour simplifier le développement sur les machines multicore, et plus particulièrement sur les serveurs de calculs du projet [TeraScale|http://techresearch.intel.com/articles/Tera-Scale/1421.htm|en] (processeur avec 80cores).%%%\r\n[Présentation de Ct par un de ses créateurs|http://cufp.galois.com/slides/2007/AnwarGhuloum.pdf|en]\r\n%%%","<h3><a href=\"/tag/F\">F#</a></h3>\n<p>Le tout dernier langage de Microsoft, F# est basé à 80% sur Ocaml!<br />\n<a href=\"http://research.microsoft.com/fsharp/manual/ml-compat.aspx\" hreflang=\"en\">Détail des différences entre ocaml et F#</a><br /></p>\n<h3><a href=\"/tag/Haskell\">Haskell</a>, <a href=\"/tag/HOP\">HOP</a> et l'INRIA\ndans la presse du monde php/java</h3>\n<p>Les magazines de vulgarisation se mettent à parler d'<a href=\"http://fr.wikipedia.org/wiki/Haskell\" hreflang=\"fr\">Haskell</a> (langage\nfonctionnel pur)<br />\n<a href=\"http://www.programmez.com/magazine_articles.php?id_article=980&amp;&amp;titre=Introduction%20%C3%A0%20la%20programmation%20fonctionnelle%20avec%20Haskell\" hreflang=\"fr\">Introduction sur programmez.com</a></p>\n<p>Il vont même jusqu'à parler de <a href=\"http://hop.inria.fr/\" hreflang=\"fr\">HOP</a>, un projet de l'inria qui propose un framework de développement\nd'applications web (html/js) avec un langage basé en grande partie sur Scheme.\nEt pour ceux qui ne le savent pas, <a href=\"http://fr.wikipedia.org/wiki/Scheme\" hreflang=\"fr\">Scheme</a> est un autre\nlangage fonctionnel!<br />\n<a href=\"http://www.programmez.com/magazine_articles.php?id_article=974&amp;&amp;titre=Hop,%20un%20langage%20de%20programmation%20pour%20le%20Web%20(1re%20partie)\" hreflang=\"fr\">Intro de l'article sur HOP</a><br /></p>\n<h3><a href=\"/tag/Intel\">Intel</a> et <a href=\"/tag/Ct\">Ct</a></h3>\n<p>Intel planche sur le calcul parallèle (il y'a effectivement de quoi faire\navec les multi core!) et a créé un nouveau langage : <em><a href=\"http://fr.wikipedia.org/wiki/Intel_Ct\" hreflang=\"fr\">Ct</a> is strict and\npurely functional</em> (<a href=\"http://techresearch.intel.com/articles/Tera-Scale/1514.htm\" hreflang=\"en\">description très détaillée de Ct</a>)<br />\nC'est un langage pour simplifier le développement sur les machines multicore,\net plus particulièrement sur les serveurs de calculs du projet <a href=\"http://techresearch.intel.com/articles/Tera-Scale/1421.htm\" hreflang=\"en\">TeraScale</a> (processeur avec 80cores).<br />\n<a href=\"http://cufp.galois.com/slides/2007/AnwarGhuloum.pdf\" hreflang=\"en\">Présentation de Ct par un de ses créateurs</a><br /></p>","","fonctionnel arrive tout dernier langage microsoft est basé sur ocaml détail des différences entre ocaml haskell hop inria dans presse monde php java les magazines vulgarisation mettent parler haskell langage fonctionnel pur introduction sur programmez com vont même jusqu parler hop projet inria qui propose framework développement applications web html avec langage basé grande partie sur scheme pour ceux qui savent pas scheme est autre langage fonctionnel intro article sur hop intel intel planche sur calcul parallèle effectivement quoi faire avec les multi core créé nouveau langage strict and purely functional description très détaillée est langage pour simplifier développement sur les machines multicore plus particulièrement sur les serveurs calculs projet terascale processeur avec 80cores présentation par ses créateurs","a:1:{s:3:\"tag\";a:5:{i:0;s:2:\"Ct\";i:1;s:5:\"Intel\";i:2;s:3:\"HOP\";i:3;s:7:\"Haskell\";i:4;s:1:\"F\";}}","1","0","1","1","0","0","0"
"295408","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","","2008-11-07 19:07:00","Europe/Paris","2008-11-07 18:07:53","2008-11-07 23:15:50","","post","wiki","2008/11/07/Functional-Programming-and-Finance","fr","Functional Programming and Finance","","","Qui l'eut cru ? \r\nLe petit Eddy, vous savez celui au fond de la classe qui adore les proba et supporte tout juste les délires de geek;\r\net bien il est tombé lui aussi dans la spirale des langages modernes!\r\n\r\nIl vient même de lancer tout seul un blog sur la promotion du F# dans la finance :%%%\r\n[IT quant|http://it-quant.blogspot.com/|en]%%%\r\nEt oui, ils sont encore dans les solutions propriétaires en C ... ++ !!!%%%\r\nEnfin, je le promets, je n'y suis pour pas grand chose pour son intérêt au F#%%%","<p>Qui l'eut cru ? Le petit Eddy, vous savez celui au fond de la classe\nqui adore les proba et supporte tout juste les délires de geek; et bien il est\ntombé lui aussi dans la spirale des langages modernes!</p>\n<p>Il vient même de lancer tout seul un blog sur la promotion du F# dans la\nfinance :<br />\n<a href=\"http://it-quant.blogspot.com/\" hreflang=\"en\">IT quant</a><br />\nEt oui, ils sont encore dans les solutions propriétaires en C ... ++ !!!<br />\nEnfin, je le promets, je n'y suis pour pas grand chose pour son intérêt au\nF#<br /></p>","","functional programming and finance qui eut cru petit eddy vous savez celui fond classe qui adore les proba supporte tout juste les délires geek bien est tombé lui aussi dans spirale des langages modernes vient même lancer tout seul blog sur promotion dans finance quant oui ils sont encore dans les solutions propriétaires enfin promets suis pour pas grand chose pour son intérêt","a:1:{s:3:\"tag\";a:2:{i:0;s:7:\"finance\";i:1;s:1:\"F\";}}","1","0","1","1","2","0","0"
"188926","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18842","2007-12-26 19:01:00","Europe/Paris","2007-12-26 18:01:31","2007-12-29 11:51:21","","post","wiki","2007/12/26/OCaml-existe","fr","OCaml \"existe\".","","","Commençons simplement en montrant que {{OCaml EXISTE}}.\r\n\r\n!!!![Miniville|tag:Miniville]\r\nVous avez surement entendu parlé de [Miniville|http://montcuq.miniville.fr/|fr],\r\nmais si, le jeu en flash où chaque visite permet d'agrandir une ville.\r\nC'est sans intérêt, certes, mais cela a le mérite d'exister dans la vraie vie.\r\nDonc vous ne le devinerez jamais, mais l'équipe qui a développé ce jeu, Motion twin, utilise [OCaml|tag:OCaml]!\r\n\r\nEn effet, il suffit d'aller sur [leur site|http://tech.motion-twin.com/ocaml.html|fr]\r\npour se rendre compte qu'ils ont assimilé les qualité de ce langage.\r\nIls ont ainsi développé une plateforme/langage maison qui sert à générer des applications flash ainsi que le webservice côté serveur.%%%\r\nLe nom de se projet ? \r\n[Haxe|http://haxe.org/fr/intro|fr]%%%\r\nUn [tas de projets|http://haxe.org/projects|fr] gravitent déjà autour!%%%\r\n(Disponible sur linux, mac et win)\r\n\r\n\r\nPas convaincu ? Vous n'avez peut être pas le plugin flash ? %%%\r\nEt bah ça tombe bien, j'ai un autre exemple pile poil pour vous!\r\n\r\n!!!![Xen|tag:Xen]\r\n\r\n[Xen|http://www.citrixxenserver.com/Pages/default.aspx|en], l'hyperviseur de machines virtuelles embarque avec lui quelques 100 000 lignes d'[OCaml|tag:OCaml]!%%%\r\nLa cerise sur le cadeau, c'est que ce logiciel libre n'est pas développé par des frenchies de l'INRIA!\r\nNon, Xen vient tout droit de l'université de Cambridge.\r\n\r\nSource de cette info, [la recherche de profil \"ocaml hacker\"|http://groups.google.com/group/fa.caml/browse_frm/thread/5b3755174580829e/7ea42655927e438e#7ea42655927e438e|en] par Xen.\r\n\r\n\r\n!!!![EDOS|tag:EDOS]\r\n{{[Environment for the development and Distribution of Open Source software|http://www.edos-project.org/|en]}}%%%\r\nCe projet a pour but de faciliter le développement, la maintenance et les tests des distributions libres en améliorant les outils de gestion de paquets.\r\nEn voici un projet intéressant! Oui, c'est un projet en partie français, oui l'INRIA et des universités sont sur le coup,\r\n__mais__ cela a déjà des retombées concrètes : [Assurance qualité de Debian|http://edos.debian.net/] et les outils développés peuvent potentiellement devenir des applications courantes.%%%\r\nJ'allais oublier de préciser: OCaml est le langage de programmation principal de ce projet.\r\n\r\n[Liste des outils développés|http://www.edos-project.org/xwiki/bin/view/Main/Tools|en]%%%\r\n[Accès direct aux sources|https://protactinium.pps.jussieu.fr:12345/svn/edos/software/dependencies/|en]\r\n\r\nPour ceux qui sont passés à jussieu, il est important de noter la participation de [M. Di cosmo|http://www.pps.jussieu.fr/~dicosmo/]\r\n\r\n%%%\r\n\r\n\r\n  Conclusion > __OCaml existe.__","<p>Commençons simplement en montrant que <q>OCaml EXISTE</q>.</p>\n<h2><a href=\"/tag/Miniville\">Miniville</a></h2>\n<p>Vous avez surement entendu parlé de <a href=\"http://montcuq.miniville.fr/\" hreflang=\"fr\">Miniville</a>, mais si, le jeu en flash où chaque visite permet\nd'agrandir une ville. C'est sans intérêt, certes, mais cela a le mérite\nd'exister dans la vraie vie. Donc vous ne le devinerez jamais, mais l'équipe\nqui a développé ce jeu, Motion twin, utilise <a href=\"/tag/OCaml\">OCaml</a>!</p>\n<p>En effet, il suffit d'aller sur <a href=\"http://tech.motion-twin.com/ocaml.html\" hreflang=\"fr\">leur site</a> pour se\nrendre compte qu'ils ont assimilé les qualité de ce langage. Ils ont ainsi\ndéveloppé une plateforme/langage maison qui sert à générer des applications\nflash ainsi que le webservice côté serveur.<br />\nLe nom de se projet ? <a href=\"http://haxe.org/fr/intro\" hreflang=\"fr\">Haxe</a><br />\nUn <a href=\"http://haxe.org/projects\" hreflang=\"fr\">tas de projets</a>\ngravitent déjà autour!<br />\n(Disponible sur linux, mac et win)</p>\n<p>Pas convaincu ? Vous n'avez peut être pas le plugin flash ?<br />\nEt bah ça tombe bien, j'ai un autre exemple pile poil pour vous!</p>\n<h2><a href=\"/tag/Xen\">Xen</a></h2>\n<p><a href=\"http://www.citrixxenserver.com/Pages/default.aspx\" hreflang=\"en\">Xen</a>, l'hyperviseur de machines virtuelles embarque avec lui quelques\n100 000 lignes d'<a href=\"/tag/OCaml\">OCaml</a>!<br />\nLa cerise sur le cadeau, c'est que ce logiciel libre n'est pas développé par\ndes frenchies de l'INRIA! Non, Xen vient tout droit de l'université de\nCambridge.</p>\n<p>Source de cette info, <a href=\"http://groups.google.com/group/fa.caml/browse_frm/thread/5b3755174580829e/7ea42655927e438e#7ea42655927e438e\" hreflang=\"en\">la recherche de profil &quot;ocaml hacker&quot;</a> par Xen.</p>\n<h2><a href=\"/tag/EDOS\">EDOS</a></h2>\n<p><q><a href=\"http://www.edos-project.org/\" hreflang=\"en\">Environment for the\ndevelopment and Distribution of Open Source software</a></q><br />\nCe projet a pour but de faciliter le développement, la maintenance et les tests\ndes distributions libres en améliorant les outils de gestion de paquets. En\nvoici un projet intéressant! Oui, c'est un projet en partie français, oui\nl'INRIA et des universités sont sur le coup, <strong>mais</strong> cela a déjà\ndes retombées concrètes : <a href=\"http://edos.debian.net/\">Assurance\nqualité de Debian</a> et les outils développés peuvent potentiellement devenir\ndes applications courantes.<br />\nJ'allais oublier de préciser: OCaml est le langage de programmation principal\nde ce projet.</p>\n<p><a href=\"http://www.edos-project.org/xwiki/bin/view/Main/Tools\" hreflang=\"en\">Liste des outils développés</a><br />\n<a href=\"https://protactinium.pps.jussieu.fr:12345/svn/edos/software/dependencies/\" hreflang=\"en\">Accès direct aux sources</a></p>\n<p>Pour ceux qui sont passés à jussieu, il est important de noter la\nparticipation de <a href=\"http://www.pps.jussieu.fr/~dicosmo/\">M. Di\ncosmo</a></p>\n<p><br /></p>\n<pre>\n Conclusion &gt; <strong>OCaml existe.</strong>\n</pre>","","ocaml existe commençons simplement montrant que ocaml existe miniville vous avez surement entendu parlé miniville mais jeu flash chaque visite permet agrandir une ville est sans intérêt certes mais cela mérite exister dans vraie vie donc vous devinerez jamais mais équipe qui développé jeu motion twin utilise ocaml effet suffit aller sur leur site pour rendre compte ils ont assimilé les qualité langage ils ont ainsi développé une plateforme langage maison qui sert générer des applications flash ainsi que webservice côté serveur nom projet haxe tas projets gravitent déjà autour disponible sur linux mac win pas convaincu vous avez peut être pas plugin flash bah tombe bien autre exemple pile poil pour vous xen xen hyperviseur machines virtuelles embarque avec lui quelques 100 000 lignes ocaml cerise sur cadeau est que logiciel libre est pas développé par des frenchies inria non xen vient tout droit université cambridge source cette info recherche profil quot ocaml hacker quot par xen edos environment for the development and distribution open source software projet pour but faciliter développement maintenance les tests des distributions libres améliorant les outils gestion paquets voici projet intéressant oui est projet partie français oui inria des universités sont sur coup mais cela déjà des retombées concrètes assurance qualité debian les outils développés peuvent potentiellement devenir des applications courantes allais oublier préciser ocaml est langage programmation principal projet liste des outils développés accès direct aux sources pour ceux qui sont passés jussieu est important noter participation cosmo conclusion ocaml existe","a:1:{s:3:\"tag\";a:5:{i:0;s:4:\"Haxe\";i:1;s:9:\"Miniville\";i:2;s:3:\"Xen\";i:3;s:4:\"EDOS\";i:4;s:5:\"OCaml\";}}","1","0","1","1","2","0","0"
"214199","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18842","2008-02-26 18:04:00","Europe/Paris","2008-02-26 17:04:35","2008-03-04 18:09:13","","post","wiki","2008/02/26/Un-noyau-en-OCaml","fr","Un noyau en OCaml","","","Cette idée doit souvent revenir dans l'esprit des développeurs Haskell ou OCaml :\r\nPourquoi n'entendons-nous pas parler d'expériences de noyaux écris avec un langage fonctionnel ?\r\n\r\nEn effet, le fait de ne jamais avoir de segfault ou de null pointer exception est tout de même un sacré avantage dans un noyau!!!\r\nAlors oui, il y a à coup sûr d'énormes problèmes comme le garbage collector, on perdrait surement en contrôle et en efficacité.\r\nMais je reste convaincu que des fonctions en fonctionnel pur (donc sans effets de bords) seraient une sacrée avancée dans le développement kernel où l'on manipule plusieurs threads et plusieurs coeurs d'exécution en même temps!\r\n\r\nEt bien après une longue recherche, on peut trouver deux projets en OCaml :\r\n* [MyNOS|http://mynos.sourceforge.net/|en]\r\n* [Funk|http://home.gna.org/funk/|en]\r\nMalheureusement, ces projets n'ont plus d'activité notable depuis 2005 :(","<p>Cette idée doit souvent revenir dans l'esprit des développeurs Haskell ou\nOCaml : Pourquoi n'entendons-nous pas parler d'expériences de noyaux écris\navec un langage fonctionnel ?</p>\n<p>En effet, le fait de ne jamais avoir de segfault ou de null pointer\nexception est tout de même un sacré avantage dans un noyau!!! Alors oui, il y a\nà coup sûr d'énormes problèmes comme le garbage collector, on perdrait surement\nen contrôle et en efficacité. Mais je reste convaincu que des fonctions en\nfonctionnel pur (donc sans effets de bords) seraient une sacrée avancée dans le\ndéveloppement kernel où l'on manipule plusieurs threads et plusieurs coeurs\nd'exécution en même temps!</p>\n<p>Et bien après une longue recherche, on peut trouver deux projets en\nOCaml :</p>\n<ul>\n<li><a href=\"http://mynos.sourceforge.net/\" hreflang=\"en\">MyNOS</a></li>\n<li><a href=\"http://home.gna.org/funk/\" hreflang=\"en\">Funk</a></li>\n</ul>\n<p>Malheureusement, ces projets n'ont plus d'activité notable depuis 2005\n:(</p>","","noyau ocaml cette idée doit souvent revenir dans esprit des développeurs haskell ocaml pourquoi entendons nous pas parler expériences noyaux écris avec langage fonctionnel effet fait jamais avoir segfault null pointer exception est tout même sacré avantage dans noyau alors oui coup sûr énormes problèmes comme garbage collector perdrait surement contrôle efficacité mais reste convaincu que des fonctions fonctionnel pur donc sans effets bords seraient une sacrée avancée dans développement kernel manipule plusieurs threads plusieurs coeurs exécution même temps bien après une longue recherche peut trouver deux projets ocaml mynos funk malheureusement ces projets ont plus activité notable depuis 2005","a:1:{s:3:\"tag\";a:5:{i:0;s:4:\"funk\";i:1;s:5:\"mynos\";i:2;s:6:\"kernel\";i:3;s:5:\"noyau\";i:4;s:5:\"OCaml\";}}","1","0","1","1","0","0","0"
"456515","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18841","2009-10-31 00:46:00","Europe/Paris","2009-10-30 23:46:51","2009-10-30 23:46:51","","post","xhtml","2009/10/31/Mozilla-hacking-:-find-matching-tab-for-each-HTTP-request","fr","Mozilla hacking : find matching tab for each HTTP request","","","<p style=\"text-align: center\"><strong>Let the source code talk!</strong></p>\r\n<pre>\r\nfunction getBrowserForRequest(channel) {\r\n  // First, we need to find loadContext for this request\r\n  // channel is an nsIHttpChannel which inherits from nsIChannel then from nsIRequest :\r\n  // http://mxr.mozilla.org/mozilla-central/source/netwerk/base/public/nsIChannel.idl#60\r\n  // \--> notificationCallbacks\r\n  // http://mxr.mozilla.org/mozilla-central/source/netwerk/base/public/nsIRequest.idl#50\r\n  // \--> loadGroup\r\n  \r\n  var loadContext;\r\n  try {\r\n    loadContext = channel.notificationCallbacks.getInterface(Components.interfaces.nsILoadContext);\r\n  } catch (ex) {\r\n    try {\r\n      loadContext = channel.loadGroup.notificationCallbacks.getInterface(Components.interfaces.nsILoadContext);\r\n    } catch (ex) {\r\n      loadContext = null;\r\n    }\r\n  }\r\n  \r\n  // Some firefox internal request doesn't have loadGroup : \r\n  // - safebrowsing requests\r\n  // - search suggest queries\r\n  // - ssl certificate verification\r\n  // ...\r\n  \r\n  // But for web content, it appears that only this case doesn't have loadGroup :\r\n  // - CSS Icons explicitely lets loadGroup empty : \r\n  // http://mxr.mozilla.org/mozilla-central/source/layout/generic/nsImageFrame.cpp#1653\r\n  \r\n  if (!loadContext) {\r\n    Components.utils.reportError(\"Unable to find load context for \"+channel.URI.spec+\"\n\");\r\n    return null;\r\n  }\r\n  \r\n  // Then we just have to retrieve associated window from the loadContext\r\n  // http://mxr.mozilla.org/mozilla-central/source/docshell/base/nsILoadContext.idl\r\n  \r\n  var win = loadContext.associatedWindow;\r\n  if (!win) {\r\n    Components.utils.reportError(\"Unable to find associated window for \"+channel.URI.spec+\"\n\");\r\n    return null;\r\n  }\r\n  \r\n  // Now find the top xul ChromeWindow object with some QueryInterface magic\r\n  // (all chrome requests fail here)\r\n  var browserWindow;\r\n  try {\r\n    browserWindow = win.QueryInterface(Components.interfaces.nsIInterfaceRequestor)\r\n                   .getInterface(Components.interfaces.nsIWebNavigation)\r\n                   .QueryInterface(Components.interfaces.nsIDocShellTreeItem)\r\n                   .rootTreeItem\r\n                   .QueryInterface(Components.interfaces.nsIInterfaceRequestor)\r\n                   .getInterface(Components.interfaces.nsIDOMWindow).wrappedJSObject; \r\n  } catch(e) {}\r\n  \r\n  if (!browserWindow) {\r\n    Components.utils.reportError(\"Unable to find top xul window \"+channel.URI.spec+\"\n\");\r\n    return null;\r\n  }\r\n  \r\n  // Need to iterate above windows to go through iframes up to the top content window\r\n  while( win!=win.top ) {\r\n    win = win.top;\r\n  }\r\n  \r\n  // And finally, find the matching tab\r\n  var browser = browserWindow.gBrowser.getBrowserForDocument(win.document);\r\n  if (!browser) {\r\n    Components.utils.reportError(\"Unable to find browser \"+channel.URI.spec+\"\n\");\r\n    return null;\r\n  }\r\n  \r\n  Components.utils.reportError\"Found browser for \"+channel.URI.spec+\"\n\");\r\n  return browser;\r\n}\r\n</pre>","<p style=\"text-align: center\"><strong>Let the source code talk!</strong></p>\n<pre>\nfunction getBrowserForRequest(channel) {\n  // First, we need to find loadContext for this request\n  // channel is an nsIHttpChannel which inherits from nsIChannel then from nsIRequest :\n  // http://mxr.mozilla.org/mozilla-central/source/netwerk/base/public/nsIChannel.idl#60\n  // \--&gt; notificationCallbacks\n  // http://mxr.mozilla.org/mozilla-central/source/netwerk/base/public/nsIRequest.idl#50\n  // \--&gt; loadGroup\n  \n  var loadContext;\n  try {\n    loadContext = channel.notificationCallbacks.getInterface(Components.interfaces.nsILoadContext);\n  } catch (ex) {\n    try {\n      loadContext = channel.loadGroup.notificationCallbacks.getInterface(Components.interfaces.nsILoadContext);\n    } catch (ex) {\n      loadContext = null;\n    }\n  }\n  \n  // Some firefox internal request doesn't have loadGroup : \n  // - safebrowsing requests\n  // - search suggest queries\n  // - ssl certificate verification\n  // ...\n  \n  // But for web content, it appears that only this case doesn't have loadGroup :\n  // - CSS Icons explicitely lets loadGroup empty : \n  // http://mxr.mozilla.org/mozilla-central/source/layout/generic/nsImageFrame.cpp#1653\n  \n  if (!loadContext) {\n    Components.utils.reportError(&quot;Unable to find load context for &quot;+channel.URI.spec+&quot;\n&quot;);\n    return null;\n  }\n  \n  // Then we just have to retrieve associated window from the loadContext\n  // http://mxr.mozilla.org/mozilla-central/source/docshell/base/nsILoadContext.idl\n  \n  var win = loadContext.associatedWindow;\n  if (!win) {\n    Components.utils.reportError(&quot;Unable to find associated window for &quot;+channel.URI.spec+&quot;\n&quot;);\n    return null;\n  }\n  \n  // Now find the top xul ChromeWindow object with some QueryInterface magic\n  // (all chrome requests fail here)\n  var browserWindow;\n  try {\n    browserWindow = win.QueryInterface(Components.interfaces.nsIInterfaceRequestor)\n                   .getInterface(Components.interfaces.nsIWebNavigation)\n                   .QueryInterface(Components.interfaces.nsIDocShellTreeItem)\n                   .rootTreeItem\n                   .QueryInterface(Components.interfaces.nsIInterfaceRequestor)\n                   .getInterface(Components.interfaces.nsIDOMWindow).wrappedJSObject; \n  } catch(e) {}\n  \n  if (!browserWindow) {\n    Components.utils.reportError(&quot;Unable to find top xul window &quot;+channel.URI.spec+&quot;\n&quot;);\n    return null;\n  }\n  \n  // Need to iterate above windows to go through iframes up to the top content window\n  while( win!=win.top ) {\n    win = win.top;\n  }\n  \n  // And finally, find the matching tab\n  var browser = browserWindow.gBrowser.getBrowserForDocument(win.document);\n  if (!browser) {\n    Components.utils.reportError(&quot;Unable to find browser &quot;+channel.URI.spec+&quot;\n&quot;);\n    return null;\n  }\n  \n  Components.utils.reportError&quot;Found browser for &quot;+channel.URI.spec+&quot;\n&quot;);\n  return browser;\n}\n</pre>","","mozilla hacking find matching tab for each http request let the source code talk function getbrowserforrequest channel first need find loadcontext for this request channel nsihttpchannel which inherits from nsichannel then from nsirequest http mxr mozilla org mozilla central source netwerk base public nsichannel idl notificationcallbacks http mxr mozilla org mozilla central source netwerk base public nsirequest idl loadgroup var loadcontext try loadcontext channel notificationcallbacks getinterface components interfaces nsiloadcontext catch try loadcontext channel loadgroup notificationcallbacks getinterface components interfaces nsiloadcontext catch loadcontext null some firefox internal request doesn have loadgroup safebrowsing requests search suggest queries ssl certificate verification but for web content appears that only this case doesn have loadgroup css icons explicitely lets loadgroup empty http mxr mozilla org mozilla central source layout generic nsimageframe cpp 1653 loadcontext components utils reporterror quot unable find load context for quot channel uri spec quot quot return null then just have retrieve associated window from the loadcontext http mxr mozilla org mozilla central source docshell base nsiloadcontext idl var win loadcontext associatedwindow win components utils reporterror quot unable find associated window for quot channel uri spec quot quot return null now find the top xul chromewindow object with some queryinterface magic all chrome requests fail here var browserwindow try browserwindow win queryinterface components interfaces nsiinterfacerequestor getinterface components interfaces nsiwebnavigation queryinterface components interfaces nsidocshelltreeitem roottreeitem queryinterface components interfaces nsiinterfacerequestor getinterface components interfaces nsidomwindow wrappedjsobject catch browserwindow components utils reporterror quot unable find top xul window quot channel uri spec quot quot return null need iterate above windows through iframes the top content window while win win top win win top and finally find the matching tab var browser browserwindow gbrowser getbrowserfordocument win document browser components utils reporterror quot unable find browser quot channel uri spec quot quot return null components utils reporterror quot found browser for quot channel uri spec quot quot return browser","a:1:{s:3:\"tag\";a:2:{i:0;s:10:\"nsIRequest\";i:1;s:7:\"mozilla\";}}","-2","0","1","1","0","0","0"
"448816","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","","2009-10-11 23:22:00","Europe/Paris","2009-10-11 21:22:29","2009-10-11 21:22:29","","post","xhtml","2009/10/11/JS-Ctypes-with-structs","fr","JS Ctypes with structs","","","--- windows native notifications\r\nBOOL Shell_NotifyIcon(      \r\n    DWORD dwMessage,\r\n    PNOTIFYICONDATA lpdata\r\n);\r\nhttp://msdn.microsoft.com/en-us/library/bb762159%28VS.85%29.aspx\r\n\r\n--- msn status message\r\nstruct COPYDATASTRUCT\r\n{\r\n  public int dwData;\r\n  public int cbData;\r\n  public int lpData;\r\n}\r\nCOPYDATASTRUCT data;\r\ndata.dwData = 0x0547;\r\ndata.lpData = VarPtr(buffer);\r\ndata.cbData = buffer.Length * 2;\r\nSendMessage(handle, WM_COPYDATA, 0, VarPtr(data));\r\nhttp://www.codeproject.com/KB/cs/MSNFloatingText.aspx","--- windows native notifications BOOL Shell_NotifyIcon( DWORD dwMessage,\nPNOTIFYICONDATA lpdata );\nhttp://msdn.microsoft.com/en-us/library/bb762159%28VS.85%29.aspx --- msn status\nmessage struct COPYDATASTRUCT { public int dwData; public int cbData; public\nint lpData; } COPYDATASTRUCT data; data.dwData = 0x0547; data.lpData =\nVarPtr(buffer); data.cbData = buffer.Length * 2; SendMessage(handle,\nWM_COPYDATA, 0, VarPtr(data));\nhttp://www.codeproject.com/KB/cs/MSNFloatingText.aspx","","ctypes with structs windows native notifications bool shell notifyicon dword dwmessage pnotifyicondata lpdata http msdn microsoft com library bb762159 28vs aspx msn status message struct copydatastruct public int dwdata public int cbdata public int lpdata copydatastruct data data dwdata 0x0547 data lpdata varptr buffer data cbdata buffer length sendmessage handle copydata varptr data http www codeproject com msnfloatingtext aspx","a:0:{}","-2","0","1","1","0","0","0"
"199219","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","","2008-01-20 15:49:00","Europe/Paris","2008-01-20 14:49:57","2008-01-20 14:49:57","","post","wiki","2008/01/20/le-petit-monde-ocaml","fr","le petit monde ocaml","","","De nombreux langages étendent OCaml pour lui ajouter des fonctionnalités un peu plus exotiques.\r\n\r\n    * F# est un langage de la plateforme .NET développé par Microsoft Research, basé sur OCaml (et en partie compatible)\r\n    * MetaOCaml ajoute un mécanisme de quotations et de génération de code au runtime, qui apporte des fonctionnalités de métaprogrammation à OCaml\r\n    * Fresh OCaml (basé sur AlphaCaml, un autre dérivé de OCaml) facilite la manipulation de noms symboliques\r\n    * JoCaml ajoute à OCaml un support du Join Calculus, orienté vers les programmes concurrents ou distribués\r\n    * OcamlP3L apporte une forme particulière de parallèlisme, basée sur les \"squelettes\" (skeleton programming)\r\n    * GCaml ajoute le polymorphisme ad-hoc à OCaml, permettant la surcharge des opérateurs ou un marshalling conservant les informations de typage\r\n    * OCamlDuce permet au système de types de représenter des valeurs XML ou liées à des expressions régulières. C'est un intermédiaire entre OCaml et le langage CDuce, spécialisé dans la manipulation du XML","<p>De nombreux langages étendent OCaml pour lui ajouter des fonctionnalités un\npeu plus exotiques.</p>\n<pre>\n   * F# est un langage de la plateforme .NET développé par Microsoft Research, basé sur OCaml (et en partie compatible)\n   * MetaOCaml ajoute un mécanisme de quotations et de génération de code au runtime, qui apporte des fonctionnalités de métaprogrammation à OCaml\n   * Fresh OCaml (basé sur AlphaCaml, un autre dérivé de OCaml) facilite la manipulation de noms symboliques\n   * JoCaml ajoute à OCaml un support du Join Calculus, orienté vers les programmes concurrents ou distribués\n   * OcamlP3L apporte une forme particulière de parallèlisme, basée sur les &quot;squelettes&quot; (skeleton programming)\n   * GCaml ajoute le polymorphisme ad-hoc à OCaml, permettant la surcharge des opérateurs ou un marshalling conservant les informations de typage\n   * OCamlDuce permet au système de types de représenter des valeurs XML ou liées à des expressions régulières. C'est un intermédiaire entre OCaml et le langage CDuce, spécialisé dans la manipulation du XML\n</pre>","","petit monde ocaml nombreux langages étendent ocaml pour lui ajouter des fonctionnalités peu plus exotiques est langage plateforme net développé par microsoft research basé sur ocaml partie compatible metaocaml ajoute mécanisme quotations génération code runtime qui apporte des fonctionnalités métaprogrammation ocaml fresh ocaml basé sur alphacaml autre dérivé ocaml facilite manipulation noms symboliques jocaml ajoute ocaml support join calculus orienté vers les programmes concurrents distribués ocamlp3l apporte une forme particulière parallèlisme basée sur les quot squelettes quot skeleton programming gcaml ajoute polymorphisme hoc ocaml permettant surcharge des opérateurs marshalling conservant les informations typage ocamlduce permet système types représenter des valeurs xml liées des expressions régulières est intermédiaire entre ocaml langage cduce spécialisé dans manipulation xml","a:0:{}","-2","0","1","1","0","0","0"
"220181","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","","2008-03-12 23:19:00","Europe/Paris","2008-03-12 22:19:37","2008-03-12 22:19:37","","post","wiki","2008/03/12/Et-pourquoi-mozilla-firefox-le-xul-et-tout-ce-qui-tourne-autour","fr","Et pourquoi mozilla, firefox, le xul et tout ce qui tourne autour ?","","","pour ça :\r\nhttp://www.microsoft.com/windows/products/winfamily/ie/ie8/readiness/NewFeatures.htm#activities\r\nhttp://www.kaply.com/weblog/2008/03/07/microsoft-activities-for-firefox-new-version/\r\net ça :\r\nhttp://simile.mit.edu/seek/\r\nou ça :\r\nhttp://scenari-platform.org/projects/scenari/en/pres/co/\r\nmais aussi tout ça :\r\nmiro, songbird, joost, yoono\r\net encore tout ça :\r\nhttp://mozpad.org/doku.php?id=map_of_the_mozpad_universe\r\nhttp://www.openkomodo.com/\r\nhttp://www.songbirdnest.com/","<p>pour ça :\nhttp://www.microsoft.com/windows/products/winfamily/ie/ie8/readiness/NewFeatures.htm#activities\nhttp://www.kaply.com/weblog/2008/03/07/microsoft-activities-for-firefox-new-version/\net ça : http://simile.mit.edu/seek/ ou ça :\nhttp://scenari-platform.org/projects/scenari/en/pres/co/ mais aussi tout\nça : miro, songbird, joost, yoono et encore tout ça :\nhttp://mozpad.org/doku.php?id=map_of_the_mozpad_universe\nhttp://www.openkomodo.com/ http://www.songbirdnest.com/</p>","","pourquoi mozilla firefox xul tout qui tourne autour pour http www microsoft com windows products winfamily ie8 readiness newfeatures htm activities http www kaply com weblog 2008 microsoft activities for firefox new version http simile mit edu seek http scenari platform org projects scenari pres mais aussi tout miro songbird joost yoono encore tout http mozpad org doku php map the mozpad universe http www openkomodo com http www songbirdnest com","a:0:{}","-2","0","1","1","0","0","0"
"216821","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18842","2008-03-04 23:40:00","Europe/Paris","2008-03-04 22:40:17","2008-03-04 22:40:17","","post","wiki","2008/03/04/Liquidsoap","fr","Liquidsoap","","","On parle dans linux mag d'un logiciel écrit en OCaml :\r\nhttp://misterpingouin.blogspot.com/2007/09/linux-mag.html","<p>On parle dans linux mag d'un logiciel écrit en OCaml :\nhttp://misterpingouin.blogspot.com/2007/09/linux-mag.html</p>","","liquidsoap parle dans linux mag logiciel écrit ocaml http misterpingouin blogspot com 2007 linux mag html","a:0:{}","-2","0","1","1","0","0","0"
"212157","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","18842","2008-02-21 15:31:00","Europe/Paris","2008-02-21 14:31:16","2008-02-21 14:31:16","","post","wiki","2008/02/21/MapReduce","fr","MapReduce","","","http://www.google.fr/search?q=mapreduce+fold&hl=fr&client=firefox-a&rls=org.mozilla:fr:official&hs=ghr&start=10&sa=N\r\n\r\nComment marche google ?\r\n\r\nGoogle File System >= mapreduce\r\n\r\nMap = Map\r\nReduce = Fold\r\n\r\nfonctionnel pur > pas d'effets de bord pour le map -> parrallelisable","<p>\nhttp://www.google.fr/search?q=mapreduce+fold&amp;hl=fr&amp;client=firefox-a&amp;rls=org.mozilla:fr:official&amp;hs=ghr&amp;start=10&amp;sa=N</p>\n<p>Comment marche google ?</p>\n<p>Google File System &gt;= mapreduce</p>\n<p>Map = Map Reduce = Fold</p>\n<p>fonctionnel pur &gt; pas d'effets de bord pour le map -&gt;\nparrallelisable</p>","","mapreduce http www google search mapreduce fold amp amp client firefox amp rls org mozilla official amp ghr amp start amp comment marche google google file system mapreduce map map reduce fold fonctionnel pur pas effets bord pour map parrallelisable","a:0:{}","-2","0","1","1","0","0","0"
"285915","1753e16dd8df58cacc819b4b1847ea73","AP3079-GANDI","","2008-10-12 22:15:00","Europe/Paris","2008-10-12 20:15:00","2008-10-12 20:15:00","","page","wiki","liens","fr","liens","","","* liste d'exemples conséquente\r\nhttp://www.codecodex.com/wiki/index.php?title=Objective_Caml\r\n\r\n* vidéo de cas concrets de la vraie vie\r\nhttp://www.realworldhaskell.org/blog/2008/06/10/cufp-2007-videos-now-easier-to-view/\r\n\r\n\r\n* A comprendre\r\nhttp://camltastic.blogspot.com/2008/05/phantom-types.html\r\n\r\n* A étudier : weak table - extending algebric data type\r\nhttp://camltastic.blogspot.com/2008/05/extending-immutable-data-structures_25.html","<ul>\n<li>liste d'exemples conséquente</li>\n</ul>\n<p>http://www.codecodex.com/wiki/index.php?title=Objective_Caml</p>\n<ul>\n<li>vidéo de cas concrets de la vraie vie</li>\n</ul>\n<p>\nhttp://www.realworldhaskell.org/blog/2008/06/10/cufp-2007-videos-now-easier-to-view/</p>\n<ul>\n<li>A comprendre</li>\n</ul>\n<p>http://camltastic.blogspot.com/2008/05/phantom-types.html</p>\n<ul>\n<li>A étudier : weak table - extending algebric data type</li>\n</ul>\n<p>\nhttp://camltastic.blogspot.com/2008/05/extending-immutable-data-structures_25.html</p>","","liens liste exemples conséquente http www codecodex com wiki index php title objective caml vidéo cas concrets vraie vie http www realworldhaskell org blog 2008 cufp 2007 videos now easier view comprendre http camltastic blogspot com 2008 phantom types html étudier weak table extending algebric data type http camltastic blogspot com 2008 extending immutable data structures html","","-2","0","0","0","0","0","0"